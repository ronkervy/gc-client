{"version":3,"sources":["shared/components/Styles.js","shared/components/Loader.js","shared/store/NotificationSlice.js","settings/store/SettingsServices.js","cart/store/CartServices.js","cart/store/CartSlice.js","cart/components/CartItems.js","cart/components/Cart.js","products/store/productServices.js","products/store/productSlice.js","products/components/ProductItem.js","products/components/ProductsList.js","components/Dashboard/Styles.js","components/Dashboard/Index.js","Styles.js","shared/components/Toast.js","cart/components/Styles.js","shared/store/ReportServices.js","cart/docs/TransactionDocDef.js","cart/components/Transaction.js","shared/store/ConnectionSlice.js","shared/components/Header.js","transactions/store/TransactionServices.js","transactions/components/TransactionSingle.js","transactions/components/TransactionItems.js","transactions/components/TransactionList.js","cart/components/SuccessPage.js","settings/components/Styles.js","settings/components/settings.js","App.js","transactions/store/TransactionSlice.js","shared/store/ReportSlice.js","settings/store/SettingsSlice.js","shared/store/MainStore.js","index.js"],"names":["useStyles","ProgressWrap","top","left","display","position","justifyContent","alignItems","zIndex","backgroundColor","height","width","transition","borderRadius","HeaderWrap","padding","WebkitAppRegion","withStyles","props","classes","className","CircularProgress","size","NotificationSlice","createSlice","initialState","open","message","severity","reducers","OpenNotification","state","payload","CloseNotification","actions","SettingsServices","axios","create","baseURL","timeout","sleep","x","Promise","resolve","setTimeout","SetIPAddress","createAsyncThunk","args","a","rejectWithValue","url","data","method","res","response","GetSettings","CartService","CreateTransaction","dispatch","resSettings","fulfilled","match","settings","host","undefined","address","values","cartAdapter","createEntityAdapter","selectId","prod","_id","CartSlice","name","getInitialState","cart","loading","error","addItem","index","findIndex","item_name","item_price","item_qty","qty","parseInt","total_per_unit","unshift","inventory_qty","discount","updateQty","val","NaN","setDiscount","calcDiscount","total","removeItem","splice","extraReducers","builder","addCase","pending","rejected","selectCart","cartItems","createDraftSafeSelector","cartLoading","CartItems","item","useDispatch","useState","setTotal","useEffect","TableRow","component","motion","tr","initial","y","opacity","animate","TableCell","style","fontSize","color","icon","faBoxes","TextField","variant","value","onChange","e","target","inputProps","textAlign","thousandSeparator","displayType","decimalScale","decimalSeparator","fixedDecimalScale","disabled","IconButton","onClick","faTrashAlt","Cart","useSelector","items","setItems","page","setPage","rowsPerPage","setRowsPerPage","history","useHistory","TableContainer","Paper","elevation","minHeight","Table","stickyHeader","TableHead","TableBody","slice","map","bottom","colSpan","Button","startIcon","faShoppingBag","length","errors","push","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","labelRowsPerPage","ProdServices","selectAllProducts","opt","searchProduct","selectSingleProduct","id","productsAdapter","sortComparer","createdAt","productSlice","selectedProd","clearProducts","entities","setAll","addOne","loadingSelector","products","productsSelector","getSelectors","ProductItem","hover","cursor","faBox","faPlusCircle","ProductsList","selectAll","settingsLoading","connection","isConnected","aria-label","product","Dashboard","infoBlock","background","ContentBlock","Styles","Grid","container","spacing","direction","lg","sm","body","margin","overflow","html","root","ContainerWrap","Toast","handleCloseToast","notifications","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","right","Alert","useStyle","TransactionModal","ModalContent","outline","SuccessPageModal","ReportServices","CreateTransactionReport","docs","logoURL","customer_name","transaction_date","transaction_type","total_amount","doc","Date","date","toLocaleDateString","transact_type","console","log","pageSize","pageMargins","header","currentPage","columns","image","stack","text","alignment","footer","pageCount","content","italics","bold","layout","hLineWidth","i","node","table","hLineHeight","paddingBottom","colIndex","currentPosition","positions","pageInnerHeight","dontBreakRows","headerRows","widths","styles","subheader","tableHeader","fillColor","border","tableItems","defaultStyle","font","columnGap","useLocation","setOpen","transact_payment_type","cash_amount","transact_status","info","setInfo","handleClose","transact_id","resTrans","logo","pdf","JSON","parse","pdfMake","vfs","pdfFonts","docDef","TransactionDocDef","createPdf","getBlob","blob","window","URL","createObjectURL","goBack","price","prevVal","Modal","BackdropComponent","Backdrop","BackdropProps","Fade","in","Typography","customInput","fullWidth","label","InputProps","startAdornment","InputAdornment","faDollarSign","prefix","faUserTie","faMoneyBill","cash","select","transaction_payment_type","payment_type","MenuItem","ButtonGroup","faMoneyBillAlt","change_amount","ConnectionSlice","setConnection","ipcRenderer","require","searchRef","defaultSettings","socket","io","on","connected","flexDirection","Box","alignSelf","inputRef","faSearch","onKeyPress","key","Divider","orientation","flexItem","faSyncAlt","justifySelf","faList","SettingsRemote","htmlColor","div","whileHover","scale","faCog","invoke","Minimize","Close","TransServices","getAllTransaction","createTransaction","findTransaction","getDocDef","responseType","headers","Accept","mode","updateTransaction","deleteTransaction","makeStyles","theme","BtnGroupSingleTrans","fn","report","partial_payments","payment","setPayment","faMoneyBillWaveAlt","faPrint","TransactionSingle","inOpen","transaction","transactions","faIdCard","cart_count","toISOString","split","faCalendar","allowNegative","TransactionItems","onDoubleClick","userSelect","total_price","appBar","TransitionDialog","forwardRef","ref","Slide","TransactionList","search","setSearch","now","selectedDate","setSelectedDate","utils","DateFnsUtils","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","flexBasis","flex","marginRight","onKeyDown","disableToolbar","format","selDate","KeyboardButtonProps","focusRipple","fontWeight","entry","rptLoad","query","URLSearchParams","get","Fab","src","SettingsModal","SettingsContent","ipAdd","setIpAdd","placeholder","Dns","UsbRounded","useRef","focusSearch","current","focus","document","addEventListener","ctrlKey","removeEventListener","dicrection","exact","path","transactionSlice","ReportSlice","SettingsSlice","configureStore","reducer","SettingsReducer","ProductReducers","CartReducer","NotificationReducer","TransactionReducer","ConnectionReducer","ReportReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.13373e3b.chunk.js","sourcesContent":["const useStyles = {\r\n    ProgressWrap : {\r\n        top : 0,\r\n        left : 0,\r\n        display : \"flex\",\r\n        position: \"fixed\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        zIndex : 100,\r\n        backgroundColor : \"rgba(0, 0, 0, 0.9)\",\r\n        height: \"730px\",\r\n        width : \"100%\",\r\n        transition : \"all 300ms linear\",\r\n        borderRadius : '20px'\r\n    },\r\n    HeaderWrap : {\r\n        height : '60px',\r\n        padding : '20px 0px',\r\n        borderRadius : '10px',\r\n        WebkitAppRegion : 'drag'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { CircularProgress, withStyles } from '@material-ui/core'\r\nimport React from 'react'\r\nimport useStyles from './Styles'\r\n\r\nfunction Loader(props) {\r\n\r\n    const { classes } = props;\r\n\r\n    return (\r\n        <div className={classes.ProgressWrap}>\r\n            <CircularProgress size={70} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Loader)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst NotificationSlice = createSlice({\r\n    'name' : 'notifications',\r\n    initialState : {\r\n        open : false,\r\n        message : '',\r\n        severity : ''\r\n    },\r\n    reducers : {\r\n        OpenNotification : (state,{payload})=>{\r\n            state.open = true;\r\n            state.severity = payload.severity;\r\n            state.message = payload.message;\r\n        },\r\n        CloseNotification : (state,{payload})=>{\r\n            state.open = false;\r\n            state.severity = '';\r\n            state.message = '';\r\n        }\r\n    }\r\n});\r\n\r\nexport const { OpenNotification,CloseNotification } = NotificationSlice.actions;\r\n\r\nexport default NotificationSlice.reducer;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst host = \"http://localhost:8082/api\";\r\nconst SettingsServices = axios.create({\r\n    baseURL : host,\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const SetIPAddress = createAsyncThunk(\r\n    'settings/SetIPAddress',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url,data } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"PATCH\",\r\n                data\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return(rejectWithValue(err.response.data));\r\n        }\r\n    }\r\n); \r\n\r\nexport const GetSettings = createAsyncThunk(\r\n    'settings/GetSettings',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"GET\"\r\n            });\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst CartService = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const CreateTransaction = createAsyncThunk(\r\n    'cart/CreateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { values } = args;\r\n                const res = await CartService({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    url : '/transactions',\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(2000);\r\n                return res.data;             \r\n            }             \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createSlice,createEntityAdapter,createDraftSafeSelector } from '@reduxjs/toolkit';\r\nimport { CreateTransaction } from './CartServices';\r\n\r\nconst cartAdapter = createEntityAdapter({\r\n    selectId : prod=>prod._id\r\n});\r\n\r\nconst CartSlice = createSlice({\r\n    name : 'cart',\r\n    initialState : cartAdapter.getInitialState({\r\n        cart : [],\r\n        loading : false,\r\n        error : ''\r\n    }),\r\n    reducers : {\r\n        addItem : (state,{payload})=>{\r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === payload._id);\r\n\r\n            const {\r\n                _id,\r\n                item_name,\r\n                item_price,\r\n                item_qty\r\n            } = payload;\r\n\r\n            const qty = 1;\r\n            const discount = 0;\r\n\r\n            if( index !== -1 ) {\r\n                state.cart[index].qty = parseInt(state.cart[index].qty) + 1;\r\n                state.cart[index].total_per_unit = parseInt(state.cart[index].qty) * item_price;\r\n            }else{\r\n                state.cart.unshift({\r\n                    _id,\r\n                    item_name,\r\n                    item_price,\r\n                    inventory_qty : item_qty,\r\n                    error : false,\r\n                    qty,\r\n                    discount,\r\n                    total_per_unit : qty * item_price\r\n                });\r\n            }\r\n        },\r\n        updateQty : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                qty,\r\n                item_price,\r\n                inventory_qty\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            let val = qty === NaN ? 0 : parseInt(qty);\r\n\r\n            if( index !== -1 ){\r\n                state.cart[index].qty = val;\r\n                state.cart[index].total_per_unit = val * item_price\r\n\r\n                if( val > inventory_qty ){\r\n                    state.cart[index].error = true;\r\n                }else{\r\n                    state.cart[index].error = false;\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        setDiscount : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                discount,\r\n                item_price,\r\n                qty\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            const calcDiscount = discount / 100;\r\n            const total = item_price * qty;\r\n\r\n            if(index !== -1){\r\n                state.cart[index].discount = calcDiscount;\r\n                state.cart[index].total_per_unit = discount !== 0 ? total - (total * calcDiscount) : item_price * qty;\r\n            }\r\n\r\n        },\r\n        removeItem : (state,{payload})=>{\r\n            const index = state.cart.findIndex(prod=>prod._id === payload);\r\n            state.cart.splice(index,1);\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        builder.addCase( CreateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.cart = [];\r\n        })\r\n        .addCase( CreateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nconst selectCart = (state)=>state.cart;\r\nexport const cartItems = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.cart\r\n);\r\nexport const cartLoading = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.loading\r\n);\r\nexport const { addItem,removeItem,updateQty,setDiscount } = CartSlice.actions;\r\nexport default CartSlice.reducer;","import { faBoxes, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { IconButton, TableCell, TableRow, TextField, Tooltip } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { removeItem, updateQty,setDiscount } from '../store/CartSlice'\r\nimport NumberFormat from 'react-number-format';\r\nimport { motion } from 'framer-motion'\r\n\r\nfunction CartItems({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [total,setTotal] = useState(parseInt(item.item_price) * parseInt(item.qty));\r\n\r\n    useEffect(()=>{\r\n        setTotal(parseInt(item.item_price) * parseInt(item.qty));\r\n    },[item.qty]);\r\n\r\n    useEffect(()=>{\r\n        setTotal(item.total_per_unit);\r\n    },[item.total_per_unit]);\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                key={item._id}   \r\n                component={motion.tr}              \r\n                initial={{\r\n                    y : -100,\r\n                    opacity : 0\r\n                }}\r\n                animate={{\r\n                    y : 0,\r\n                    opacity : 1\r\n                }}\r\n            >\r\n                <TableCell\r\n                    style={{fontSize : '10px'}}\r\n                ><FontAwesomeIcon color=\"grey\" icon={faBoxes} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        error={ item.error }\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={item.qty}\r\n                        onChange={(e)=>{\r\n                            let val = e.target.value == '' ? 0 : parseInt(e.target.value);                            \r\n                            dispatch( updateQty({\r\n                                ...item,\r\n                                qty : val\r\n                            }));\r\n                        }}    \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px'\r\n                            }\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <NumberFormat\r\n                        thousandSeparator \r\n                        displayType=\"text\"\r\n                        value={total}\r\n                        style={{ fontSize : '10px' }}\r\n                        decimalScale={2} \r\n                        decimalSeparator={'.'}\r\n                        fixedDecimalScale={true}                    \r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        disabled={item.error}\r\n                        variant=\"outlined\"\r\n                        size=\"small\" \r\n                        value={item.discount * 100}      \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px',\r\n                                width : '50px'\r\n                            }\r\n                        }}    \r\n                        onChange={(e)=>{                               \r\n                            dispatch( setDiscount({\r\n                                ...item,\r\n                                discount : e.target.value === '' ? 0 : parseInt(e.target.value)\r\n                            }));\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        onClick={()=>{\r\n                            dispatch( removeItem(item._id) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faTrashAlt} /> \r\n                    </IconButton>\r\n                </TableCell> \r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartItems\r\n","import { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    Button, \r\n    Paper, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow \r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartItems } from '../store/CartSlice';\r\nimport CartItems from './CartItems';\r\n\r\nfunction Cart(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector(cartItems);\r\n    const { loading } = useSelector(state=>state.cart);\r\n    const [items,setItems] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const history = useHistory();\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setItems(cart);\r\n    },[cart]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <TableContainer \r\n            component={Paper} \r\n            elevation={2} \r\n            style={{\r\n                minHeight : \"600px\",\r\n                position : 'relative'\r\n            }}\r\n        >\r\n            <Table size=\"small\" stickyHeader>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell style={{ textAlign : 'center' }}>QTY</TableCell>\r\n                        <TableCell>Total</TableCell>\r\n                        <TableCell>Discount</TableCell>\r\n                        <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.slice(page*rowsPerPage,page*rowsPerPage + rowsPerPage).map(item=>( \r\n                        <CartItems \r\n                            item={item}\r\n                        />\r\n                    ))}                    \r\n                </TableBody>\r\n                <TableRow style={{\r\n                    position : \"absolute\",\r\n                    bottom : '0',\r\n                    left : '0'\r\n                }}>      \r\n                    <TableCell colSpan={1}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                backgroundColor : \"green\",\r\n                                color : \"#ffffff\",\r\n                                WebkitAppRegion : 'no-drag'\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={faShoppingBag} />}\r\n                            onClick={()=>{\r\n\r\n                                if( items.length == 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Cart is Empty',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n\r\n                                let errors = [];\r\n\r\n                                items.map(item=>{\r\n                                    if( item.error === true ){\r\n                                        errors.push(item.error);\r\n                                    }\r\n                                });\r\n\r\n                                if( errors.length > 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Invalid Quantity',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                };\r\n\r\n                                history.push('/transaction',cart);\r\n                            }}\r\n                        >Checkout</Button>\r\n                    </TableCell>              \r\n                    <TableCell colSpan={4}>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[8, 16, 800]}\r\n                            count={items.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            labelRowsPerPage={false}\r\n                        />\r\n                    </TableCell>          \r\n                </TableRow>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst ProdServices = axios.create({\r\n    timeout : 1000 * 2 * 60\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const selectAllProducts = createAsyncThunk(\r\n    'products/selectAllProducts',\r\n    async( args ,{ rejectWithValue,dispatch })=>{        \r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    ...opt,                \r\n                    method : \"GET\"\r\n                });\r\n                await sleep(2000);\r\n                return res.data;\r\n            }\r\n        }catch(err){    \r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const searchProduct = createAsyncThunk(\r\n    'products/searchProduct',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    ...opt,                \r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;\r\n            }\r\n                    \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const selectSingleProduct = createAsyncThunk(\r\n    'products/selectSingleProduct',\r\n    async(id,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET',\r\n                    url : '/products/' + id\r\n                });\r\n                return res.data;  \r\n            }         \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'products/createTransaction',\r\n    async( values,{rejectWithValue,dispatch} )=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;              \r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'POST',\r\n                    url : '/products',\r\n                    data : values\r\n                });\r\n                return res.data; \r\n            }          \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createDraftSafeSelector, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport { searchProduct, selectAllProducts, selectSingleProduct } from './productServices';\r\n\r\nconst productsAdapter = createEntityAdapter({\r\n    selectId : (prod)=>prod._id,\r\n    sortComparer : (prod)=>prod.createdAt\r\n});\r\n\r\nconst productSlice = createSlice({\r\n    name : 'products',\r\n    initialState : productsAdapter.getInitialState({\r\n        loading : false,\r\n        selectedProd : [],\r\n        error : null,\r\n    }),\r\n    reducers : {\r\n        clearProducts : state=>{\r\n            state.entities = [];\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL PRODUCTS\r\n        builder.addCase(selectAllProducts.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectAllProducts.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(selectAllProducts.rejected,(state,{payload})=>{\r\n            state.loading = false;            \r\n            state.error = payload;\r\n        })\r\n        //FIND PRODUCT/S\r\n        .addCase(searchProduct.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(searchProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(searchProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //FETCH SINGLE PRODUCT\r\n        .addCase(selectSingleProduct.pending,(state,{payload})=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectSingleProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.addOne(state,payload);\r\n        })\r\n        .addCase(selectSingleProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        \r\n        \r\n    }\r\n});\r\n\r\nconst selectState = state=>state.products;\r\n\r\nexport const loadingSelector = createDraftSafeSelector(\r\n    selectState,\r\n    state=>state.loading\r\n);\r\n\r\nexport const { clearProducts } = productSlice.actions;\r\nexport const productsSelector = productsAdapter.getSelectors(state=>state.products);\r\nexport default productSlice.reducer;","import { faBox, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconButton, TableCell, TableRow, Tooltip } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addItem } from '../../cart/store/CartSlice';\r\n\r\nfunction ProductItem({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                hover key={item._id} \r\n                style={{ cursor : \"pointer\" }}\r\n            >\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}><FontAwesomeIcon color=\"grey\" icon={faBox} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}>{item.item_qty}</TableCell>\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}>{item.item_price}</TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        onClick={()=>{\r\n                            dispatch( addItem(item) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faPlusCircle} />\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductItem\r\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { selectAllProducts } from '../store/productServices';\r\nimport { clearProducts, loadingSelector, productsSelector } from '../store/productSlice';\r\nimport ProductItem from './ProductItem';\r\n\r\nfunction ProductsList() {\r\n\r\n    const dispatch = useDispatch();\r\n    const products = useSelector(productsSelector.selectAll);\r\n    const { loading : settingsLoading } = useSelector(state=>state.settings);\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const loading = useSelector(loadingSelector);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n\r\n        dispatch( selectAllProducts({\r\n            opt : {\r\n                url : '/products'\r\n            }\r\n        }) );\r\n\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        dispatch( selectAllProducts({\r\n            opt : {\r\n                url : '/products'\r\n            }\r\n        }) );\r\n    },[connection]);\r\n\r\n    if( loading || settingsLoading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper} style={{ minHeight : \"600px\", position : 'relative' }}>\r\n                <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell>QTY</TableCell>\r\n                            <TableCell>Price</TableCell>\r\n                            <TableCell>Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {products.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(product=>(\r\n                            <ProductItem item={product} />\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableRow\r\n                        style={{\r\n                            position : 'absolute',\r\n                            bottom : '0',\r\n                            left : '0'\r\n                        }}\r\n                    >\r\n                        <TableCell colSpan={4}>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[8, 16, 800]}\r\n                                count={products.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n","const useStyles = {\r\n    Dashboard : {\r\n        height : '90%'\r\n    },\r\n    infoBlock : {\r\n        height : '50px',\r\n        borderRadius : '10px',\r\n        background : '#fff'\r\n    },\r\n    ContentBlock : {\r\n        height : '90%',\r\n        borderRadius : '10px',\r\n        padding : '20px'\r\n    }    \r\n}\r\n\r\nexport default useStyles;","import { Grid, withStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Cart from '../../cart/components/Cart';\r\nimport ProductsList from '../../products/components/ProductsList';\r\nimport Styles from './Styles';\r\n\r\n\r\nfunction Dashboard(props) {\r\n\r\n    const { ContentBlock,Dashboard,infoBlock } = props.classes;\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Grid container className={Dashboard} spacing={2}>\r\n            <Grid direction=\"column\" item container lg={6} sm={6}> \r\n                <Cart />\r\n            </Grid>    \r\n            <Grid \r\n                item lg={6} \r\n                sm={6} \r\n                className={ContentBlock}\r\n            >\r\n                <ProductsList />\r\n            </Grid>  \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Dashboard)\r\n","const useStyles = {\r\n    '@global' : {\r\n        body : {\r\n            height : '100%',\r\n            margin : '0px',\r\n            '& #root' : {\r\n                height : '100%',\r\n            },\r\n            overflow : 'hidden',\r\n            position : 'relative',\r\n            borderRadius : \"15px\"\r\n        },\r\n        html : {\r\n            height : '95%',\r\n            margin : '0px',\r\n            padding : '20px',\r\n        }\r\n    },\r\n\r\n    root : {\r\n        height : '100%',\r\n        background : '#EBEBF7',\r\n        padding : \"20px\",\r\n        borderRadius : '20px',\r\n        position : 'relative'\r\n    },\r\n    \r\n    ContainerWrap : {\r\n        height : 'auto',\r\n        padding : '20px 0px 0px 0px !important',\r\n        position : 'relative'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Toast(props) {\r\n\r\n    const { handleCloseToast } = props;\r\n    const { message,severity,open } = useSelector(state=>state.notifications);\r\n\r\n    return (\r\n        <Snackbar\r\n            open={open} \r\n            autoHideDuration={4000} \r\n            onClose={handleCloseToast}\r\n            anchorOrigin={{vertical : 'bottom',horizontal : 'right'}}\r\n            style={{ bottom : \"50px\", right : '50px', WebkitAppRegion : 'no-drag' }}\r\n        >\r\n            <Alert\r\n                elevation={6} \r\n                variant=\"filled\"\r\n                onClose={handleCloseToast}\r\n                severity={severity}\r\n            >\r\n                {message}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default Toast\r\n","const useStyle = {\r\n    TransactionModal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        WebkitAppRegion : 'no-drag'\r\n    },\r\n    ModalContent : {\r\n        borderRadius : '10px',\r\n        padding : '20px',\r\n        width : '400px',\r\n        height : '400px',\r\n        backgroundColor : \"#ffffff\",\r\n        outline : 'none',\r\n        position : 'relative'\r\n    },\r\n    SuccessPageModal : {\r\n        outline : \"none\",\r\n        height : \"650px\",\r\n        padding : \"30px\",\r\n    }\r\n}\r\n\r\nexport default useStyle;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst ReportServices = axios.create({\r\n    timeout : 62 * 2 * 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x))\r\n}\r\n\r\nexport const CreateTransactionReport = createAsyncThunk(\r\n    'report/CreateTransactionReport',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { url } = args;\r\n                const res = await ReportServices({\r\n                    baseURL : `http://${host}:8081/api/v1/gc-print`,\r\n                    url,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return await res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","export default (docs,logoURL)=>{\r\n\r\n    let customer_name,transaction_date,transaction_type,total_amount;\r\n\r\n    docs.map(doc=>{\r\n        customer_name = doc[5].customer_name;\r\n        transaction_date = new Date(doc[5].date).toLocaleDateString();\r\n        transaction_type = doc[5].transact_type;\r\n        total_amount = doc[5].total_amount;\r\n        console.log(doc[5].total_amount);\r\n    });\r\n\r\n    return {\r\n        pageSize : {\r\n            width : 684,\r\n            height : 396\r\n        },\r\n        pageMargins: [ 40, 50, 40, 60 ],\r\n        header : (currentPage)=>{\r\n            if( currentPage === 1 ){\r\n                return {\r\n                    columns : [\r\n                        {\r\n                            image : `data:image/png;base64,${logoURL}`,\r\n                            width : 40,\r\n                            height : 40,\r\n                            margin : [20,3,0,0]\r\n                        },\r\n                        {\r\n                            stack : [\r\n                                {\r\n                                    text : 'Glorious Cocolumber \\n',\r\n                                    style : 'header'\r\n                                },\r\n                                {\r\n                                    text : 'and Construction Supply',\r\n                                    style : 'subheader'\r\n                                }\r\n                            ],\r\n                            margin : [20,12]\r\n                        },\r\n                        {\r\n                            text : '4024 Old National Highway\\nBrgy. San Antonio Biñan, Laguna\\nCalabarzon, Philippines',                            \r\n                            alignment : 'right',\r\n                            margin : [0,12,20,12],\r\n                            fontSize : 8             \r\n                        }    \r\n                    ],\r\n                    margin : [20,8],\r\n                    width : '*',\r\n                }\r\n            }\r\n        },\r\n        footer : (currentPage,pageCount)=>{\r\n            if( currentPage === pageCount ){\r\n                return {\r\n                    columns : [\r\n                        {\r\n                            text : \"\\n_________________________ \\n \\n Prepared By\",                            \r\n                            alignment : 'left',\r\n                            fontSize : 9\r\n                        }, \r\n                        {\r\n                            text : \"\\n_____________________________________ \\n \\n Signiture over printed name\",                            \r\n                            fontSize : 9,\r\n                        },\r\n                        {\r\n                            text : [\r\n                                { text : `Php. ${total_amount}\\n`,alignment : 'center' },\r\n                                `_________________________ \\n \\n`,\r\n                                { text : 'Total Amount Purchased', alignment : 'center' }\r\n                            ],\r\n                            alignment : 'center',\r\n                            fontSize : 9\r\n                        }\r\n                    ],\r\n                    alignment : \"center\",\r\n                    margin : [40,10,40,0],\r\n                    width : '*'\r\n                }\r\n            }\r\n        },\r\n        content : [\r\n            {                \r\n                stack : [\r\n                    {\r\n                        columns : [\r\n                            {\r\n                                text : [\r\n                                    'Customer Name : ',\r\n                                    {\r\n                                        text : `${customer_name}`,\r\n                                        color : 'maroon',\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 11,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Transaction Date : ',\r\n                                    {\r\n                                        text : `${transaction_date}`,\r\n                                        color : 'maroon',\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 11,\r\n                                alignment : 'right',\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                        ],\r\n                        \r\n                    },\r\n                    {\r\n                        columns : [\r\n                            {\r\n                                text : [\r\n                                    'Payment Type : ',\r\n                                    {\r\n                                        text : `${transaction_type}`,\r\n                                        color : transaction_type == 'full' ? 'green' : 'maroon',\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 11,\r\n                                margin : [0,5,0,10]\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        layout : {\r\n                            hLineWidth : (i,node)=>{\r\n                                return (i === 0 || i === node.table.body.length) ? 1 : 0;\r\n                            },\r\n                            hLineHeight : (i,node)=>{\r\n                                return (i === 1) ? 0 : 1;\r\n                            },\r\n                            paddingBottom: (i, node, colIndex) => {\r\n                                const DEFAULT_PADDING = 2;\r\n                                // Calculate padding for the last element of the table.\r\n                                if (i === node.table.body.length - 1) {\r\n                                    const currentPosition = node.positions[node.positions.length - 1];\r\n                                    const totalPageHeight = currentPosition.pageInnerHeight;\r\n                                    const currentHeight = currentPosition.top;\r\n                                    const paddingBottom = totalPageHeight - currentHeight;\r\n                                    \r\n                                    if( paddingBottom < 0 ){\r\n                                        return DEFAULT_PADDING;\r\n                                    }else{\r\n                                        return paddingBottom;\r\n                                    }                                    \r\n                                } else {\r\n                                    return DEFAULT_PADDING;\r\n                                }\r\n                            }\r\n                        },\r\n                        table : {\r\n                            dontBreakRows : false,\r\n                            headerRows: 1,\r\n                            widths: [ '*','*', 40, 50,'*', '*'],\r\n                            body: [\r\n                                [\r\n                                    {\r\n                                        text : 'Item Name',\r\n                                        style : 'tableHeader'\r\n                                    }, \r\n                                    {\r\n                                        text : 'Supplier',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Quantity',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Price',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Total Qty Price',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Discount',\r\n                                        style : 'tableHeader'\r\n                                    },                                    \r\n                                ],    \r\n                                ...docs                                                      \r\n                            ]\r\n                        }\r\n                    }                    \r\n                ],                \r\n                margin : [0,20,0,0]\r\n            }\r\n        ],\r\n        styles : {\r\n            header : {\r\n                bold : true,\r\n            },\r\n            subheader : {\r\n                fontSize : 9\r\n            },\r\n            tableHeader : {\r\n                fontSize : 10,\r\n                color : 'white',\r\n                fillColor : 'grey',\r\n                alignment : 'center',\r\n                margin : [0,6],\r\n                border : [true,false,true,false]\r\n            },\r\n            tableItems : {\r\n                alignment : 'center',\r\n                margin : [0,6],\r\n                fontSize : 9\r\n            }\r\n        },\r\n        defaultStyle : {\r\n            font : 'Roboto',\r\n            columnGap : 5\r\n        }\r\n    }\r\n}","import { faDollarSign, faMoneyBill, faMoneyBillAlt, faPrint, faSave, faUser, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Fade, Grid, Modal, withStyles, TextField, InputAdornment, ButtonGroup, Button, Typography, MenuItem } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport useStyle from './Styles';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CreateTransaction } from '../store/CartServices';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartLoading } from '../store/CartSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { CreateTransactionReport } from '../../shared/store/ReportServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../docs/TransactionDocDef';\r\n\r\nfunction Transaction(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(cartLoading);\r\n    const {state : cart} = useLocation();\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const {TransactionModal,ModalContent} = props.classes;\r\n    const [total,setTotal] = useState(0);\r\n    const [info,setInfo] = useState({\r\n        customer_name : '',\r\n        transact_payment_type : 'full',\r\n        cash_amount : 0,\r\n        transact_status : true\r\n    });\r\n\r\n    const handleClose = async (id)=>{\r\n        if( id.payload !== undefined ){\r\n            const { transact_id } = id.payload;\r\n            \r\n            const resTrans = await dispatch( CreateTransactionReport({\r\n                url : '/transactions/' + transact_id\r\n            }) );\r\n    \r\n            if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                const { doc,logo } = resTrans.payload;\r\n                let pdf = JSON.parse(doc);      \r\n\r\n                if( pdf.length > 0 ){                    \r\n                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                    const docDef = TransactionDocDef(pdf,logo);\r\n                    const docGenerator = pdfMake.createPdf(docDef);\r\n\r\n                    docGenerator.getBlob(blob=>{\r\n                        let url = window.URL.createObjectURL(blob);                                                \r\n                        history.push('/transaction/success?pdf=' + url +  \"&page=transaction\");\r\n                    });                    \r\n                }else{\r\n                    dispatch( OpenNotification({\r\n                        message : 'No Transaction has been made.',\r\n                        severity : 'error'\r\n                    }) );\r\n                }   \r\n            }else{\r\n                dispatch( OpenNotification({\r\n                    message : 'Transaction Failed, Pls try again.',\r\n                    severity : 'error'\r\n                }) );\r\n            }\r\n        }else{            \r\n            await history.goBack();\r\n        }      \r\n        setOpen(false);      \r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        cart.map(item=>{\r\n            let price = item.total_per_unit;\r\n            setTotal( prevVal => prevVal + price)\r\n        })\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    borderRadius : '20px',\r\n                    height : '730px'\r\n                }\r\n            }}\r\n            className={TransactionModal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={ModalContent}>\r\n                    <Grid container spacing={2}>                        \r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Number of Order :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={cart.length}\r\n                                    customInput={TextField}\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Price :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={total}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    prefix=\"Php \"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Cash Change :&nbsp;                                \r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={info.cash_amount == 0 ? 0.00 : info.cash_amount - total}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                value={info.customer_name}\r\n                                onChange={(e)=>{\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            customer_name : e.target.value\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                label=\"Customer Name\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <NumberFormat \r\n                                error={(info.transact_payment_type == 'full' && info.cash_amount < total ? true : false) || (\r\n                                    info.cash_amount == 0 && info.transact_payment_type == 'partial'\r\n                                )}\r\n                                label=\"Cash Amount\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                customInput={TextField}\r\n                                value={info.cash_amount}\r\n                                decimalScale={2}\r\n                                decimalSeparator=\".\"\r\n                                fixedDecimalScale\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBill} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                                onChange={(e)=>{\r\n                                    let cash = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            cash_amount : cash\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                select\r\n                                label=\"Payment Type\"\r\n                                value={info.transaction_payment_type}\r\n                                onChange={(e)=>{\r\n                                    let payment_type = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            transact_payment_type : payment_type \r\n                                        }\r\n                                    });\r\n                                }}\r\n                            >\r\n                                <MenuItem value=\"full\">Full Payment</MenuItem>\r\n                                <MenuItem value=\"partial\">Partial Payment</MenuItem>\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid \r\n                            item \r\n                            lg={12} \r\n                            sm={12} \r\n                            style={{ \r\n                                position : 'absolute', \r\n                                bottom : '0',\r\n                                left : '0'\r\n                            }}\r\n                        >\r\n                            <ButtonGroup\r\n                                variant=\"outlined\" \r\n                                color=\"primary\" \r\n                                aria-label=\"contained primary button group\"\r\n                            >\r\n                                <Button \r\n                                    fullWidth \r\n                                    startIcon={<FontAwesomeIcon color=\"green\" icon={faMoneyBillAlt} />}\r\n                                    onClick={ async()=>{                                        \r\n                                        \r\n                                        if( info.customer_name == '' ) return;\r\n                                        if( info.cash_amount === 0 ) return; \r\n                                        if(info.transact_payment_type == 'full' && info.cash_amount < total) return;\r\n\r\n                                        const resTrans = await dispatch( CreateTransaction({\r\n                                            values : cart.map(item=>{\r\n                                                return {\r\n                                                    ...item,                                                    \r\n                                                    customer_name : info.customer_name,\r\n                                                    total_amount : total,\r\n                                                    cash_amount : info.cash_amount,\r\n                                                    change_amount : info.cash_amount - total,\r\n                                                    transact_payment_type : info.transact_payment_type === '' ? (info.cash_amount >= total ? 'full' : 'partial') : info.transact_payment_type,\r\n                                                    transact_status : info.transact_payment_type === 'full' ? true : false\r\n                                                }\r\n                                            })\r\n                                        }) );\r\n\r\n                                        if( CreateTransaction.fulfilled.match(resTrans) ){\r\n                                            handleClose(resTrans);\r\n                                        }else if( CreateTransaction.rejected.match(resTrans) ){\r\n                                            dispatch( OpenNotification({\r\n                                                message : 'Error : ' + resTrans.payload,\r\n                                                severity : 'error'\r\n                                            }) );\r\n                                            handleClose();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Process Order\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                >Cancel</Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyle)(Transaction)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst ConnectionSlice = createSlice({\r\n    name : 'connection',\r\n    initialState : {\r\n        isConnected : false\r\n    },\r\n    reducers : {\r\n        setConnection : (state,{payload})=>{\r\n            state.isConnected = payload;\r\n        }\r\n    }\r\n});\r\nexport const { setConnection } = ConnectionSlice.actions;\r\nexport default ConnectionSlice.reducer;","import { Box, Button, Divider, Grid, IconButton, InputAdornment, Paper, TextField, Typography, withStyles } from '@material-ui/core'\r\nimport { Close, Minimize, SettingsRemote } from '@material-ui/icons'\r\nimport React, { useEffect,useState } from 'react'\r\nimport useStyles from './Styles';\r\nimport { motion } from 'framer-motion';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle, faCog, faList, faSearch, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { io } from 'socket.io-client';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setConnection } from '../store/ConnectionSlice';\r\nimport { searchProduct, selectAllProducts } from '../../products/store/productServices';\r\nimport { useHistory } from 'react-router';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\nimport { OpenNotification } from '../store/NotificationSlice';\r\nimport Loader from './Loader';\r\nimport { clearProducts } from '../../products/store/productSlice';\r\n\r\nfunction Header(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const { searchRef } = props;\r\n    const { HeaderWrap } = props.classes;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const history = useHistory();\r\n    \r\n    const closeWindow = ()=>{\r\n        ipcRenderer.invoke('close');\r\n    }\r\n  \r\n    const minimizeWindow = ()=>{\r\n        ipcRenderer.invoke('min');\r\n    }\r\n\r\n    const defaultSettings = async()=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }));\r\n\r\n            if( GetSettings.fulfilled.match(resSettings) ){\r\n                const { settings } = resSettings.payload;                \r\n\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const socket = io(`http://${host}:8081`);\r\n\r\n                socket.on('connect',()=>{\r\n                    dispatch( setConnection(socket.connected) );\r\n                });\r\n\r\n                socket.on('disconnect',()=>{                    \r\n                    dispatch( setConnection(socket.connected) );\r\n                });\r\n            }\r\n\r\n        }catch(err){\r\n            dispatch( OpenNotification({\r\n                message : \"Settings not loaded.\",\r\n                severity : \"error\"\r\n            }) );\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        defaultSettings();\r\n\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid              \r\n            item   \r\n            container\r\n            lg={12} sm={12}\r\n            className={HeaderWrap}\r\n            component={Paper}\r\n            elevation={2}\r\n            style={{\r\n                display : \"flex !important\",\r\n                flexDirection : 'row',\r\n                justifyContent : \"space-between\"\r\n            }}\r\n        >\r\n            <Box\r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"40px\",\r\n                    alignSelf : \"center\",\r\n                    display : 'flex'\r\n                }}\r\n            >\r\n                <TextField \r\n                    size=\"small\"\r\n                    margin=\"none\"                    \r\n                    variant=\"outlined\" \r\n                    label=\"Search Product\"\r\n                    inputRef={searchRef}\r\n                    InputProps={{\r\n                        startAdornment : (\r\n                            <InputAdornment position=\"start\">\r\n                                <FontAwesomeIcon icon={faSearch} />\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                    onKeyPress={(e)=>{\r\n                        if( e.key === 'Enter' ){\r\n                            dispatch( searchProduct({\r\n                                opt : {\r\n                                    url : '/products/search/' + e.target.value\r\n                                }\r\n                            }) );\r\n                        }\r\n                    }}\r\n                />    \r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />                \r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center'\r\n                    }}\r\n                >\r\n                    <IconButton                        \r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( selectAllProducts({\r\n                                opt : {\r\n                                    url : '/products'\r\n                                }\r\n                            }) );\r\n                        }}\r\n                    >                        \r\n                        <FontAwesomeIcon color=\"blue\" icon={faSyncAlt} />    \r\n                    </IconButton>                    \r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<FontAwesomeIcon icon={faList} />}\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            history.push('/translist');\r\n                        }}                        \r\n                    >\r\n                        Transactions\r\n                    </Button>\r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <SettingsRemote fontSize=\"small\" htmlColor={ connection ? \"green\" : \"maroon\" } />\r\n                    <Typography variant=\"caption\">&nbsp;{ connection ? `Connected to Server` : \"Disconnected\" }</Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box  \r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    alignSelf : \"center\"\r\n                }}\r\n            >\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={()=>{\r\n                        history.push('/settings');\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon icon={faCog} />\r\n                </IconButton>\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={minimizeWindow}\r\n                >\r\n                    <Minimize \r\n                        color=\"primary\" \r\n                    />\r\n                </IconButton>\r\n                <IconButton                     \r\n                    size=\"small\"                     \r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={closeWindow}\r\n                >\r\n                    <Close \r\n                        color=\"secondary\" \r\n                    />\r\n                </IconButton>&nbsp;&nbsp;\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Header)\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst TransServices = axios.create({\r\n    timeout : 60 * 2 * 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const getAllTransaction = createAsyncThunk(\r\n    'transactions/getAllTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getSingleTransaction = createAsyncThunk(\r\n    'transactions/getSingleTransaction',\r\n    async(args, {rejectWithValue,dispatch})=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'transactions/createTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt,values } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const findTransaction = createAsyncThunk(\r\n    'transactions/findTransaction',\r\n    async( args, { rejectWithValue,dispatch } )=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getDocDef = createAsyncThunk(\r\n    'transactions/getDocDef',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET',\r\n                    responseType : 'blob',  \r\n                    headers: {\r\n                        Accept: 'application/pdf',\r\n                        'Content-Type': 'application/pdf',\r\n                        mode : 'no-cors'\r\n                    }\r\n                });\r\n                const url = window.URL.createObjectURL(res.data);\r\n                return url;\r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const updateTransaction = createAsyncThunk(\r\n    'transactions/updateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { opt,value } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'PATCH',\r\n                    data : value\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteTransaction = createAsyncThunk(\r\n    'transactions/deleteTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : undefined;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'DELETE'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;\r\n            }\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { faBoxes, faCalendar, faIdCard, faMarker, faMoneyBillWaveAlt, faPrint, faStop, faTrash, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Button, ButtonGroup, Fade, Grid, IconButton, InputAdornment, makeStyles, Modal, TextField } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { useState,useEffect } from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { deleteTransaction, getDocDef, updateTransaction } from '../store/TransactionServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../../cart/docs/TransactionDocDef';\r\nimport {CreateTransactionReport} from '../../shared/store/ReportServices';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    Modal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    ModalContent : {\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        borderRadius : \"5px\",\r\n        background : \"#ffffff\",\r\n        outline : 'none',\r\n        padding : \"25px\"   \r\n    }\r\n}));\r\n\r\nconst BtnGroupSingleTrans = (props)=>{\r\n\r\n    const { data,fn } = props;\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.report);\r\n    const [payment,setPayment] = useState({\r\n        partial_payments : 0\r\n    });\r\n    \r\n    const history = useHistory();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Grid item container lg={12} sm={12} spacing={2}>\r\n            {data.payment_type === 'partial' ? (\r\n                <Grid item lg={6} sm={6}>\r\n                    <NumberFormat\r\n                        customInput={TextField}\r\n                        fixedDecimalScale\r\n                        decimalScale={2}\r\n                        thousandSeparator\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Amount\"\r\n                        margin=\"dense\"                                        \r\n                        variant=\"outlined\"\r\n                        onChange={(e)=>{                        \r\n                            setPayment(payment=>{\r\n                                return {\r\n                                    ...payment,\r\n                                    partial_payments : parseInt(e.target.value)\r\n                                }\r\n                            })\r\n                        }}\r\n                        InputProps={{\r\n                            style : {\r\n                                color : data.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                            }, \r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <Grid \r\n                item \r\n                lg={6} \r\n                sm={6}\r\n                style={{\r\n                    display : \"flex\",\r\n                    justifyContent : \"center\",\r\n                    alignItems : \"center\"\r\n                }}\r\n            >\r\n                <ButtonGroup variant=\"contained\">\r\n                    {data.payment_type === 'partial' ? (\r\n                        <Button    \r\n                            size=\"small\"                                                                                    \r\n                            color=\"secondary\"\r\n                            style={{\r\n                                background : \"green\"\r\n                            }}\r\n                            onClick={async()=>{\r\n                                const res = await dispatch( updateTransaction({\r\n                                    opt : {\r\n                                        url : '/transactions/' + data._id\r\n                                    },\r\n                                    value : payment\r\n                                }) );\r\n\r\n                                if( updateTransaction.fulfilled.match(res) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Updated',\r\n                                        severity : 'success'\r\n                                    }) );\r\n                                }else{\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Update Failed',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                        >\r\n                            Pay\r\n                        </Button>\r\n                    ) : (\r\n                        <Button size=\"small\" disabled >Paid</Button>\r\n                    )}\r\n                    <Button \r\n                        size=\"small\"                                                                                       \r\n                        color=\"primary\"\r\n                        onClick={async ()=>{\r\n                            \r\n                            const resTrans = await dispatch( CreateTransactionReport({\r\n                                url : '/transactions/' + data._id\r\n                            }) );\r\n\r\n                            if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                                const { doc,logo } = resTrans.payload;\r\n                                let pdf = JSON.parse(doc);      \r\n                                \r\n                                console.log(\"PDF : \",pdf);\r\n\r\n                                if( pdf.length > 0 ){\r\n                                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                                    const docDef = TransactionDocDef(pdf,logo);\r\n                                    const docGenerator = pdfMake.createPdf(docDef);\r\n\r\n                                    docGenerator.getBlob(blob=>{\r\n                                        console.log(blob);\r\n                                        const url = window.URL.createObjectURL(blob);                        \r\n                                        history.push('/transaction/success?pdf=' + url);\r\n                                    });\r\n                                }\r\n                            }else{\r\n                                dispatch( OpenNotification({\r\n                                    message : 'Cannot Print Transaction, please try again.',\r\n                                    severity : 'error'\r\n                                }) );\r\n                            }\r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={faPrint} />}\r\n                    >\r\n                        Print\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        color=\"secondary\"\r\n                        onClick={fn}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction TransactionSingle(props) {\r\n\r\n    const { inOpen,onClose,data : transaction } = props;\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const classes = useStyles();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={inOpen}\r\n            onClose={onClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={inOpen}\r\n            >\r\n                <div className={classes.ModalContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Transaction ID\"\r\n                                value={transaction._id}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faIdCard} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Customer\"\r\n                                value={transaction.customer_name}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label=\"Item in cart\"\r\n                                value={transaction.cart_count}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faBoxes} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                fullWidth\r\n                                label=\"Transaction Date\"\r\n                                value={new Date(transaction.transaction_date).toISOString().split('T')[0]}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faCalendar} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={5} sm={5}>\r\n                            <TextField \r\n                                size=\"small\"                                \r\n                                fullWidth\r\n                                label=\"Payment Type\"\r\n                                value={transaction.payment_type}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={7} sm={7}>\r\n                            <NumberFormat\r\n                                customInput={TextField}\r\n                                fixedDecimalScale\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                decimalScale={2}\r\n                                thousandSeparator\r\n                                allowNegative={false}\r\n                                prefix=\"Php \" \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label={transaction.payment_type == 'partial' ? \"Remaining Balance\" : \"Change Amount\"}\r\n                                value={transaction.change_amount}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <BtnGroupSingleTrans fn={onClose} data={transaction} />\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TransactionSingle\r\n","import { TableCell, TableRow } from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport React, { useState } from 'react'\r\nimport TransactionSingle from './TransactionSingle';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TransactionItems({transaction}) {\r\n\r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleOpen = ()=>{\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <TableRow\r\n            key={transaction._id}\r\n            hover\r\n            onDoubleClick={handleOpen}\r\n            style={{ \r\n                background : transaction.payment_type == 'partial' ? '#fafafa' : '',\r\n                cursor : 'pointer',\r\n                userSelect : 'none'\r\n            }}\r\n        >\r\n            <TableCell>{transaction.customer_name}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.cart_count}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.transaction_date.split('T')[0]}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.payment_type}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.cash_amount}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.total_price}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.change_amount}\r\n                    allowNegative={false}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TransactionSingle data={transaction} inOpen={open} onClose={handleClose} />\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default TransactionItems\r\n","import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    AppBar, \r\n    Dialog, \r\n    Grid, \r\n    IconButton, \r\n    InputAdornment, \r\n    makeStyles, \r\n    Paper, \r\n    Slide, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow, \r\n    TextField, \r\n    Toolbar \r\n} from '@material-ui/core';\r\nimport { KeyboardDatePicker,MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { forwardRef, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { findTransaction, getAllTransaction } from '../store/TransactionServices';\r\nimport TransactionItems from './TransactionItems';\r\nimport Loader from '../../shared/components/Loader';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    appBar : {\r\n        position : 'relative',\r\n        background : \"#ffffff\"\r\n    }\r\n}));\r\n\r\nconst TransitionDialog = forwardRef((props,ref)=>{\r\n    return(\r\n        <Slide \r\n            direction=\"up\"\r\n            ref={ref}\r\n            {...props}            \r\n        />\r\n    )\r\n});\r\n\r\nfunction TransactionList(props) {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { entities : transactions } = useSelector(state=>state.transactions);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    \r\n    const [open,setOpen] = useState(false);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const [search,setSearch] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleClose = ()=>{\r\n        setOpen(false);\r\n        history.goBack();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        dispatch( getAllTransaction({\r\n            opt : {\r\n                url : '/transactions'\r\n            }\r\n        }) );\r\n    },[]);\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date(Date.now()).toLocaleDateString());\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(new Date(date));\r\n        let selDate = new Date(date);\r\n        dispatch( findTransaction({\r\n            opt : {\r\n                url : `/search/transactions?date=${selDate}`\r\n            }\r\n        }) )\r\n    };\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Dialog\r\n            fullScreen\r\n            open={open}\r\n            onClose={handleClose}\r\n            TransitionComponent={TransitionDialog}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            style={{\r\n                WebkitAppRegion : \"no-drag\",\r\n                padding : \"20px\",\r\n                height : \"690px\",\r\n                borderRadius : \"10px\"\r\n            }}\r\n        >   \r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar \r\n                    style={{\r\n                        justifyContent : 'space-between'\r\n                    }}\r\n                >\r\n                    <TextField \r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        label=\"Search\"\r\n                        InputProps={{\r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        style={{\r\n                            flexBasis : \"220px\",\r\n                            flex : 2,\r\n                            marginRight : \"10px\"\r\n                        }}\r\n                        onKeyDown={(e)=>{\r\n                            setSearch(e.target.value);\r\n                        }}\r\n                        onKeyPress={(e)=>{\r\n                            if( e.key === 'Enter' ){\r\n                                dispatch( findTransaction({\r\n                                    opt : {\r\n                                        url : `/search/transactions?s=${search}`\r\n                                    }\r\n                                }) )\r\n                            }\r\n                        }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"yyyy-dd-MM\"\r\n                        size=\"small\"\r\n                        margin=\"dense\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Filter Date\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          'aria-label': 'change date',\r\n                        }}\r\n                        style={{\r\n                            alignSelf : \"flex-start\",\r\n                            flex : 1\r\n                        }}\r\n                    />\r\n                    <IconButton focusRipple={false} style={{ margin : \"0px 8px\" }} size=\"small\" onClick={handleClose}>\r\n                        <Close color=\"secondary\" />\r\n                    </IconButton>                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container>\r\n                <Grid item lg={12} sm={12} style={{ padding : \"30px\" }}>\r\n                    <TableContainer\r\n                        component={Paper}\r\n                        elevation={2}\r\n                    >\r\n                        <Table \r\n                            stickyHeader \r\n                            size=\"medium\"\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{ fontWeight : 600 }}>Customer Name</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>In cart</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Transaction date</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Payment Type</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Cash Amount</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Total</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Change</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {transactions.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(entry=>(\r\n                                    <TransactionItems transaction={entry} />\r\n                                ))}\r\n                            </TableBody>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[8, 16, 800]}\r\n                                count={transactions.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                labelRowsPerPage={false}\r\n                            />\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>            \r\n        </Dialog>\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nexport default TransactionList\r\n","import React,{ useEffect,useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { Modal,Backdrop,Fade, Fab } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport Styles from './Styles';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { Close } from '@material-ui/icons';\r\n\r\nexport const useQuery = ()=>{\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction SuccessPage(props) {\r\n\r\n    const history = useHistory();\r\n    const [open,setOpen] = useState(false);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const { loading : rptLoad } = useSelector(state=>state.report);\r\n    const query = useQuery();\r\n    const pdf = query.get('pdf');\r\n    const page = query.get('page');\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        \r\n        if( page === 'transaction' ){\r\n            history.goBack();\r\n        }else{\r\n            history.push('/');\r\n        }\r\n\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading || rptLoad ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={classes.SuccessPageModal}>\r\n                    <Fab\r\n                        size=\"small\"\r\n                        variant=\"round\"\r\n                        onClick={handleClose}\r\n                        style={{\r\n                            position : \"absolute\",\r\n                            left : 15,\r\n                            top : 8,          \r\n                            WebkitAppRegion : \"no-drag\"          \r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </Fab>\r\n                    <iframe                         \r\n                        style={{\r\n                            border : \"none\",    \r\n                            WebkitAppRegion : 'no-drag'                        \r\n                        }} \r\n                        onClick={handleClose}                         \r\n                        src={pdf+'#toolbar=1'} \r\n                        width=\"100%\" \r\n                        height=\"100%\"\r\n                    ></iframe>\r\n                </div>                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(SuccessPage)\r\n","const useStyles = {\r\n    SettingsModal : {\r\n        WebkitAppRegion : \"no-drag\",\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        outline : \"none\",\r\n        borderRadius : \"15px\"\r\n    },\r\n    SettingsContent : {\r\n        backgroundColor : \"#ffffff\",\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        outline : \"none\",\r\n        padding : \"20px\"\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { faCog, faNetworkWired } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal,Backdrop,withStyles, Fade, Grid, TextField, InputAdornment, Button } from '@material-ui/core';\r\nimport { Dns, UsbRounded } from '@material-ui/icons';\r\nimport React,{useEffect,useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { SetIPAddress } from '../store/SettingsServices';\r\nimport Styles from './Styles';\r\n\r\nfunction Settings(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const [open,setOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const { settings } = useSelector(state=>state.settings.entities);\r\n    const [ipAdd,setIpAdd] = useState(settings.address);\r\n    const history = useHistory();\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleRestart = ()=>{\r\n        ipcRenderer.invoke('restart');\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.SettingsModal}\r\n        >\r\n            <Fade\r\n                in={open}                        \r\n            >\r\n                <div className={classes.SettingsContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField\r\n                                value={ipAdd}\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Host Address\"\r\n                                placeholder=\"0.0.0.0\"\r\n                                onChange={(e)=>{\r\n                                    setIpAdd(e.target.value)\r\n                                }}\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <Dns />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Port\"                \r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <UsbRounded />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={6} sm={6}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                size=\"medium\"\r\n                                startIcon={<FontAwesomeIcon icon={faCog} />}\r\n                                onClick={ async(e)=>{\r\n                                    const resSettings = await dispatch(SetIPAddress({\r\n                                        url : \"/settings\",\r\n                                        data : {\r\n                                            address : ipAdd\r\n                                        }\r\n                                    }));\r\n                                    \r\n                                    if( SetIPAddress.fulfilled.match(resSettings) ){\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Settings has been saved.\",\r\n                                            severity : \"success\"\r\n                                        }) );\r\n                                        history.push('/');\r\n                                        handleRestart();\r\n                                    }else{\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Settings not save.\",\r\n                                            severity : \"error\"\r\n                                        }) );\r\n                                    }\r\n\r\n                                }}\r\n                            >Save</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Settings)\r\n","import React,{useEffect,useRef} from 'react';\nimport { BrowserRouter as Router,Switch, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Index';\nimport ProductsList from './products/components/ProductsList';\nimport { Grid, withStyles } from '@material-ui/core';\nimport useStyles from './Styles';\nimport Toast from './shared/components/Toast';\nimport { useDispatch } from 'react-redux';\nimport { CloseNotification } from './shared/store/NotificationSlice';\nimport Transaction from './cart/components/Transaction';\nimport Header from './shared/components/Header';\nimport TransactionList from './transactions/components/TransactionList';\nimport SuccessPage from './cart/components/SuccessPage';\nimport Settings from './settings/components/settings';\n\nfunction App(props) {\n\n  const dispatch = useDispatch();\n  const { root,ContainerWrap } = props.classes;\n  const searchRef = useRef(null);\n\n  const focusSearch = ()=>{\n      searchRef.current.focus();\n  }\n\n  useEffect(()=>{\n\n      document.addEventListener('keydown',(e)=>{\n          if( e.ctrlKey && e.key == 'f' ){\n              focusSearch();\n          }\n      });\n\n      return ()=>{\n        document.removeEventListener('keydown',(e)=>{          \n            if( e.ctrlKey && e.key == 'f' ){\n                focusSearch();\n            }\n        });\n      }      \n\n  },[]);\n\n  const handleClose = ()=>{\n      dispatch( CloseNotification() );\n  }\n\n  return (\n    <Router>\n    <Grid style={{ WebkitAppRegion : 'drag' }} container dicrection=\"column\" className={root} spacing={3}>\n        <Header searchRef={searchRef} />\n        <Grid item lg={12} sm={12} className={ContainerWrap}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Dashboard />\n                </Route>\n                <Route exact path=\"/products\" >\n                    <ProductsList />\n                </Route>\n                <Route exact path=\"/transaction\">\n                    <Transaction />\n                </Route>\n                <Route exact path=\"/transaction/success\">\n                    <SuccessPage />\n                </Route>\n                <Route exact path=\"/translist\">\n                    <TransactionList />\n                </Route>\n                <Route exact path=\"/settings\" >\n                    <Settings />\n                </Route>\n            </Switch>\n            <Toast\n                handleCloseToast={handleClose}\n            />\n        </Grid>\n    </Grid>\n    </Router>\n  );\n}\n\nexport default withStyles(useStyles)(App);","import { createSlice } from '@reduxjs/toolkit';\r\nimport { createTransaction, deleteTransaction, findTransaction, getAllTransaction,getDocDef,updateTransaction } from './TransactionServices';\r\n\r\nconst transactionSlice = createSlice({\r\n    name : 'transactions',\r\n    initialState : {\r\n        entities : [],\r\n        pdf : [],\r\n        loading : false,\r\n        errors : null\r\n    },\r\n    reducers : {},\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL TRANSACTIONS\r\n        builder.addCase(getAllTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getAllTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(getAllTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //FIND TRANSACTION\r\n        .addCase(findTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(findTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(findTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //GET DOCUMENT DEFINITION FOR PRINT\r\n        .addCase(getDocDef.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getDocDef.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.pdf = payload;\r\n        })\r\n        .addCase(getDocDef.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        .addCase(createTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(createTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities[payload._id] = payload;\r\n        })\r\n        .addCase(createTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //UPDATE TRANSACTION\r\n        .addCase(updateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(updateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(updateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //DELETE TRANSACTION\r\n        .addCase(deleteTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(deleteTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(deleteTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default transactionSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { CreateTransactionReport } from './ReportServices';\r\n\r\nconst ReportSlice = createSlice({\r\n    name : 'report',\r\n    initialState : {\r\n        doc : '',\r\n        loading : false,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder =>{\r\n        builder.addCase( CreateTransactionReport.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransactionReport.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.doc = payload;\r\n        })\r\n        .addCase(CreateTransactionReport.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default ReportSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { GetSettings, SetIPAddress } from './SettingsServices';\r\n\r\nconst SettingsSlice = createSlice({\r\n    name : 'settings',\r\n    initialState : {\r\n        entities : [],\r\n        loading : true,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder=>{\r\n        //SET HOST IP ADDRESS\r\n        builder.addCase( SetIPAddress.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(SetIPAddress.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(SetIPAddress.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //GET SETTINGS\r\n        .addCase(GetSettings.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(GetSettings.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(GetSettings.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default SettingsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport ProductReducers from '../../products/store/productSlice';\r\nimport CartReducer from '../../cart/store/CartSlice';\r\nimport NotificationReducer from './NotificationSlice';\r\nimport TransactionReducer from '../../transactions/store/TransactionSlice';\r\nimport ConnectionReducer from './ConnectionSlice';\r\nimport ReportReducer from './ReportSlice';\r\nimport SettingsReducer from '../../settings/store/SettingsSlice';\r\n\r\nexport default configureStore({\r\n    reducer : {\r\n        settings : SettingsReducer,\r\n        products : ProductReducers,\r\n        cart : CartReducer,\r\n        notifications : NotificationReducer,\r\n        transactions : TransactionReducer,\r\n        connection : ConnectionReducer,   \r\n        report : ReportReducer     \r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './shared/store/MainStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}