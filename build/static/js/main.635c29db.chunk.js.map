{"version":3,"sources":["shared/components/Styles.js","shared/components/Loader.js","shared/store/NotificationSlice.js","settings/store/SettingsServices.js","cart/store/CartServices.js","cart/store/CartSlice.js","cart/components/CartItems.js","cart/components/Cart.js","products/store/productServices.js","products/store/productSlice.js","products/components/ProductItem.js","products/components/ProductsList.js","components/Dashboard/Styles.js","components/Dashboard/Index.js","Styles.js","shared/components/Toast.js","cart/components/Styles.js","shared/store/ReportServices.js","cart/docs/TransactionDocDef.js","cart/components/Transaction.js","shared/store/ConnectionSlice.js","shared/components/Header.js","transactions/store/TransactionServices.js","transactions/components/TransactionSingle.js","transactions/components/TransactionItems.js","transactions/components/TransactionList.js","cart/components/SuccessPage.js","settings/components/Styles.js","settings/components/settings.js","transactions/components/Styles.js","transactions/components/TransactionDeleteModal.js","App.js","transactions/store/TransactionSlice.js","shared/store/ReportSlice.js","settings/store/SettingsSlice.js","shared/store/MainStore.js","index.js"],"names":["useStyles","ProgressWrap","top","left","display","position","justifyContent","flexDirection","alignItems","zIndex","backgroundColor","height","width","transition","borderRadius","HeaderWrap","padding","WebkitAppRegion","withStyles","props","classes","useState","progress","className","CircularProgress","size","style","textAlign","color","letterSpacing","NotificationSlice","createSlice","initialState","open","message","severity","reducers","OpenNotification","state","payload","CloseNotification","actions","SettingsServices","axios","create","baseURL","timeout","sleep","x","Promise","resolve","setTimeout","SetIPAddress","createAsyncThunk","args","a","rejectWithValue","url","data","method","res","response","GetSettings","CartService","CreateTransaction","dispatch","resSettings","fulfilled","match","settings","host","undefined","address","values","cartAdapter","createEntityAdapter","selectId","prod","_id","CartSlice","name","getInitialState","cart","loading","error","addItem","index","findIndex","item_name","item_price","item_qty","item_unit","qty","parseInt","total_per_unit","unshift","inventory_qty","discount","updateQty","val","NaN","setDiscount","calcDiscount","total","removeItem","splice","extraReducers","builder","addCase","pending","rejected","selectCart","cartItems","createDraftSafeSelector","cartLoading","CartItems","item","useDispatch","setTotal","useEffect","TableRow","component","motion","tr","initial","y","opacity","animate","TableCell","fontSize","icon","faBoxes","TextField","variant","value","onChange","e","target","inputProps","thousandSeparator","displayType","decimalScale","decimalSeparator","fixedDecimalScale","disabled","IconButton","onClick","faTrashAlt","Cart","useSelector","items","setItems","page","setPage","rowsPerPage","setRowsPerPage","history","useHistory","TableContainer","Paper","elevation","minHeight","Table","stickyHeader","TableHead","TableBody","slice","map","bottom","colSpan","Button","startIcon","faShoppingBag","length","errors","push","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","labelRowsPerPage","ProdServices","selectAllProducts","opt","searchProduct","selectSingleProduct","id","productsAdapter","sortComparer","createdAt","productSlice","selectedProd","clearProducts","entities","setAll","addOne","loadingSelector","products","productsSelector","getSelectors","ProductItem","hover","cursor","faBox","faPlusCircle","ProductsList","selectAll","settingsLoading","connection","isConnected","aria-label","product","Dashboard","infoBlock","background","ContentBlock","Styles","Grid","container","spacing","direction","lg","sm","body","margin","overflow","html","root","ContainerWrap","Toast","handleCloseToast","notifications","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","right","Alert","useStyle","TransactionModal","ModalContent","outline","SuccessPageModal","ReportServices","CreateTransactionReport","formatter","Intl","NumberFormat","currency","pdfmake","fonts","Roboto","normal","bold","italics","bolditalics","Charlie_dotted","DOT_MATRIX","FAKE_RECEIPT","docs","logoURL","customer_name","transaction_date","total_amount","change_amount","cash_amount","discountArr","doc","less","price","Date","date","toLocaleDateString","transact_type","console","log","reduce","b","pageSize","pageMargins","header","currentPage","columns","image","stack","text","alignment","footer","pageCount","table","widths","headerRows","format","font","border","content","layout","hLineWidth","i","node","hLineHeight","paddingBottom","colIndex","currentPosition","positions","pageInnerHeight","styles","subheader","tableHeader","fillColor","tableItems","tableItemsAmount","defaultStyle","columnGap","useLocation","setOpen","transact_payment_type","transact_status","info","setInfo","handleClose","transact_id","resTrans","logo","pdf","JSON","parse","pdfMake","vfs","pdfFonts","docDef","TransactionDocDef","createPdf","getBlob","blob","window","URL","createObjectURL","goBack","prevVal","Modal","BackdropComponent","Backdrop","BackdropProps","Fade","in","Typography","customInput","fullWidth","label","InputProps","startAdornment","InputAdornment","faDollarSign","prefix","faUserTie","faMoneyBill","cash","select","transaction_payment_type","payment_type","MenuItem","ButtonGroup","faMoneyBillAlt","ConnectionSlice","setConnection","ipcRenderer","require","searchRef","defaultSettings","socket","io","on","connected","Box","alignSelf","inputRef","faSearch","onKeyPress","key","Divider","orientation","flexItem","faSyncAlt","justifySelf","faList","SettingsRemote","htmlColor","div","whileHover","scale","faCog","invoke","Minimize","Close","TransServices","getAllTransaction","createTransaction","findTransaction","getDocDef","responseType","headers","Accept","mode","updateTransaction","deleteTransaction","makeStyles","theme","BtnGroupSingleTrans","fn","report","partial_payments","payment","setPayment","faMoneyBillWaveAlt","faPrint","TransactionSingle","inOpen","transaction","transactions","faIdCard","cart_count","toISOString","split","faCalendar","allowNegative","TransactionItems","onDoubleClick","userSelect","total_price","appBar","TransitionDialog","forwardRef","ref","Slide","TransactionList","search","setSearch","now","selectedDate","setSelectedDate","utils","DateFnsUtils","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","flexBasis","flex","marginRight","onKeyDown","disableToolbar","selDate","KeyboardButtonProps","focusRipple","fontWeight","entry","rptLoad","query","URLSearchParams","get","Fab","src","SettingsModal","SettingsContent","ipAdd","setIpAdd","placeholder","Dns","UsbRounded","useParams","faTrash","useRef","focusSearch","current","focus","process","document","addEventListener","ctrlKey","removeEventListener","dicrection","exact","path","transactionSlice","ReportSlice","SettingsSlice","configureStore","reducer","SettingsReducer","ProductReducers","CartReducer","NotificationReducer","TransactionReducer","ConnectionReducer","ReportReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.635c29db.chunk.js","sourcesContent":["const useStyles = {\r\n    ProgressWrap : {\r\n        top : 0,\r\n        left : 0,\r\n        display : \"flex\",\r\n        position: \"fixed\",\r\n        justifyContent : \"center\",\r\n        flexDirection : \"column\",\r\n        alignItems : \"center\",\r\n        zIndex : 100,\r\n        backgroundColor : \"rgba(0, 0, 0, 0.9)\",\r\n        height: \"730px\",\r\n        width : \"100%\",\r\n        transition : \"all 300ms linear\",\r\n        borderRadius : '20px'\r\n    },\r\n    HeaderWrap : {\r\n        height : '60px',\r\n        padding : '20px 0px',\r\n        borderRadius : '10px',\r\n        WebkitAppRegion : 'drag'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { CircularProgress, withStyles } from '@material-ui/core'\r\nimport React,{ useState,useEffect } from 'react'\r\nimport useStyles from './Styles'\r\n\r\nfunction Loader(props) {\r\n\r\n    const { classes } = props;\r\n    const [progress,setProgress] = useState('Loading');\r\n\r\n    return (\r\n        <div className={classes.ProgressWrap}>\r\n            <CircularProgress size={70} />\r\n            <h4\r\n                style={{\r\n                    textAlign : \"center\",\r\n                    color : \"white\",\r\n                    letterSpacing : \"10px\"\r\n                }}\r\n            >{progress}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Loader)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst NotificationSlice = createSlice({\r\n    'name' : 'notifications',\r\n    initialState : {\r\n        open : false,\r\n        message : '',\r\n        severity : ''\r\n    },\r\n    reducers : {\r\n        OpenNotification : (state,{payload})=>{\r\n            state.open = true;\r\n            state.severity = payload.severity;\r\n            state.message = payload.message;\r\n        },\r\n        CloseNotification : (state,{payload})=>{\r\n            state.open = false;\r\n            state.severity = '';\r\n            state.message = '';\r\n        }\r\n    }\r\n});\r\n\r\nexport const { OpenNotification,CloseNotification } = NotificationSlice.actions;\r\n\r\nexport default NotificationSlice.reducer;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst host = \"http://localhost:8082/api\";\r\nconst SettingsServices = axios.create({\r\n    baseURL : host,\r\n    timeout : 1000 * 2 * 62\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const SetIPAddress = createAsyncThunk(\r\n    'settings/SetIPAddress',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url,data } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"PATCH\",\r\n                data\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return(rejectWithValue(err.response.data));\r\n        }\r\n    }\r\n); \r\n\r\nexport const GetSettings = createAsyncThunk(\r\n    'settings/GetSettings',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"GET\"\r\n            });\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst CartService = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const CreateTransaction = createAsyncThunk(\r\n    'cart/CreateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { values } = args;\r\n                const res = await CartService({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    url : '/transactions',\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(2000);\r\n                return res.data;             \r\n            }             \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createSlice,createEntityAdapter,createDraftSafeSelector } from '@reduxjs/toolkit';\r\nimport { CreateTransaction } from './CartServices';\r\n\r\nconst cartAdapter = createEntityAdapter({\r\n    selectId : prod=>prod._id\r\n});\r\n\r\nconst CartSlice = createSlice({\r\n    name : 'cart',\r\n    initialState : cartAdapter.getInitialState({\r\n        cart : [],\r\n        loading : false,\r\n        error : ''\r\n    }),\r\n    reducers : {\r\n        addItem : (state,{payload})=>{\r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === payload._id);\r\n\r\n            const {\r\n                _id,\r\n                item_name,\r\n                item_price,\r\n                item_qty,\r\n                item_unit\r\n            } = payload;\r\n\r\n            const qty = 1;\r\n            const discount = 0;\r\n\r\n            if( index !== -1 ) {\r\n                state.cart[index].qty = parseInt(state.cart[index].qty) + 1;\r\n                state.cart[index].total_per_unit = parseInt(state.cart[index].qty) * item_price;\r\n            }else{\r\n                state.cart.unshift({\r\n                    _id,\r\n                    item_name,\r\n                    item_price,\r\n                    inventory_qty : item_qty,\r\n                    error : false,\r\n                    qty,\r\n                    discount,\r\n                    total_per_unit : qty * item_price,\r\n                    item_unit\r\n                });\r\n            }\r\n        },\r\n        updateQty : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                qty,\r\n                item_price,\r\n                inventory_qty\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            let val = qty === NaN ? 0 : parseInt(qty);\r\n\r\n            if( index !== -1 ){\r\n                state.cart[index].qty = val;\r\n                state.cart[index].total_per_unit = val * item_price\r\n\r\n                if( val > inventory_qty ){\r\n                    state.cart[index].error = true;\r\n                }else{\r\n                    state.cart[index].error = false;\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        setDiscount : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                discount,\r\n                item_price,\r\n                qty\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            const calcDiscount = discount / 100;\r\n            const total = item_price * qty;\r\n\r\n            if(index !== -1){\r\n                state.cart[index].discount = calcDiscount;\r\n                state.cart[index].total_per_unit = discount !== 0 ? total - (total * calcDiscount) : item_price * qty;\r\n            }\r\n\r\n        },\r\n        removeItem : (state,{payload})=>{\r\n            const index = state.cart.findIndex(prod=>prod._id === payload);\r\n            state.cart.splice(index,1);\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        builder.addCase( CreateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.cart = [];\r\n        })\r\n        .addCase( CreateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nconst selectCart = (state)=>state.cart;\r\nexport const cartItems = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.cart\r\n);\r\nexport const cartLoading = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.loading\r\n);\r\nexport const { addItem,removeItem,updateQty,setDiscount } = CartSlice.actions;\r\nexport default CartSlice.reducer;","import { faBoxes, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { IconButton, TableCell, TableRow, TextField, Tooltip } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { removeItem, updateQty,setDiscount } from '../store/CartSlice'\r\nimport NumberFormat from 'react-number-format';\r\nimport { motion } from 'framer-motion'\r\n\r\nfunction CartItems({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [total,setTotal] = useState(parseInt(item.item_price) * parseInt(item.qty));\r\n\r\n    useEffect(()=>{\r\n        setTotal(parseInt(item.item_price) * parseInt(item.qty));\r\n    },[item.qty]);\r\n\r\n    useEffect(()=>{\r\n        setTotal(item.total_per_unit);\r\n    },[item.total_per_unit]);\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                key={item._id}   \r\n                component={motion.tr}              \r\n                initial={{\r\n                    y : -100,\r\n                    opacity : 0\r\n                }}\r\n                animate={{\r\n                    y : 0,\r\n                    opacity : 1\r\n                }}\r\n            >\r\n                <TableCell\r\n                    style={{fontSize : '10px'}}\r\n                ><FontAwesomeIcon color=\"grey\" icon={faBoxes} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        error={ item.error }\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={item.qty}\r\n                        onChange={(e)=>{\r\n                            let val = e.target.value == '' ? 0 : parseInt(e.target.value);                            \r\n                            dispatch( updateQty({\r\n                                ...item,\r\n                                qty : val\r\n                            }));\r\n                        }}    \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px'\r\n                            }\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <NumberFormat\r\n                        thousandSeparator \r\n                        displayType=\"text\"\r\n                        value={total}\r\n                        style={{ fontSize : '10px' }}\r\n                        decimalScale={2} \r\n                        decimalSeparator={'.'}\r\n                        fixedDecimalScale={true}                    \r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        disabled={item.error}\r\n                        variant=\"outlined\"\r\n                        size=\"small\" \r\n                        value={item.discount * 100}      \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px',\r\n                                width : '50px'\r\n                            }\r\n                        }}    \r\n                        onChange={(e)=>{                               \r\n                            dispatch( setDiscount({\r\n                                ...item,\r\n                                discount : e.target.value === '' ? 0 : parseInt(e.target.value)\r\n                            }));\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        onClick={()=>{\r\n                            dispatch( removeItem(item._id) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faTrashAlt} /> \r\n                    </IconButton>\r\n                </TableCell> \r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartItems\r\n","import { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    Button, \r\n    Paper, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow \r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartItems } from '../store/CartSlice';\r\nimport CartItems from './CartItems';\r\n\r\nfunction Cart(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector(cartItems);\r\n    const { loading } = useSelector(state=>state.cart);\r\n    const [items,setItems] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const history = useHistory();\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setItems(cart);\r\n    },[cart]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <TableContainer \r\n            component={Paper} \r\n            elevation={2} \r\n            style={{\r\n                minHeight : \"600px\",\r\n                position : 'relative'\r\n            }}\r\n        >\r\n            <Table size=\"small\" stickyHeader>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell style={{ textAlign : 'center' }}>QTY</TableCell>\r\n                        <TableCell>Total</TableCell>\r\n                        <TableCell>Discount</TableCell>\r\n                        <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.slice(page*rowsPerPage,page*rowsPerPage + rowsPerPage).map(item=>( \r\n                        <CartItems \r\n                            item={item}\r\n                        />\r\n                    ))}                    \r\n                </TableBody>\r\n                <TableRow style={{\r\n                    position : \"absolute\",\r\n                    bottom : '0',\r\n                    left : '0'\r\n                }}>      \r\n                    <TableCell colSpan={1}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                backgroundColor : \"green\",\r\n                                color : \"#ffffff\",\r\n                                WebkitAppRegion : 'no-drag'\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={faShoppingBag} />}\r\n                            onClick={()=>{\r\n\r\n                                if( items.length == 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Cart is Empty',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n\r\n                                let errors = [];\r\n\r\n                                items.map(item=>{\r\n                                    if( item.error === true ){\r\n                                        errors.push(item.error);\r\n                                    }\r\n                                });\r\n\r\n                                if( errors.length > 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Invalid Quantity',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                };\r\n\r\n                                history.push('/transaction',cart);\r\n                            }}\r\n                        >Checkout</Button>\r\n                    </TableCell>              \r\n                    <TableCell colSpan={4}>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[8, 16, 800]}\r\n                            count={items.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            labelRowsPerPage={false}\r\n                        />\r\n                    </TableCell>          \r\n                </TableRow>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst ProdServices = axios.create({\r\n    timeout : 1000 * 2 * 62\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const selectAllProducts = createAsyncThunk(\r\n    'products/selectAllProducts',\r\n    async( args ,{ rejectWithValue,dispatch })=>{        \r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    ...opt,                \r\n                    method : \"GET\"\r\n                });\r\n                await sleep(2000);\r\n                return res.data;\r\n            }\r\n        }catch(err){    \r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const searchProduct = createAsyncThunk(\r\n    'products/searchProduct',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    ...opt,                \r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;\r\n            }\r\n                    \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const selectSingleProduct = createAsyncThunk(\r\n    'products/selectSingleProduct',\r\n    async(id,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET',\r\n                    url : '/products/' + id\r\n                });\r\n                return res.data;  \r\n            }         \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'products/createTransaction',\r\n    async( values,{rejectWithValue,dispatch} )=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";              \r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'POST',\r\n                    url : '/products',\r\n                    data : values\r\n                });\r\n                return res.data; \r\n            }          \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createDraftSafeSelector, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport { searchProduct, selectAllProducts, selectSingleProduct } from './productServices';\r\n\r\nconst productsAdapter = createEntityAdapter({\r\n    selectId : (prod)=>prod._id,\r\n    sortComparer : (prod)=>prod.createdAt\r\n});\r\n\r\nconst productSlice = createSlice({\r\n    name : 'products',\r\n    initialState : productsAdapter.getInitialState({\r\n        loading : false,\r\n        selectedProd : [],\r\n        error : null,\r\n    }),\r\n    reducers : {\r\n        clearProducts : state=>{\r\n            state.entities = [];\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL PRODUCTS\r\n        builder.addCase(selectAllProducts.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectAllProducts.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(selectAllProducts.rejected,(state,{payload})=>{\r\n            state.loading = false;            \r\n            state.error = payload;\r\n        })\r\n        //FIND PRODUCT/S\r\n        .addCase(searchProduct.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(searchProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(searchProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //FETCH SINGLE PRODUCT\r\n        .addCase(selectSingleProduct.pending,(state,{payload})=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectSingleProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.addOne(state,payload);\r\n        })\r\n        .addCase(selectSingleProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        \r\n        \r\n    }\r\n});\r\n\r\nconst selectState = state=>state.products;\r\n\r\nexport const loadingSelector = createDraftSafeSelector(\r\n    selectState,\r\n    state=>state.loading\r\n);\r\n\r\nexport const { clearProducts } = productSlice.actions;\r\nexport const productsSelector = productsAdapter.getSelectors(state=>state.products);\r\nexport default productSlice.reducer;","import { faBox, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconButton, TableCell, TableRow, Tooltip } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addItem } from '../../cart/store/CartSlice';\r\n\r\nfunction ProductItem({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                hover key={item._id} \r\n                style={{ cursor : \"pointer\" }}\r\n            >\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}><FontAwesomeIcon color=\"grey\" icon={faBox} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}>{item.item_qty}</TableCell>\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}>{item.item_price}</TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        onClick={()=>{\r\n                            dispatch( addItem(item) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faPlusCircle} />\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductItem\r\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { selectAllProducts } from '../store/productServices';\r\nimport { clearProducts, loadingSelector, productsSelector } from '../store/productSlice';\r\nimport ProductItem from './ProductItem';\r\n\r\nfunction ProductsList() {\r\n\r\n    const dispatch = useDispatch();\r\n    const products = useSelector(productsSelector.selectAll);\r\n    const { loading : settingsLoading } = useSelector(state=>state.settings);\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const loading = useSelector(loadingSelector);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n\r\n        dispatch( selectAllProducts({\r\n            opt : {\r\n                url : '/products'\r\n            }\r\n        }) );\r\n\r\n    },[]);\r\n\r\n    if( loading || settingsLoading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper} style={{ minHeight : \"600px\", position : 'relative' }}>\r\n                <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell>QTY</TableCell>\r\n                            <TableCell>Price</TableCell>\r\n                            <TableCell>Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {products.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(product=>(\r\n                            <ProductItem item={product} />\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableRow\r\n                        style={{\r\n                            position : 'absolute',\r\n                            bottom : '0',\r\n                            left : '0'\r\n                        }}\r\n                    >\r\n                        <TableCell colSpan={4}>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[8, 16, 800]}\r\n                                count={products.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n","const useStyles = {\r\n    Dashboard : {\r\n        height : '90%'\r\n    },\r\n    infoBlock : {\r\n        height : '50px',\r\n        borderRadius : '10px',\r\n        background : '#fff'\r\n    },\r\n    ContentBlock : {\r\n        height : '90%',\r\n        borderRadius : '10px',\r\n        padding : '20px'\r\n    }    \r\n}\r\n\r\nexport default useStyles;","import { Grid, withStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Cart from '../../cart/components/Cart';\r\nimport ProductsList from '../../products/components/ProductsList';\r\nimport Styles from './Styles';\r\n\r\n\r\nfunction Dashboard(props) {\r\n\r\n    const { ContentBlock,Dashboard,infoBlock } = props.classes;\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Grid container className={Dashboard} spacing={2}>\r\n            <Grid direction=\"column\" item container lg={6} sm={6}> \r\n                <Cart />\r\n            </Grid>    \r\n            <Grid \r\n                item lg={6} \r\n                sm={6} \r\n                className={ContentBlock}\r\n            >\r\n                <ProductsList />\r\n            </Grid>  \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Dashboard)\r\n","const useStyles = {\r\n    '@global' : {\r\n        body : {\r\n            height : '100%',\r\n            margin : '0px',\r\n            '& #root' : {\r\n                height : '100%',\r\n            },\r\n            overflow : 'hidden',\r\n            position : 'relative',\r\n            borderRadius : \"15px\"\r\n        },\r\n        html : {\r\n            height : '95%',\r\n            margin : '0px',\r\n            padding : '20px',\r\n        }\r\n    },\r\n\r\n    root : {\r\n        height : '100%',\r\n        background : '#EBEBF7',\r\n        padding : \"20px\",\r\n        borderRadius : '20px',\r\n        position : 'relative'\r\n    },\r\n    \r\n    ContainerWrap : {\r\n        height : 'auto',\r\n        padding : '20px 0px 0px 0px !important',\r\n        position : 'relative'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Toast(props) {\r\n\r\n    const { handleCloseToast } = props;\r\n    const { message,severity,open } = useSelector(state=>state.notifications);\r\n\r\n    return (\r\n        <Snackbar\r\n            open={open} \r\n            autoHideDuration={4000} \r\n            onClose={handleCloseToast}\r\n            anchorOrigin={{vertical : 'bottom',horizontal : 'right'}}\r\n            style={{ bottom : \"50px\", right : '50px', WebkitAppRegion : 'no-drag' }}\r\n        >\r\n            <Alert\r\n                elevation={6} \r\n                variant=\"filled\"\r\n                onClose={handleCloseToast}\r\n                severity={severity}\r\n            >\r\n                {message}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default Toast\r\n","const useStyle = {\r\n    TransactionModal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        WebkitAppRegion : 'no-drag'\r\n    },\r\n    ModalContent : {\r\n        borderRadius : '10px',\r\n        padding : '20px',\r\n        width : '400px',\r\n        height : '400px',\r\n        backgroundColor : \"#ffffff\",\r\n        outline : 'none',\r\n        position : 'relative'\r\n    },\r\n    SuccessPageModal : {\r\n        outline : \"none\",\r\n        height : \"650px\",\r\n        padding : \"30px\",\r\n    }\r\n}\r\n\r\nexport default useStyle;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst ReportServices = axios.create({\r\n    timeout : 62 * 2 * 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x))\r\n}\r\n\r\nexport const CreateTransactionReport = createAsyncThunk(\r\n    'report/CreateTransactionReport',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { url } = args;\r\n                const res = await ReportServices({\r\n                    baseURL : `http://${host}:8081/api/v1/gc-print`,\r\n                    url,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return await res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import pdfmake from 'pdfmake/build/pdfmake';\r\nconst formatter = new Intl.NumberFormat('en-PH',{\r\n    style : 'currency',\r\n    currency : 'Php'\r\n});\r\n\r\npdfmake.fonts = {\r\n    Roboto: {\r\n        normal: 'Roboto-Regular.ttf',\r\n        bold: 'Roboto-Medium.ttf',\r\n        italics: 'Roboto-Italic.ttf',\r\n        bolditalics: 'Roboto-MediumItalic.ttf'\r\n    },\r\n    Charlie_dotted : {\r\n        normal : 'charlie_dotted.ttf',\r\n        bold : 'charlie_dotted.ttf',\r\n        italics : 'charlie_dotted.ttf',\r\n        bolditalics : 'charlie_dotted.ttf'\r\n    },\r\n    DOT_MATRIX : {\r\n        normal : 'DOTMATRI.TTF',\r\n        bold : 'DOTMATRI.TTF',\r\n        italics : 'DOTMATRI.TTF',\r\n        bolditalics : 'DOTMATRI.TTF'\r\n    },\r\n    FAKE_RECEIPT : {\r\n        normal : 'fake receipt.ttf',\r\n        bold : 'fake receipt.ttf',\r\n        italics : 'fake receipt.ttf',\r\n        bolditalics : 'fake receipt.ttf'\r\n    }\r\n}\r\n\r\nexport default (docs,logoURL)=>{\r\n    let discountArr = [];\r\n    let customer_name,\r\n        transaction_date,\r\n        transaction_type,\r\n        total_amount,\r\n        change_amount,\r\n        cash_amount,\r\n        _id\r\n    ;\r\n\r\n    docs.map(doc=>{\r\n        let less = ( doc[4].discount * doc[4].price);\r\n        customer_name = doc[4].customer_name;\r\n        transaction_date = new Date(doc[4].date).toLocaleDateString();\r\n        transaction_type = doc[4].transact_type;\r\n        total_amount = doc[4].total_amount;\r\n        change_amount = doc[4].change_amount;\r\n        cash_amount = doc[4].cash_amount;\r\n        _id = doc[4]._id;\r\n        console.log(typeof(doc[4].total_amount));\r\n        discountArr.push(less);\r\n    });\r\n\r\n    let discount = discountArr.reduce((a,b)=>a+b,0);    \r\n\r\n    return {\r\n        pageSize : {\r\n            width : 684,\r\n            height : 396\r\n        },\r\n        pageMargins: [ 40, 50, 40, 90 ],\r\n        header : (currentPage)=>{\r\n            if( currentPage === 1 ){\r\n                return {\r\n                    columns : [\r\n                        {\r\n                            image : `data:image/png;base64,${logoURL}`,\r\n                            width : 40,\r\n                            height : 40,\r\n                            margin : [20,3,0,0]\r\n                        },\r\n                        {\r\n                            stack : [\r\n                                {\r\n                                    text : 'GLORIOCITY \\n',\r\n                                    style : 'header'\r\n                                },\r\n                                {\r\n                                    text : 'CONSTRUCTION SUPPLY',\r\n                                    style : 'subheader'\r\n                                }\r\n                            ],\r\n                            margin : [20,12]\r\n                        },\r\n                        {\r\n                            stack : [\r\n                                {\r\n                                    text : '4024 BLOCK 2 LOT 17-18',\r\n                                    color : \"#808080\"\r\n                                },\r\n                                {\r\n                                    text : 'MONDO STRIP JUBILATION',\r\n                                    color : \"#808080\"\r\n                                },\r\n                                {\r\n                                    text : 'BRGY.PLATERO',\r\n                                    color : \"#808080\"\r\n                                }\r\n                            ],\r\n                            alignment : 'right',\r\n                            margin : [20,12],\r\n                            fontSize : 8             \r\n                        }   \r\n                    ],\r\n                    margin : [20,8],\r\n                    width : '*',\r\n                }\r\n            }\r\n        },\r\n        footer : (currentPage,pageCount)=>{\r\n            if( currentPage === pageCount ){\r\n                return {\r\n                    stack : [\r\n                        {\r\n                            table : {\r\n                                widths : ['*',150,150],\r\n                                headerRows : 1,\r\n                                body : [\r\n                                    [\r\n                                        {\r\n                                            text : \"Prepared by : \",\r\n                                            style : {\r\n                                                fontSize : 9\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            text : `Discount : ${formatter.format(discount)}`,\r\n                                            style : {\r\n                                                fontSize : 9,\r\n                                                font : 'Roboto'\r\n                                            }\r\n                                        },\r\n                                        {\r\n                                            text : `Amount to pay : ${formatter.format(total_amount)}`,\r\n                                            style : {\r\n                                                fontSize : 9,\r\n                                                font : 'Roboto'\r\n                                            }\r\n                                        }\r\n                                    ],\r\n                                    [ \r\n                                        { \r\n                                            text : \"\", \r\n                                            border : [false,false,false,false],\r\n                                        },\r\n                                        {\r\n                                            text : [\r\n                                                `Cash : `,\r\n                                                { text : `${cash_amount}`,style : { alignment : \"center\", font : \"Roboto\" } }\r\n                                            ]\r\n                                        }, \r\n                                        { \r\n                                            text : `Change : ${change_amount}`,\r\n                                            style : {\r\n                                                font : 'Roboto'\r\n                                            }\r\n                                        } \r\n                                    ]\r\n                                ]                        \r\n                            }\r\n                        },\r\n                        {\r\n                            text : \"**** Nothing Follows ****\",                            \r\n                            style : {\r\n                                fontSize : 7,        \r\n                                color : \"#808080\"                     \r\n                            },\r\n                            alignment : \"center\",\r\n                            margin : [0,7,0,0]\r\n                        },\r\n                        {\r\n                            text : \"Received goods in order and prestine condition\\n\\nby:______________________________________\",                            \r\n                            style : {\r\n                                fontSize : 7,                         \r\n                            },\r\n                            alignment : \"right\",\r\n                            margin : [0,7,0,0]\r\n                        }\r\n                    ],                    \r\n                    margin : [40,0]                 \r\n                }\r\n            }\r\n        },\r\n        content : [\r\n            {\r\n                columns : [\r\n                    { \r\n                        text : \"ORDER SLIP\", \r\n                        style : \r\n                        { \r\n                            fontSize : 12,\r\n                            color : \"#808080\" \r\n                        } \r\n                    }\r\n                ],\r\n                alignment : \"center\"\r\n            },\r\n            {                \r\n                stack : [\r\n                    {\r\n                        columns : [\r\n                            {\r\n                                text : [\r\n                                    'Customer Name : ',\r\n                                    {\r\n                                        text : `${customer_name}`,\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 9,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Transaction Date : ',\r\n                                    {\r\n                                        text : `${transaction_date}`,\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 9,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                        ],\r\n                        \r\n                    },\r\n                    {\r\n                        columns : [                            \r\n                            {\r\n                                text : [\r\n                                    'Total Amount : ',\r\n                                    {\r\n                                        text : `Php ${total_amount}`,\r\n                                        font : \"Roboto\"\r\n                                    },                                \r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 9,\r\n                                margin : [0,5,0,10]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Receipt# : ',\r\n                                    {\r\n                                        text : `${_id}`,\r\n                                        fontSize : 7\r\n                                    }\r\n                                ],                         \r\n                                bold : true,\r\n                                fontSize : 9,\r\n                                margin : [0,5,0,10]\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        layout : {\r\n                            hLineWidth : (i,node)=>{\r\n                                return (i === 0 || i === node.table.body.length) ? 1 : 0;\r\n                            },\r\n                            hLineHeight : (i,node)=>{\r\n                                return (i === 1) ? 0 : 1;\r\n                            },\r\n                            paddingBottom: (i, node, colIndex) => {\r\n                                const DEFAULT_PADDING = 2;\r\n                                // Calculate padding for the last element of the table.\r\n                                if (i === node.table.body.length - 1) {\r\n                                    const currentPosition = node.positions[node.positions.length - 1];\r\n                                    const totalPageHeight = currentPosition.pageInnerHeight;\r\n                                    const currentHeight = currentPosition.top;\r\n                                    const paddingBottom = totalPageHeight - currentHeight;\r\n                                    \r\n                                    if( paddingBottom < 0 ){\r\n                                        return DEFAULT_PADDING;\r\n                                    }else{\r\n                                        return paddingBottom;\r\n                                    }                                    \r\n                                } else {\r\n                                    return DEFAULT_PADDING;\r\n                                }\r\n                            }\r\n                        },\r\n                        table : {\r\n                            headerRows: 1,\r\n                            widths: [ 40,40,'*', 80,80],\r\n                            body: [\r\n                                [                                     \r\n                                    {\r\n                                        text : 'QTY',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'UNIT',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Item Name',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Unit Price',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Amount',\r\n                                        style : 'tableHeader'\r\n                                    },                                   \r\n                                ],    \r\n                                ...docs                                                      \r\n                            ]\r\n                        }\r\n                    }                    \r\n                ],                \r\n                margin : [0,10,0,0]\r\n            }\r\n        ],\r\n        styles : {\r\n            header : {\r\n                bold : true,\r\n                color : \"#808080\"\r\n            },\r\n            subheader : {\r\n                fontSize : 9\r\n            },\r\n            tableHeader : {\r\n                fontSize : 9,\r\n                color : 'white',\r\n                fillColor : 'grey',\r\n                alignment : 'center',\r\n                margin : [0,6],\r\n                border : [true,false,true,false]\r\n            },\r\n            tableItems : {\r\n                alignment : 'center',\r\n                margin : [0,5],\r\n                fontSize : 8,\r\n                color : \"#808080\"\r\n            },\r\n            tableItemsAmount : {\r\n                alignment : 'center',\r\n                margin : [0,6],\r\n                fontSize : 9,\r\n                font : \"Roboto\",\r\n                color : \"#808080\"\r\n            }\r\n        },\r\n        defaultStyle : {\r\n            font : 'FAKE_RECEIPT',\r\n            columnGap : 5,\r\n            color : \"#808080\",\r\n            fontSize : 9\r\n        }\r\n    }\r\n}","import { faDollarSign, faMoneyBill, faMoneyBillAlt, faPrint, faSave, faUser, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Fade, Grid, Modal, withStyles, TextField, InputAdornment, ButtonGroup, Button, Typography, MenuItem } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport useStyle from './Styles';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CreateTransaction } from '../store/CartServices';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartLoading } from '../store/CartSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { CreateTransactionReport } from '../../shared/store/ReportServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../docs/TransactionDocDef';\r\n\r\nfunction Transaction(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(cartLoading);\r\n    const {state : cart} = useLocation();\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const {TransactionModal,ModalContent} = props.classes;\r\n    const [total,setTotal] = useState(0);\r\n    const [info,setInfo] = useState({\r\n        customer_name : '',\r\n        transact_payment_type : 'full',\r\n        cash_amount : 0,\r\n        transact_status : true\r\n    });\r\n\r\n    const handleClose = async (id)=>{\r\n        \r\n        if( id.payload !== undefined ){\r\n            const { transact_id } = id.payload;\r\n            \r\n            const resTrans = await dispatch( CreateTransactionReport({\r\n                url : '/transactions/' + transact_id\r\n            }) );\r\n    \r\n            if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                const { doc,logo } = resTrans.payload;\r\n                let pdf = JSON.parse(doc);      \r\n\r\n                if( pdf.length > 0 ){                    \r\n                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                    const docDef = TransactionDocDef(pdf,logo);\r\n                    const docGenerator = pdfMake.createPdf(docDef);\r\n\r\n                    docGenerator.getBlob(blob=>{\r\n                        let url = window.URL.createObjectURL(blob);                                                \r\n                        history.push('/transaction/success?pdf=' + url);\r\n                    });                    \r\n                }else{\r\n                    dispatch( OpenNotification({\r\n                        message : 'No Transaction has been made.',\r\n                        severity : 'error'\r\n                    }) );\r\n                }   \r\n            }else{\r\n                dispatch( OpenNotification({\r\n                    message : 'Transaction Failed, Pls try again.',\r\n                    severity : 'error'\r\n                }) );\r\n            }\r\n        }else{            \r\n            await history.goBack();\r\n        }      \r\n        setOpen(false);      \r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        cart.map(item=>{\r\n            let price = item.total_per_unit;\r\n            setTotal( prevVal => prevVal + price)\r\n        })\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    borderRadius : '20px',\r\n                    height : '730px'\r\n                }\r\n            }}\r\n            className={TransactionModal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={ModalContent}>\r\n                    <Grid container spacing={2}>                        \r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Number of Order :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={cart.length}\r\n                                    customInput={TextField}\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Price :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={total}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    prefix=\"Php \"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Cash Change :&nbsp;                                \r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={info.cash_amount == 0 ? 0.00 : info.cash_amount - total}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                value={info.customer_name}\r\n                                onChange={(e)=>{\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            customer_name : e.target.value\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                label=\"Customer Name\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <NumberFormat \r\n                                error={(info.transact_payment_type == 'full' && info.cash_amount < total ? true : false) || (\r\n                                    info.cash_amount == 0 && info.transact_payment_type == 'partial'\r\n                                )}\r\n                                label=\"Cash Amount\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                customInput={TextField}\r\n                                value={info.cash_amount}\r\n                                decimalScale={2}\r\n                                decimalSeparator=\".\"\r\n                                fixedDecimalScale\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBill} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                                onChange={(e)=>{\r\n                                    let cash = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            cash_amount : cash\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                select\r\n                                label=\"Payment Type\"\r\n                                value={info.transaction_payment_type}\r\n                                onChange={(e)=>{\r\n                                    let payment_type = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            transact_payment_type : payment_type \r\n                                        }\r\n                                    });\r\n                                }}\r\n                            >\r\n                                <MenuItem value=\"full\">Full Payment</MenuItem>\r\n                                <MenuItem value=\"partial\">Partial Payment</MenuItem>\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid \r\n                            item \r\n                            lg={12} \r\n                            sm={12} \r\n                            style={{ \r\n                                position : 'absolute', \r\n                                bottom : '0',\r\n                                left : '0'\r\n                            }}\r\n                        >\r\n                            <ButtonGroup\r\n                                variant=\"outlined\" \r\n                                color=\"primary\" \r\n                                aria-label=\"contained primary button group\"\r\n                            >\r\n                                <Button \r\n                                    fullWidth \r\n                                    startIcon={<FontAwesomeIcon color=\"green\" icon={faMoneyBillAlt} />}\r\n                                    onClick={ async()=>{                                        \r\n                                        \r\n                                        if( info.customer_name == '' ) return;\r\n                                        if( info.cash_amount === 0 ) return; \r\n                                        if(info.transact_payment_type == 'full' && info.cash_amount < total) return;\r\n\r\n                                        const resTrans = await dispatch( CreateTransaction({\r\n                                            values : cart.map(item=>{\r\n                                                return {\r\n                                                    ...item,                                                    \r\n                                                    customer_name : info.customer_name,\r\n                                                    total_amount : total,\r\n                                                    cash_amount : info.cash_amount,\r\n                                                    change_amount : info.cash_amount - total,\r\n                                                    transact_payment_type : info.transact_payment_type === '' ? (info.cash_amount >= total ? 'full' : 'partial') : info.transact_payment_type,\r\n                                                    transact_status : info.transact_payment_type === 'full' ? true : false\r\n                                                }\r\n                                            })\r\n                                        }) );\r\n\r\n                                        if( CreateTransaction.fulfilled.match(resTrans) ){\r\n                                            handleClose(resTrans);\r\n                                        }else if( CreateTransaction.rejected.match(resTrans) ){\r\n                                            dispatch( OpenNotification({\r\n                                                message : 'Error : ' + resTrans.payload,\r\n                                                severity : 'error'\r\n                                            }) );\r\n                                            handleClose();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Process Order\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                >Cancel</Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyle)(Transaction)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst ConnectionSlice = createSlice({\r\n    name : 'connection',\r\n    initialState : {\r\n        isConnected : false\r\n    },\r\n    reducers : {\r\n        setConnection : (state,{payload})=>{\r\n            state.isConnected = payload;\r\n        }\r\n    }\r\n});\r\nexport const { setConnection } = ConnectionSlice.actions;\r\nexport default ConnectionSlice.reducer;","import { Box, Button, Divider, Grid, IconButton, InputAdornment, Paper, TextField, Typography, withStyles } from '@material-ui/core'\r\nimport { Close, Minimize, SettingsRemote } from '@material-ui/icons'\r\nimport React, { useEffect,useState } from 'react'\r\nimport useStyles from './Styles';\r\nimport { motion } from 'framer-motion';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle, faCog, faList, faSearch, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { io } from 'socket.io-client';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setConnection } from '../store/ConnectionSlice';\r\nimport { searchProduct, selectAllProducts } from '../../products/store/productServices';\r\nimport { useHistory } from 'react-router';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\nimport { OpenNotification } from '../store/NotificationSlice';\r\nimport Loader from './Loader';\r\nimport { clearProducts } from '../../products/store/productSlice';\r\n\r\nfunction Header(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const { searchRef } = props;\r\n    const { HeaderWrap } = props.classes;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const history = useHistory();\r\n    \r\n    const closeWindow = ()=>{\r\n        ipcRenderer.invoke('close');\r\n    }\r\n  \r\n    const minimizeWindow = ()=>{\r\n        ipcRenderer.invoke('min');\r\n    }\r\n\r\n    const defaultSettings = async()=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }));\r\n\r\n            if( GetSettings.fulfilled.match(resSettings) ){\r\n                const { settings } = resSettings.payload;                \r\n\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const socket = io(`http://${host}:8081`);\r\n\r\n                socket.on('connect',()=>{\r\n                    dispatch( setConnection(socket.connected) );\r\n                });\r\n\r\n                socket.on('disconnect',()=>{                    \r\n                    dispatch( setConnection(socket.connected) );\r\n                });\r\n            }\r\n\r\n        }catch(err){\r\n            dispatch( OpenNotification({\r\n                message : \"Settings not loaded.\",\r\n                severity : \"error\"\r\n            }) );\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        defaultSettings();\r\n\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid              \r\n            item   \r\n            container\r\n            lg={12} sm={12}\r\n            className={HeaderWrap}\r\n            component={Paper}\r\n            elevation={2}\r\n            style={{\r\n                display : \"flex !important\",\r\n                flexDirection : 'row',\r\n                justifyContent : \"space-between\"\r\n            }}\r\n        >\r\n            <Box\r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"40px\",\r\n                    alignSelf : \"center\",\r\n                    display : 'flex'\r\n                }}\r\n            >\r\n                <TextField \r\n                    size=\"small\"\r\n                    margin=\"none\"                    \r\n                    variant=\"outlined\" \r\n                    label=\"Search Product\"\r\n                    inputRef={searchRef}\r\n                    InputProps={{\r\n                        startAdornment : (\r\n                            <InputAdornment position=\"start\">\r\n                                <FontAwesomeIcon icon={faSearch} />\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                    onKeyPress={(e)=>{\r\n                        if( e.key === 'Enter' ){\r\n                            dispatch( searchProduct({\r\n                                opt : {\r\n                                    url : '/products/search/' + e.target.value\r\n                                }\r\n                            }) );\r\n                        }\r\n                    }}\r\n                />    \r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />                \r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center'\r\n                    }}\r\n                >\r\n                    <IconButton                        \r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( selectAllProducts({\r\n                                opt : {\r\n                                    url : '/products'\r\n                                }\r\n                            }) );\r\n                        }}\r\n                    >                        \r\n                        <FontAwesomeIcon color=\"blue\" icon={faSyncAlt} />    \r\n                    </IconButton>                    \r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<FontAwesomeIcon icon={faList} />}\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            history.push('/translist');\r\n                        }}                        \r\n                    >\r\n                        Transactions\r\n                    </Button>\r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <SettingsRemote fontSize=\"small\" htmlColor={ connection ? \"green\" : \"maroon\" } />\r\n                    <Typography variant=\"caption\">&nbsp;{ connection ? `Connected to Server` : \"Disconnected\" }</Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box  \r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    alignSelf : \"center\"\r\n                }}\r\n            >\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={()=>{\r\n                        history.push('/settings');\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon icon={faCog} />\r\n                </IconButton>\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={minimizeWindow}\r\n                >\r\n                    <Minimize \r\n                        color=\"primary\" \r\n                    />\r\n                </IconButton>\r\n                <IconButton                     \r\n                    size=\"small\"                     \r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={closeWindow}\r\n                >\r\n                    <Close \r\n                        color=\"secondary\" \r\n                    />\r\n                </IconButton>&nbsp;&nbsp;\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Header)\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst TransServices = axios.create({\r\n    timeout : 62 * 2 * 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const getAllTransaction = createAsyncThunk(\r\n    'transactions/getAllTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getSingleTransaction = createAsyncThunk(\r\n    'transactions/getSingleTransaction',\r\n    async(args, {rejectWithValue,dispatch})=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'transactions/createTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt,values } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const findTransaction = createAsyncThunk(\r\n    'transactions/findTransaction',\r\n    async( args, { rejectWithValue,dispatch } )=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getDocDef = createAsyncThunk(\r\n    'transactions/getDocDef',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'GET',\r\n                    responseType : 'blob',  \r\n                    headers: {\r\n                        Accept: 'application/pdf',\r\n                        'Content-Type': 'application/pdf',\r\n                        mode : 'no-cors'\r\n                    }\r\n                });\r\n                const url = window.URL.createObjectURL(res.data);\r\n                return url;\r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const updateTransaction = createAsyncThunk(\r\n    'transactions/updateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { opt,value } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'PATCH',\r\n                    data : value\r\n                });\r\n                await sleep(2000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteTransaction = createAsyncThunk(\r\n    'transactions/deleteTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:8081/api/v1`,\r\n                    method : 'DELETE'\r\n                });\r\n                await sleep(2000);\r\n                return res.data;\r\n            }\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { faBoxes, faCalendar, faIdCard, faMarker, faMoneyBillWaveAlt, faPrint, faStop, faTrash, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Button, ButtonGroup, Fade, Grid, IconButton, InputAdornment, makeStyles, Modal, TextField } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { updateTransaction } from '../store/TransactionServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../../cart/docs/TransactionDocDef';\r\nimport {CreateTransactionReport} from '../../shared/store/ReportServices';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    Modal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    ModalContent : {\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        borderRadius : \"5px\",\r\n        background : \"#ffffff\",\r\n        outline : 'none',\r\n        padding : \"25px\"   \r\n    }\r\n}));\r\n\r\nconst BtnGroupSingleTrans = (props)=>{\r\n\r\n    const { data,fn } = props;\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.report);\r\n    const [payment,setPayment] = useState({\r\n        partial_payments : 0\r\n    });\r\n    \r\n    const history = useHistory();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Grid item container lg={12} sm={12} spacing={2}>\r\n            {data.payment_type === 'partial' ? (\r\n                <Grid item lg={4} sm={4}>\r\n                    <NumberFormat\r\n                        customInput={TextField}\r\n                        fixedDecimalScale\r\n                        decimalScale={2}\r\n                        thousandSeparator\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Amount\"\r\n                        margin=\"dense\"                                        \r\n                        variant=\"outlined\"\r\n                        onChange={(e)=>{                        \r\n                            setPayment(payment=>{\r\n                                return {\r\n                                    ...payment,\r\n                                    partial_payments : parseInt(e.target.value)\r\n                                }\r\n                            })\r\n                        }}\r\n                        InputProps={{\r\n                            style : {\r\n                                color : data.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                            }, \r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <Grid \r\n                item \r\n                lg={8} \r\n                sm={8}\r\n                style={{\r\n                    display : \"flex\",\r\n                    justifyContent : \"center\",\r\n                    alignItems : \"center\"\r\n                }}\r\n            >\r\n                <ButtonGroup variant=\"contained\">\r\n                    {data.payment_type === 'partial' ? (\r\n                        <Button    \r\n                            size=\"small\"                                                                                    \r\n                            color=\"secondary\"\r\n                            style={{\r\n                                background : \"green\"\r\n                            }}\r\n                            onClick={async()=>{\r\n                                const res = await dispatch( updateTransaction({\r\n                                    opt : {\r\n                                        url : '/transactions/' + data._id\r\n                                    },\r\n                                    value : payment\r\n                                }) );\r\n\r\n                                if( updateTransaction.fulfilled.match(res) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Updated',\r\n                                        severity : 'success'\r\n                                    }) );\r\n                                }else{\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Update Failed',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                        >\r\n                            Pay\r\n                        </Button>\r\n                    ) : (\r\n                        <Button size=\"small\" disabled >Paid</Button>\r\n                    )}\r\n                    <Button \r\n                        size=\"small\"                                                                                       \r\n                        color=\"primary\"\r\n                        onClick={async ()=>{\r\n                            \r\n                            const resTrans = await dispatch( CreateTransactionReport({\r\n                                url : '/transactions/' + data._id\r\n                            }) );\r\n\r\n                            if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                                const { doc,logo } = resTrans.payload;\r\n                                let pdf = JSON.parse(doc);                                                              \r\n\r\n                                if( pdf.length > 0 ){\r\n                                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                                    const docDef = TransactionDocDef(pdf,logo);\r\n                                    const docGenerator = pdfMake.createPdf(docDef);\r\n\r\n                                    docGenerator.getBlob(blob=>{\r\n                                        console.log(blob);\r\n                                        const url = window.URL.createObjectURL(blob);                        \r\n                                        history.push('/transaction/success?pdf=' + url + \"&page=transaction\");\r\n                                    });\r\n                                }\r\n                            }else{\r\n                                dispatch( OpenNotification({\r\n                                    message : 'Cannot Print Transaction, please try again.',\r\n                                    severity : 'error'\r\n                                }) );\r\n                            }\r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={faPrint} />}\r\n                    >\r\n                        Print\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        color=\"secondary\"\r\n                        onClick={()=>{\r\n                            history.push(\"/transaction/delete/\" + data._id);\r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        style={{\r\n                            background : \"orange\"\r\n                        }}\r\n                        onClick={fn}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction TransactionSingle(props) {\r\n\r\n    const { inOpen,onClose,data : transaction } = props;\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const classes = useStyles();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={inOpen}\r\n            onClose={onClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={inOpen}\r\n            >\r\n                <div className={classes.ModalContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Receipt No\"\r\n                                value={transaction._id}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faIdCard} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Customer\"\r\n                                value={transaction.customer_name}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label=\"Item in cart\"\r\n                                value={transaction.cart_count}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faBoxes} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                fullWidth\r\n                                label=\"Transaction Date\"\r\n                                value={new Date(transaction.transaction_date).toISOString().split('T')[0]}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faCalendar} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={5} sm={5}>\r\n                            <TextField \r\n                                size=\"small\"                                \r\n                                fullWidth\r\n                                label=\"Payment Type\"\r\n                                value={transaction.payment_type}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={7} sm={7}>\r\n                            <NumberFormat\r\n                                customInput={TextField}\r\n                                fixedDecimalScale\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                decimalScale={2}\r\n                                thousandSeparator\r\n                                allowNegative={false}\r\n                                prefix=\"Php \" \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label={transaction.payment_type == 'partial' ? \"Remaining Balance\" : \"Change Amount\"}\r\n                                value={transaction.change_amount}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <BtnGroupSingleTrans fn={onClose} data={transaction} />\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TransactionSingle\r\n","import { TableCell, TableRow } from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport React, { useState } from 'react'\r\nimport TransactionSingle from './TransactionSingle';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TransactionItems({transaction}) {\r\n\r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleOpen = ()=>{\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <TableRow\r\n            key={transaction._id}\r\n            hover\r\n            onDoubleClick={handleOpen}\r\n            style={{ \r\n                background : transaction.payment_type == 'partial' ? '#fafafa' : '',\r\n                cursor : 'pointer',\r\n                userSelect : 'none'\r\n            }}\r\n        >\r\n            <TableCell>{transaction.customer_name}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.cart_count}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.transaction_date.split('T')[0]}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.payment_type}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.cash_amount}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.total_price}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.change_amount}\r\n                    allowNegative={false}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TransactionSingle data={transaction} inOpen={open} onClose={handleClose} />\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default TransactionItems\r\n","import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    AppBar, \r\n    Dialog, \r\n    Grid, \r\n    IconButton, \r\n    InputAdornment, \r\n    makeStyles, \r\n    Paper, \r\n    Slide, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow, \r\n    TextField, \r\n    Toolbar \r\n} from '@material-ui/core';\r\nimport { KeyboardDatePicker,MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { forwardRef, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { findTransaction, getAllTransaction } from '../store/TransactionServices';\r\nimport TransactionItems from './TransactionItems';\r\nimport Loader from '../../shared/components/Loader';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    appBar : {\r\n        position : 'relative',\r\n        background : \"#ffffff\"\r\n    }\r\n}));\r\n\r\nconst TransitionDialog = forwardRef((props,ref)=>{\r\n    return(\r\n        <Slide \r\n            direction=\"up\"\r\n            ref={ref}\r\n            {...props}            \r\n        />\r\n    )\r\n});\r\n\r\nfunction TransactionList(props) {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { entities : transactions } = useSelector(state=>state.transactions);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    \r\n    const [open,setOpen] = useState(false);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const [search,setSearch] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleClose = ()=>{\r\n        setOpen(false);\r\n        history.goBack();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        dispatch( getAllTransaction({\r\n            opt : {\r\n                url : '/transactions'\r\n            }\r\n        }) );\r\n    },[]);\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date(Date.now()).toLocaleDateString());\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(new Date(date));\r\n        let selDate = new Date(date);\r\n        dispatch( findTransaction({\r\n            opt : {\r\n                url : `/search/transactions?date=${selDate}`\r\n            }\r\n        }) )\r\n    };\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Dialog\r\n            fullScreen\r\n            open={open}\r\n            onClose={handleClose}\r\n            TransitionComponent={TransitionDialog}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            style={{\r\n                WebkitAppRegion : \"no-drag\",\r\n                padding : \"20px\",\r\n                height : \"690px\",\r\n                borderRadius : \"10px\"\r\n            }}\r\n        >   \r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar \r\n                    style={{\r\n                        justifyContent : 'space-between'\r\n                    }}\r\n                >\r\n                    <TextField \r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        label=\"Search\"\r\n                        InputProps={{\r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        style={{\r\n                            flexBasis : \"220px\",\r\n                            flex : 2,\r\n                            marginRight : \"10px\"\r\n                        }}\r\n                        onKeyDown={(e)=>{\r\n                            setSearch(e.target.value);\r\n                        }}\r\n                        onKeyPress={(e)=>{\r\n                            if( e.key === 'Enter' ){\r\n                                dispatch( findTransaction({\r\n                                    opt : {\r\n                                        url : `/search/transactions?s=${search}`\r\n                                    }\r\n                                }) )\r\n                            }\r\n                        }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"yyyy-dd-MM\"\r\n                        size=\"small\"\r\n                        margin=\"dense\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Filter Date\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          'aria-label': 'change date',\r\n                        }}\r\n                        style={{\r\n                            alignSelf : \"flex-start\",\r\n                            flex : 1\r\n                        }}\r\n                    />\r\n                    <IconButton focusRipple={false} style={{ margin : \"0px 8px\" }} size=\"small\" onClick={handleClose}>\r\n                        <Close color=\"secondary\" />\r\n                    </IconButton>                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container>\r\n                <Grid item lg={12} sm={12} style={{ padding : \"30px\" }}>\r\n                    <TableContainer\r\n                        component={Paper}\r\n                        elevation={2}\r\n                    >\r\n                        <Table \r\n                            stickyHeader \r\n                            size=\"medium\"\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{ fontWeight : 600 }}>Customer Name</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>In cart</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Transaction date</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Payment Type</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Cash Amount</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Total</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Change</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {transactions.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(entry=>(\r\n                                    <TransactionItems transaction={entry} />\r\n                                ))}\r\n                            </TableBody>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[8, 16, 800]}\r\n                                count={transactions.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                labelRowsPerPage={false}\r\n                            />\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>            \r\n        </Dialog>\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nexport default TransactionList\r\n","import React,{ useEffect,useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { Modal,Backdrop,Fade, Fab } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport Styles from './Styles';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { Close } from '@material-ui/icons';\r\n\r\nexport const useQuery = ()=>{\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction SuccessPage(props) {\r\n\r\n    const history = useHistory();\r\n    const [open,setOpen] = useState(false);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const { loading : rptLoad } = useSelector(state=>state.report);\r\n    const query = useQuery();\r\n    const pdf = query.get('pdf');\r\n    const page = query.get('page');\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        \r\n        if( page === 'transaction' ){\r\n            history.goBack();\r\n        }else{\r\n            history.push('/');\r\n        }\r\n\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading || rptLoad ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={classes.SuccessPageModal}>\r\n                    <Fab\r\n                        size=\"small\"\r\n                        variant=\"circular\"\r\n                        onClick={handleClose}\r\n                        style={{\r\n                            position : \"absolute\",\r\n                            left : 15,\r\n                            top : 8,          \r\n                            WebkitAppRegion : \"no-drag\"          \r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </Fab>\r\n                    <iframe                         \r\n                        style={{\r\n                            border : \"none\",    \r\n                            WebkitAppRegion : 'no-drag'                        \r\n                        }} \r\n                        onClick={handleClose}                         \r\n                        src={pdf+'#toolbar=1'} \r\n                        width=\"100%\" \r\n                        height=\"100%\"\r\n                    ></iframe>\r\n                </div>                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(SuccessPage)\r\n","const useStyles = {\r\n    SettingsModal : {\r\n        WebkitAppRegion : \"no-drag\",\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        outline : \"none\",\r\n        borderRadius : \"15px\"\r\n    },\r\n    SettingsContent : {\r\n        backgroundColor : \"#ffffff\",\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        outline : \"none\",\r\n        padding : \"20px\"\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { faCog, faNetworkWired } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal,Backdrop,withStyles, Fade, Grid, TextField, InputAdornment, Button } from '@material-ui/core';\r\nimport { Dns, UsbRounded } from '@material-ui/icons';\r\nimport React,{useEffect,useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { SetIPAddress } from '../store/SettingsServices';\r\nimport Styles from './Styles';\r\n\r\nfunction Settings(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const [open,setOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const { settings } = useSelector(state=>state.settings.entities);\r\n    const [ipAdd,setIpAdd] = useState(settings.address);\r\n    const history = useHistory();\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleRestart = ()=>{\r\n        ipcRenderer.invoke('restart');\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.SettingsModal}\r\n        >\r\n            <Fade\r\n                in={open}                        \r\n            >\r\n                <div className={classes.SettingsContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField\r\n                                value={ipAdd}\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Host Address\"\r\n                                placeholder=\"0.0.0.0\"\r\n                                onChange={(e)=>{\r\n                                    setIpAdd(e.target.value)\r\n                                }}\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <Dns />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Port\"                \r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <UsbRounded />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={6} sm={6}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                size=\"medium\"\r\n                                startIcon={<FontAwesomeIcon icon={faCog} />}\r\n                                onClick={ async(e)=>{\r\n                                    \r\n                                    const resSettings = await dispatch(SetIPAddress({\r\n                                        url : \"/settings\",\r\n                                        data : {\r\n                                            address : ipAdd\r\n                                        }\r\n                                    }));\r\n                                    \r\n                                    if( SetIPAddress.fulfilled.match(resSettings) ){\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Settings has been saved.\",\r\n                                            severity : \"success\"\r\n                                        }) );\r\n                                        history.push('/');\r\n                                        handleRestart();\r\n                                    }else{\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Please run application as `Administrator`\\nSettings not save.\",\r\n                                            severity : \"error\"\r\n                                        }) );\r\n                                    }\r\n\r\n                                }}\r\n                            >Save</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Settings)\r\n","const useStyles = {\r\n    Modal : {\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        outline : \"none\"\r\n    },\r\n    ModalContent : {\r\n        background : \"#ffffff\",\r\n        height : \"auto\",\r\n        width : \"350px\",\r\n        outline : \"none\",\r\n        padding : \"30px\"\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal,Fade,Backdrop, Grid,withStyles, Button } from '@material-ui/core';\r\nimport React,{ useEffect,useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { loadingSelector } from '../../products/store/productSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { deleteTransaction } from '../store/TransactionServices';\r\nimport Styles from './Styles';\r\n\r\nfunction TransactionDeleteModal(props) {\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const { classes } = props;\r\n    const dispatch = useDispatch();\r\n    const {loading} = useSelector(state=>state.transactions);\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal            \r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <Grid container className={classes.ModalContent} spacing={2}>\r\n                    <Grid item lg={12} sm={12}>\r\n                        <h4\r\n                            style={{\r\n                                textAlign : \"center\"\r\n                            }}\r\n                        >Delete transaction entry?</h4>                        \r\n                    </Grid>\r\n                    <Grid item lg={6} sm={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            startIcon={<FontAwesomeIcon icon={faTrash} />}\r\n                            onClick={ async()=>{\r\n                                const resTrans = await dispatch( deleteTransaction({\r\n                                    opt : {\r\n                                        url : \"/transactions/\" + id\r\n                                    }\r\n                                }) );\r\n\r\n                                if( deleteTransaction.fulfilled.match(resTrans) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : \"Transaction has been deleted.\",\r\n                                        severity : \"success\"\r\n                                    }) );\r\n                                    handleClose();\r\n                                }else{\r\n                                    dispatch(OpenNotification({\r\n                                        message : \"Error deleting transaction.\",\r\n                                        severity : \"error\"\r\n                                    }));\r\n                                }\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item lg={6} sm={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleClose}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(TransactionDeleteModal)\r\n","import React,{useEffect,useRef} from 'react';\nimport { BrowserRouter as Router,Switch, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Index';\nimport ProductsList from './products/components/ProductsList';\nimport { Grid, withStyles } from '@material-ui/core';\nimport useStyles from './Styles';\nimport Toast from './shared/components/Toast';\nimport { useDispatch } from 'react-redux';\nimport { CloseNotification } from './shared/store/NotificationSlice';\nimport Transaction from './cart/components/Transaction';\nimport Header from './shared/components/Header';\nimport TransactionList from './transactions/components/TransactionList';\nimport SuccessPage from './cart/components/SuccessPage';\nimport Settings from './settings/components/settings';\nimport TransactionDeleteModal from './transactions/components/TransactionDeleteModal';\n\nfunction App(props) {\n\n  const dispatch = useDispatch();\n  const { root,ContainerWrap } = props.classes;\n  const searchRef = useRef(null);\n\n  const focusSearch = ()=>{\n      searchRef.current.focus();\n  }\n\n  console.log(process.env.REACT_APP_MODE);\n\n  useEffect(()=>{\n\n      document.addEventListener('keydown',(e)=>{\n          if( e.ctrlKey && e.key == 'f' ){\n              focusSearch();\n          }\n      });\n\n      return ()=>{\n        document.removeEventListener('keydown',(e)=>{          \n            if( e.ctrlKey && e.key == 'f' ){\n                focusSearch();\n            }\n        });\n      }      \n\n  },[]);\n\n  const handleClose = ()=>{\n      dispatch( CloseNotification() );\n  }\n\n  return (\n    <Router>\n    <Grid style={{ WebkitAppRegion : 'drag' }} container dicrection=\"column\" className={root} spacing={3}>\n        <Header searchRef={searchRef} />\n        <Grid item lg={12} sm={12} className={ContainerWrap}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Dashboard />\n                </Route>\n                <Route exact path=\"/products\" >\n                    <ProductsList />\n                </Route>\n                <Route exact path=\"/transaction\">\n                    <Transaction />\n                </Route>\n                <Route exact path=\"/transaction/success\">\n                    <SuccessPage />\n                </Route>\n                <Route exact path=\"/translist\">\n                    <TransactionList />\n                </Route>\n                <Route exact path=\"/transaction/delete/:id\">\n                    <TransactionDeleteModal />\n                </Route>\n                <Route exact path=\"/settings\" >\n                    <Settings />\n                </Route>\n            </Switch>\n            <Toast\n                handleCloseToast={handleClose}\n            />\n        </Grid>\n    </Grid>\n    </Router>\n  );\n}\n\nexport default withStyles(useStyles)(App);","import { createSlice } from '@reduxjs/toolkit';\r\nimport { createTransaction, deleteTransaction, findTransaction, getAllTransaction,getDocDef,updateTransaction } from './TransactionServices';\r\n\r\nconst transactionSlice = createSlice({\r\n    name : 'transactions',\r\n    initialState : {\r\n        entities : [],\r\n        pdf : [],\r\n        loading : false,\r\n        errors : null\r\n    },\r\n    reducers : {},\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL TRANSACTIONS\r\n        builder.addCase(getAllTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getAllTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(getAllTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //FIND TRANSACTION\r\n        .addCase(findTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(findTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(findTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //GET DOCUMENT DEFINITION FOR PRINT\r\n        .addCase(getDocDef.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getDocDef.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.pdf = payload;\r\n        })\r\n        .addCase(getDocDef.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        .addCase(createTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(createTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities[payload._id] = payload;\r\n        })\r\n        .addCase(createTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //UPDATE TRANSACTION\r\n        .addCase(updateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(updateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(updateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //DELETE TRANSACTION\r\n        .addCase(deleteTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(deleteTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(deleteTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default transactionSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { CreateTransactionReport } from './ReportServices';\r\n\r\nconst ReportSlice = createSlice({\r\n    name : 'report',\r\n    initialState : {\r\n        doc : '',\r\n        loading : false,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder =>{\r\n        builder.addCase( CreateTransactionReport.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransactionReport.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.doc = payload;\r\n        })\r\n        .addCase(CreateTransactionReport.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default ReportSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { GetSettings, SetIPAddress } from './SettingsServices';\r\n\r\nconst SettingsSlice = createSlice({\r\n    name : 'settings',\r\n    initialState : {\r\n        entities : [],\r\n        loading : true,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder=>{\r\n        //SET HOST IP ADDRESS\r\n        builder.addCase( SetIPAddress.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(SetIPAddress.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(SetIPAddress.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //GET SETTINGS\r\n        .addCase(GetSettings.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(GetSettings.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(GetSettings.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default SettingsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport ProductReducers from '../../products/store/productSlice';\r\nimport CartReducer from '../../cart/store/CartSlice';\r\nimport NotificationReducer from './NotificationSlice';\r\nimport TransactionReducer from '../../transactions/store/TransactionSlice';\r\nimport ConnectionReducer from './ConnectionSlice';\r\nimport ReportReducer from './ReportSlice';\r\nimport SettingsReducer from '../../settings/store/SettingsSlice';\r\n\r\nexport default configureStore({\r\n    reducer : {\r\n        settings : SettingsReducer,\r\n        products : ProductReducers,\r\n        cart : CartReducer,\r\n        notifications : NotificationReducer,\r\n        transactions : TransactionReducer,\r\n        connection : ConnectionReducer,   \r\n        report : ReportReducer     \r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './shared/store/MainStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}