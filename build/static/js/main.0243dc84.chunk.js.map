{"version":3,"sources":["shared/components/Styles.js","shared/components/Loader.js","shared/store/NotificationSlice.js","settings/store/SettingsServices.js","cart/store/CartServices.js","cart/store/CartSlice.js","cart/components/CartItems.js","cart/components/Cart.js","products/store/productServices.js","products/store/productSlice.js","products/components/ProductItem.js","products/components/ProductsList.js","components/Dashboard/Styles.js","components/Dashboard/Index.js","Styles.js","shared/components/Toast.js","cart/components/Styles.js","shared/store/ReportServices.js","cart/docs/TransactionDocDef.js","cart/components/Transaction.js","shared/store/ConnectionSlice.js","shared/components/Header.js","transactions/store/TransactionServices.js","transactions/components/TransactionSingle.js","transactions/components/TransactionItems.js","transactions/components/TransactionList.js","cart/components/SuccessPage.js","settings/components/Styles.js","settings/components/settings.js","transactions/components/Styles.js","transactions/components/TransactionDeleteModal.js","App.js","transactions/store/TransactionSlice.js","shared/store/ReportSlice.js","settings/store/SettingsSlice.js","shared/store/MainStore.js","index.js"],"names":["useStyles","ProgressWrap","top","left","display","position","justifyContent","flexDirection","alignItems","zIndex","backgroundColor","height","width","transition","borderRadius","HeaderWrap","padding","WebkitAppRegion","withStyles","props","classes","useState","progress","className","CircularProgress","size","style","textAlign","color","letterSpacing","NotificationSlice","createSlice","initialState","open","message","severity","reducers","OpenNotification","state","payload","CloseNotification","actions","SettingsServices","axios","create","baseURL","timeout","sleep","x","Promise","resolve","setTimeout","SetIPAddress","createAsyncThunk","args","a","rejectWithValue","url","data","method","res","response","GetSettings","CartService","CreateTransaction","dispatch","resSettings","fulfilled","match","settings","host","undefined","address","port","values","cartAdapter","createEntityAdapter","selectId","prod","_id","CartSlice","name","getInitialState","cart","loading","error","addItem","index","findIndex","item_name","item_price","item_qty","item_unit","item_srp","qty","parseInt","total_per_unit","total_per_unit_srp","unshift","inventory_qty","discount","updateQty","val","NaN","setDiscount","calcDiscount","total","total_srp","removeItem","splice","extraReducers","builder","addCase","pending","rejected","selectCart","cartItems","createDraftSafeSelector","cartLoading","CartItems","item","useDispatch","setTotal","totalSrp","setTotalSrp","useEffect","TableRow","component","motion","tr","initial","y","opacity","animate","TableCell","fontSize","icon","faBoxes","substring","TextField","variant","value","onChange","e","target","inputProps","thousandSeparator","displayType","decimalScale","decimalSeparator","fixedDecimalScale","disabled","margin","IconButton","onClick","faTrashAlt","Cart","useSelector","items","setItems","page","setPage","rowsPerPage","setRowsPerPage","history","useHistory","TableContainer","Paper","elevation","minHeight","Table","stickyHeader","TableHead","TableBody","slice","map","bottom","colSpan","Button","startIcon","faShoppingBag","length","errors","push","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","labelRowsPerPage","ProdServices","selectAllProducts","opt","searchProduct","selectSingleProduct","id","productsAdapter","sortComparer","createdAt","productSlice","selectedProd","clearProducts","entities","setAll","addOne","loadingSelector","products","productsSelector","getSelectors","ProductItem","hover","cursor","title","item_type","item_brand","faBox","allowNegative","customInput","faPlusCircle","ProductsList","selectAll","settingsLoading","connection","isConnected","aria-label","product","Dashboard","infoBlock","background","ContentBlock","Styles","Grid","container","spacing","direction","lg","sm","body","overflow","html","root","ContainerWrap","Toast","handleCloseToast","notifications","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","right","Alert","useStyle","TransactionModal","ModalContent","outline","SuccessPageModal","ReportServices","CreateTransactionReport","formatter","Intl","NumberFormat","currency","pdfmake","fonts","Courier","normal","bold","italics","bolditalics","Times","Arial","Epson","Charlie_dotted","DOT_MATRIX","FAKE_RECEIPT","docs","logoURL","customer_name","customer_address","transaction_date","total_amount","change_amount","cash_amount","discountArr","doc","less","price","Date","date","toLocaleDateString","transact_type","reduce","b","pageSize","pageMargins","compress","header","currentPage","columns","image","stack","text","alignment","footer","pageCount","table","widths","headerRows","format","font","border","content","dontBreakRows","layout","hLineWidth","i","node","hLineHeight","paddingBottom","colIndex","positions","currentPosition","pageInnerHeight","styles","subheader","tableHeader","tableItems","tableItemsAmount","defaultStyle","columnGap","useLocation","setOpen","transact_payment_type","transact_status","info","setInfo","handleClose","socket","io","transact_id","resTrans","logo","pdf","JSON","parse","pdfMake","vfs","pdfFonts","docDef","TransactionDocDef","docGenerator","createPdf","getBase64","emit","sid","getBlob","blob","window","URL","createObjectURL","goBack","price_srp","prevVal","Modal","BackdropComponent","Backdrop","BackdropProps","Fade","in","Typography","fullWidth","label","InputProps","startAdornment","InputAdornment","faDollarSign","prefix","faUserTie","faBuilding","faMoneyBill","cash","select","transaction_payment_type","payment_type","MenuItem","ButtonGroup","faMoneyBillAlt","total_amount_srp","change_amount_srp","ConnectionSlice","setConnection","ipcRenderer","require","searchRef","searchText","setSearchText","handleChange","handleKeyPress","filteredString","escapeStringRegexp","console","log","key","defaultSettings","on","connected","printerName","Box","alignSelf","Autocomplete","options","Set","PopperComponent","Popper","inputValue","renderInput","params","inputRef","faSearch","onKeyPress","Divider","orientation","flexItem","faSyncAlt","justifySelf","faList","SettingsRemote","htmlColor","div","whileHover","scale","faCog","invoke","Minimize","Close","TransServices","getAllTransaction","createTransaction","findTransaction","getDocDef","responseType","headers","Accept","mode","updateTransaction","deleteTransaction","makeStyles","theme","BtnGroupSingleTrans","fn","report","partial_payments","payment","setPayment","faMoneyBillWaveAlt","data64","faPrint","TransactionSingle","inOpen","transaction","transactions","faIdCard","cart_count","toISOString","split","faCalendar","TransactionItems","onDoubleClick","userSelect","total_price_srp","appBar","TransitionDialog","forwardRef","ref","Slide","TransactionList","search","setSearch","now","selectedDate","setSelectedDate","utils","DateFnsUtils","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","flexBasis","flex","marginRight","onKeyDown","disableToolbar","selDate","KeyboardButtonProps","focusRipple","fontWeight","entry","rptLoad","query","URLSearchParams","get","Fab","src","SettingsModal","SettingsContent","ipAdd","setIpAdd","setPort","placeholder","Dns","UsbRounded","useParams","faTrash","useRef","focusSearch","current","focus","document","addEventListener","ctrlKey","removeEventListener","dicrection","exact","path","transactionSlice","ReportSlice","SettingsSlice","configureStore","reducer","SettingsReducer","ProductReducers","CartReducer","NotificationReducer","TransactionReducer","ConnectionReducer","ReportReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.0243dc84.chunk.js","sourcesContent":["const useStyles = {\r\n    ProgressWrap : {\r\n        top : 0,\r\n        left : 0,\r\n        display : \"flex\",\r\n        position: \"fixed\",\r\n        justifyContent : \"center\",\r\n        flexDirection : \"column\",\r\n        alignItems : \"center\",\r\n        zIndex : 100,\r\n        backgroundColor : \"rgba(0, 0, 0, 0.9)\",\r\n        height: \"700px\",\r\n        width : \"100%\",\r\n        transition : \"all 300ms linear\",\r\n        borderRadius : '20px'\r\n    },\r\n    HeaderWrap : {\r\n        height : '60px',\r\n        padding : '20px 0px',\r\n        borderRadius : '10px',\r\n        WebkitAppRegion : 'drag'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { CircularProgress, withStyles } from '@material-ui/core'\r\nimport React,{ useState,useEffect } from 'react'\r\nimport useStyles from './Styles'\r\n\r\nfunction Loader(props) {\r\n\r\n    const { classes } = props;\r\n    const [progress,setProgress] = useState('Loading');\r\n\r\n    return (\r\n        <div className={classes.ProgressWrap}>\r\n            <CircularProgress size={70} />\r\n            <h4\r\n                style={{\r\n                    textAlign : \"center\",\r\n                    color : \"white\",\r\n                    letterSpacing : \"10px\"\r\n                }}\r\n            >{progress}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Loader)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst NotificationSlice = createSlice({\r\n    'name' : 'notifications',\r\n    initialState : {\r\n        open : false,\r\n        message : '',\r\n        severity : ''\r\n    },\r\n    reducers : {\r\n        OpenNotification : (state,{payload})=>{\r\n            state.open = true;\r\n            state.severity = payload.severity;\r\n            state.message = payload.message;\r\n        },\r\n        CloseNotification : (state,{payload})=>{\r\n            state.open = false;\r\n            state.severity = '';\r\n            state.message = '';\r\n        }\r\n    }\r\n});\r\n\r\nexport const { OpenNotification,CloseNotification } = NotificationSlice.actions;\r\n\r\nexport default NotificationSlice.reducer;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst host = \"http://localhost:8082/api\";\r\nconst SettingsServices = axios.create({\r\n    baseURL : host,\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const SetIPAddress = createAsyncThunk(\r\n    'settings/SetIPAddress',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url,data } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"PATCH\",\r\n                data\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return(rejectWithValue(err.response.data));\r\n        }\r\n    }\r\n); \r\n\r\nexport const GetSettings = createAsyncThunk(\r\n    'settings/GetSettings',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"GET\"\r\n            });\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst CartService = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const CreateTransaction = createAsyncThunk(\r\n    'cart/CreateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n\r\n                const { values } = args;\r\n                const res = await CartService({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    url : '/transactions',\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(1000);\r\n                return res.data;             \r\n            }             \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createSlice,createEntityAdapter,createDraftSafeSelector } from '@reduxjs/toolkit';\r\nimport { CreateTransaction } from './CartServices';\r\n\r\nconst cartAdapter = createEntityAdapter({\r\n    selectId : prod=>prod._id\r\n});\r\n\r\nconst CartSlice = createSlice({\r\n    name : 'cart',\r\n    initialState : cartAdapter.getInitialState({\r\n        cart : [],\r\n        loading : false,\r\n        error : ''\r\n    }),\r\n    reducers : {\r\n        addItem : (state,{payload})=>{\r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === payload._id);\r\n\r\n            const {\r\n                _id,\r\n                item_name,\r\n                item_price,\r\n                item_qty,\r\n                item_unit,\r\n                item_srp\r\n            } = payload;\r\n\r\n            const qty = 1;\r\n            const discount = 0;\r\n\r\n            if( index !== -1 ) {\r\n                state.cart[index].qty = parseInt(state.cart[index].qty) + 1;\r\n                state.cart[index].total_per_unit = parseInt(state.cart[index].qty) * item_price;\r\n                state.cart[index].total_per_unit_srp = parseInt(state.cart[index].qty) * item_srp;\r\n            }else{\r\n                state.cart.unshift({\r\n                    _id,\r\n                    item_name,\r\n                    item_price,\r\n                    item_srp,\r\n                    inventory_qty : item_qty,\r\n                    error : false,\r\n                    qty,\r\n                    discount,\r\n                    total_per_unit : qty * item_price,\r\n                    total_per_unit_srp : qty * item_srp,\r\n                    item_unit\r\n                });\r\n            }\r\n        },\r\n        updateQty : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                qty,\r\n                item_price,\r\n                inventory_qty,\r\n                item_srp\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            let val = qty === NaN ? 0 : parseInt(qty);\r\n\r\n            if( index !== -1 ){\r\n                state.cart[index].qty = val;\r\n                state.cart[index].total_per_unit = val * item_price;\r\n                state.cart[index].total_per_unit_srp = val * item_srp;\r\n\r\n                if( val > inventory_qty ){\r\n                    state.cart[index].error = true;\r\n                }else{\r\n                    state.cart[index].error = false;\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        setDiscount : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                discount,\r\n                item_price,\r\n                item_srp,\r\n                qty\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            const calcDiscount = discount / 100;\r\n            const total = item_price * qty;\r\n            const total_srp = item_srp * qty;\r\n\r\n            if(index !== -1){\r\n                state.cart[index].discount = calcDiscount;\r\n                state.cart[index].total_per_unit = discount !== 0 ? total - (total * calcDiscount) : item_price * qty;\r\n                state.cart[index].total_per_unit_srp = discount !== 0 ? total_srp - (total_srp * calcDiscount) : item_srp * qty;\r\n            }\r\n\r\n        },\r\n        removeItem : (state,{payload})=>{\r\n            const index = state.cart.findIndex(prod=>prod._id === payload);\r\n            state.cart.splice(index,1);\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        builder.addCase( CreateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.cart = [];\r\n        })\r\n        .addCase( CreateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nconst selectCart = (state)=>state.cart;\r\nexport const cartItems = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.cart\r\n);\r\nexport const cartLoading = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.loading\r\n);\r\nexport const { addItem,removeItem,updateQty,setDiscount } = CartSlice.actions;\r\nexport default CartSlice.reducer;","import { faBoxes, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { IconButton, TableCell, TableRow, TextField, Tooltip } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { removeItem, updateQty,setDiscount } from '../store/CartSlice'\r\nimport NumberFormat from 'react-number-format';\r\nimport { motion } from 'framer-motion'\r\n\r\nfunction CartItems({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [total,setTotal] = useState(parseInt(item.item_price) * parseInt(item.qty));\r\n    const [totalSrp,setTotalSrp] = useState(parseInt(item.item_srp) * parseInt(item.qty));\r\n\r\n    useEffect(()=>{\r\n        setTotal(parseInt(item.item_price) * parseInt(item.qty));\r\n        setTotalSrp(parseInt(item.item_srp) * parseInt(item.qty));\r\n    },[item.qty]);\r\n\r\n    useEffect(()=>{\r\n        setTotal(item.total_per_unit);\r\n        setTotalSrp(item.total_per_unit_srp);\r\n    },[item.total_per_unit,item.total_per_unit_srp]);\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                key={item._id}   \r\n                component={motion.tr}              \r\n                initial={{\r\n                    y : -100,\r\n                    opacity : 0\r\n                }}\r\n                animate={{\r\n                    y : 0,\r\n                    opacity : 1\r\n                }}\r\n            >\r\n                <TableCell\r\n                    style={{fontSize : '10px'}}\r\n                ><FontAwesomeIcon color=\"grey\" icon={faBoxes} />&nbsp;&nbsp;{item.item_name.substring(0,18) + '...'}</TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        error={ item.error }\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={item.qty}\r\n                        onChange={(e)=>{\r\n                            let val = e.target.value == '' ? 0 : parseInt(e.target.value);                            \r\n                            dispatch( updateQty({\r\n                                ...item,\r\n                                qty : val\r\n                            }));\r\n                        }}    \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px'\r\n                            }\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <NumberFormat\r\n                        thousandSeparator \r\n                        displayType=\"text\"\r\n                        value={totalSrp}\r\n                        style={{ fontSize : '10px' }}\r\n                        decimalScale={2} \r\n                        decimalSeparator={'.'}\r\n                        fixedDecimalScale={true}                    \r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        disabled={item.error}\r\n                        variant=\"outlined\"\r\n                        size=\"small\" \r\n                        margin=\"none\"\r\n                        value={item.discount * 100}      \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px',\r\n                                width : '50px'\r\n                            }\r\n                        }}    \r\n                        onChange={(e)=>{                               \r\n                            dispatch( setDiscount({\r\n                                ...item,\r\n                                discount : e.target.value === '' ? 0 : parseInt(e.target.value)\r\n                            }));\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( removeItem(item._id) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faTrashAlt} /> \r\n                    </IconButton>\r\n                </TableCell> \r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartItems\r\n","import { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    Button, \r\n    Paper, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow \r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartItems } from '../store/CartSlice';\r\nimport CartItems from './CartItems';\r\n\r\nfunction Cart(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector(cartItems);\r\n    const { loading } = useSelector(state=>state.cart);\r\n    const [items,setItems] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(9);\r\n    const history = useHistory();\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setItems(cart);\r\n    },[cart]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <TableContainer \r\n            component={Paper} \r\n            elevation={2} \r\n            style={{\r\n                minHeight : \"550px\",\r\n                position : 'relative'\r\n            }}\r\n        >\r\n            <Table size=\"small\" stickyHeader>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell style={{ textAlign : 'center' }}>QTY</TableCell>\r\n                        <TableCell>Total</TableCell>\r\n                        <TableCell>Discount</TableCell>\r\n                        <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.slice(page*rowsPerPage,page*rowsPerPage + rowsPerPage).map(item=>( \r\n                        <CartItems \r\n                            item={item}\r\n                        />\r\n                    ))}                    \r\n                </TableBody>\r\n                <TableRow style={{\r\n                    position : \"absolute\",\r\n                    bottom : '0',\r\n                    left : '0',\r\n                    WebkitAppRegion : \"no-drag\"\r\n                }}>      \r\n                    <TableCell colSpan={1}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                backgroundColor : \"green\",\r\n                                color : \"#ffffff\",\r\n                                WebkitAppRegion : 'no-drag'\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={faShoppingBag} />}\r\n                            onClick={()=>{\r\n\r\n                                if( items.length == 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Cart is Empty',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n\r\n                                let errors = [];\r\n\r\n                                items.map(item=>{\r\n                                    if( item.error === true ){\r\n                                        errors.push(item.error);\r\n                                    }\r\n                                });\r\n\r\n                                if( errors.length > 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Invalid Quantity',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                };\r\n\r\n                                history.push('/transaction',cart);\r\n                            }}\r\n                        >Checkout</Button>\r\n                    </TableCell>              \r\n                    <TableCell colSpan={4}>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[9]}\r\n                            count={items.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            labelRowsPerPage={false}\r\n                        />\r\n                    </TableCell>          \r\n                </TableRow>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst ProdServices = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const selectAllProducts = createAsyncThunk(\r\n    'products/selectAllProducts',\r\n    async( args ,{ rejectWithValue,dispatch })=>{        \r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    ...opt,                \r\n                    method : \"GET\"\r\n                });\r\n                await sleep(1000);\r\n                return res.data;\r\n            }\r\n        }catch(err){    \r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const searchProduct = createAsyncThunk(\r\n    'products/searchProduct',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    ...opt,                \r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;\r\n            }\r\n                    \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const selectSingleProduct = createAsyncThunk(\r\n    'products/selectSingleProduct',\r\n    async(id,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET',\r\n                    url : '/products/' + id\r\n                });\r\n                await sleep(1000);\r\n                return res.data;  \r\n            }         \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'products/createTransaction',\r\n    async( values,{rejectWithValue,dispatch} )=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";      \r\n                const port = settings.port !== undefined ? settings.port : 8081;        \r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'POST',\r\n                    url : '/products',\r\n                    data : values\r\n                });\r\n                await sleep(1000);\r\n                return res.data; \r\n            }          \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createDraftSafeSelector, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport { searchProduct, selectAllProducts, selectSingleProduct } from './productServices';\r\n\r\nconst productsAdapter = createEntityAdapter({\r\n    selectId : (prod)=>prod._id,\r\n    sortComparer : (prod)=>prod.createdAt\r\n});\r\n\r\nconst productSlice = createSlice({\r\n    name : 'products',\r\n    initialState : productsAdapter.getInitialState({\r\n        loading : false,\r\n        selectedProd : [],\r\n        error : null,\r\n    }),\r\n    reducers : {\r\n        clearProducts : state=>{\r\n            state.entities = [];\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL PRODUCTS\r\n        builder.addCase(selectAllProducts.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectAllProducts.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(selectAllProducts.rejected,(state,{payload})=>{\r\n            state.loading = false;            \r\n            state.error = payload;\r\n        })\r\n        //FIND PRODUCT/S\r\n        .addCase(searchProduct.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(searchProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(searchProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //FETCH SINGLE PRODUCT\r\n        .addCase(selectSingleProduct.pending,(state,{payload})=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectSingleProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.addOne(state,payload);\r\n        })\r\n        .addCase(selectSingleProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        \r\n        \r\n    }\r\n});\r\n\r\nconst selectState = state=>state.products;\r\n\r\nexport const loadingSelector = createDraftSafeSelector(\r\n    selectState,\r\n    state=>state.loading\r\n);\r\n\r\nexport const { clearProducts } = productSlice.actions;\r\nexport const productsSelector = productsAdapter.getSelectors(state=>state.products);\r\nexport default productSlice.reducer;","import { faBox, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconButton, TableCell, TableRow, TextField, Tooltip } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addItem } from '../../cart/store/CartSlice';\r\nimport NumberFormat from 'react-number-format';\r\n \r\nfunction ProductItem({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                hover\r\n                key={item._id} \r\n                style={{ cursor : \"pointer\",WebkitAppRegion : 'no-drag' }}\r\n                title={`Name : ${item.item_name}\\nType : ${item.item_type}\\nBrand : ${item.item_brand}`}\r\n            >\r\n                <TableCell style={{ fontSize : \"11px\" }}><FontAwesomeIcon color=\"grey\" icon={faBox} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell style={{ fontSize : \"11px\" }}>{item.item_qty}</TableCell>\r\n                <TableCell style={{ fontSize : \"11px\" }}>\r\n                    <NumberFormat \r\n                        displayType=\"text\"\r\n                        thousandSeparator\r\n                        fixedDecimalScale\r\n                        allowNegative={false}\r\n                        decimalScale={2}\r\n                        decimalSeparator=\".\"                        \r\n                        customInput={TextField}                        \r\n                        value={item.item_srp}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( addItem(item) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag',\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faPlusCircle} />\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductItem\r\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { selectAllProducts } from '../store/productServices';\r\nimport { clearProducts, loadingSelector, productsSelector } from '../store/productSlice';\r\nimport ProductItem from './ProductItem';\r\n\r\nfunction ProductsList() {\r\n\r\n    const dispatch = useDispatch();\r\n    const products = useSelector(productsSelector.selectAll);\r\n    const { loading : settingsLoading } = useSelector(state=>state.settings);\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const loading = useSelector(loadingSelector);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(11);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setPage(0);\r\n    },[products]);\r\n\r\n    useEffect(()=>{\r\n        \r\n        dispatch( selectAllProducts({\r\n            opt : {\r\n                url : '/products'\r\n            }\r\n        }) );\r\n\r\n    },[]);\r\n\r\n    if( loading || settingsLoading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper} style={{ minHeight : \"550px\", position : 'relative' }}>\r\n                <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell>QTY</TableCell>\r\n                            <TableCell>Price</TableCell>\r\n                            <TableCell>Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {products.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(product=>(\r\n                            <ProductItem item={product} />\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableRow\r\n                        style={{\r\n                            position : 'absolute',\r\n                            bottom : '0',\r\n                            left : '0',\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <TableCell colSpan={4}>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[11]}\r\n                                count={products.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n","const useStyles = {\r\n    Dashboard : {\r\n        height : '90%'\r\n    },\r\n    infoBlock : {\r\n        height : '50px',\r\n        borderRadius : '10px',\r\n        background : '#fff'\r\n    },\r\n    ContentBlock : {\r\n        height : '90%',\r\n        borderRadius : '10px',\r\n        padding : '20px'\r\n    }    \r\n}\r\n\r\nexport default useStyles;","import { Grid, withStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Cart from '../../cart/components/Cart';\r\nimport ProductsList from '../../products/components/ProductsList';\r\nimport Styles from './Styles';\r\n\r\n\r\nfunction Dashboard(props) {\r\n\r\n    const { ContentBlock,Dashboard,infoBlock } = props.classes;\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Grid container className={Dashboard} spacing={2}>\r\n            <Grid direction=\"column\" item container lg={6} sm={6}> \r\n                <Cart />\r\n            </Grid>    \r\n            <Grid \r\n                item lg={6} \r\n                sm={6} \r\n                className={ContentBlock}\r\n            >\r\n                <ProductsList />\r\n            </Grid>  \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Dashboard)\r\n","const useStyles = {\r\n    '@global' : {\r\n        body : {\r\n            height : '100%',\r\n            margin : '0px',\r\n            '& #root' : {\r\n                height : '100%',\r\n            },\r\n            overflow : 'hidden',\r\n            position : 'relative',\r\n            borderRadius : \"15px\"\r\n        },\r\n        html : {\r\n            height : '95%',\r\n            margin : '0px',\r\n            padding : '20px',\r\n        }\r\n    },\r\n\r\n    root : {\r\n        height : '100%',\r\n        background : '#EBEBF7',\r\n        padding : \"20px\",\r\n        borderRadius : '20px',\r\n        position : 'relative'\r\n    },\r\n    \r\n    ContainerWrap : {\r\n        height : 'auto',\r\n        padding : '20px 0px 0px 0px !important',\r\n        position : 'relative'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Toast(props) {\r\n\r\n    const { handleCloseToast } = props;\r\n    const { message,severity,open } = useSelector(state=>state.notifications);\r\n\r\n    return (\r\n        <Snackbar\r\n            open={open} \r\n            autoHideDuration={4000} \r\n            onClose={handleCloseToast}\r\n            anchorOrigin={{vertical : 'bottom',horizontal : 'right'}}\r\n            style={{ bottom : \"50px\", right : '50px', WebkitAppRegion : 'no-drag' }}\r\n        >\r\n            <Alert\r\n                elevation={6} \r\n                variant=\"filled\"\r\n                onClose={handleCloseToast}\r\n                severity={severity}\r\n            >\r\n                {message}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default Toast\r\n","const useStyle = {\r\n    TransactionModal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        WebkitAppRegion : 'no-drag'\r\n    },\r\n    ModalContent : {\r\n        borderRadius : '10px',\r\n        padding : '20px',\r\n        width : '400px',\r\n        height : '450px',\r\n        backgroundColor : \"#ffffff\",\r\n        outline : 'none',\r\n        position : 'relative'\r\n    },\r\n    SuccessPageModal : {\r\n        outline : \"none\",\r\n        height : \"650px\",\r\n        padding : \"30px\",\r\n    }\r\n}\r\n\r\nexport default useStyle;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst ReportServices = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x))\r\n}\r\n\r\nexport const CreateTransactionReport = createAsyncThunk(\r\n    'report/CreateTransactionReport',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { url } = args;\r\n                const res = await ReportServices({\r\n                    baseURL : `http://${host}:${port}/api/v1/gc-print`,\r\n                    url,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return await res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import pdfmake from 'pdfmake/build/pdfmake';\r\nconst formatter = new Intl.NumberFormat('en-PH',{\r\n    style : 'currency',\r\n    currency : 'Php'\r\n});\r\n\r\npdfmake.fonts = {\r\n    Courier : {\r\n        normal: 'cour.ttf',\r\n        bold: 'courbd.ttf',\r\n        italics: 'couri.ttf',\r\n        bolditalics: 'courbi.ttf'\r\n    },\r\n    Times: {\r\n        normal: 'times.ttf',\r\n        bold: 'timesbd.ttf',\r\n        italics: 'timesi.ttf',\r\n        bolditalics: 'timesbi.ttf'\r\n    },\r\n    Arial : {\r\n        normal: 'arial.ttf',\r\n        bold: 'arialbd.ttf',\r\n        italics: 'ariali.ttf',\r\n        bolditalics: 'arialbi.ttf'\r\n    },\r\n    // Roboto: {\r\n    //     normal: 'Roboto-Regular.ttf',\r\n    //     bold: 'Roboto-Medium.ttf',\r\n    //     italics: 'Roboto-Italic.ttf',\r\n    //     bolditalics: 'Roboto-MediumItalic.ttf'\r\n    // },\r\n    Epson: {\r\n        normal: 'Epson1.ttf',\r\n        bold: 'Epson1.ttf',\r\n        italics: 'Epson1.ttf',\r\n        bolditalics: 'Epson1.ttf'\r\n    },\r\n    Charlie_dotted : {\r\n        normal : 'charlie_dotted.ttf',\r\n        bold : 'charlie_dotted.ttf',\r\n        italics : 'charlie_dotted.ttf',\r\n        bolditalics : 'charlie_dotted.ttf'\r\n    },\r\n    DOT_MATRIX : {\r\n        normal : 'DOTMATRI.TTF',\r\n        bold : 'DOTMBold.TTF',\r\n        italics : 'DOTMATRI.TTF',\r\n        bolditalics : 'DOTMATRI.TTF'\r\n    },\r\n    FAKE_RECEIPT : {\r\n        normal : 'fake receipt.ttf',\r\n        bold : 'fake receipt.ttf',\r\n        italics : 'fake receipt.ttf',\r\n        bolditalics : 'fake receipt.ttf'\r\n    }\r\n}\r\n\r\nexport default (docs,logoURL)=>{\r\n    let discountArr = [];\r\n    let customer_name,\r\n        customer_address,\r\n        transaction_date,\r\n        transaction_type,\r\n        total_amount,\r\n        change_amount,\r\n        cash_amount,\r\n        _id\r\n    ;\r\n\r\n    docs.map(doc=>{\r\n        let less = ( doc[4].discount * doc[4].price);\r\n        customer_name = doc[4].customer_name;\r\n        transaction_date = new Date(doc[4].date).toLocaleDateString();\r\n        transaction_type = doc[4].transact_type;\r\n        total_amount = doc[4].total_amount;\r\n        change_amount = doc[4].change_amount;\r\n        cash_amount = doc[4].cash_amount;\r\n        _id = doc[4]._id;\r\n        customer_address = doc[4].customer_address;\r\n        discountArr.push(less);\r\n    });\r\n\r\n    let discount = discountArr.reduce((a,b)=>a+b,0);    \r\n\r\n    return {\r\n        pageSize : {\r\n            width : 120 * 9.5,\r\n            height : 120 * 5.5\r\n        },\r\n        pageMargins: [ 20, 80, 20, 120 ],\r\n        compress : false,\r\n        header : (currentPage)=>{\r\n            if( currentPage === 1 ){\r\n                return {\r\n                    columns : [\r\n                        {\r\n                            image : `data:image/png;base64,${logoURL}`,\r\n                            width : 60,\r\n                            height : 60,\r\n                            margin : [2,5,0,0]\r\n                        },\r\n                        {\r\n                            stack : [\r\n                                {\r\n                                    text : 'Smart/Tnt:0963-644-8252\\nGlobe/tm:0926-775-3578',\r\n                                    //color : \"#808080\"\r\n                                    style : 'subheader'\r\n                                }\r\n                            ],\r\n                            alignment : 'right',\r\n                            margin : [2,12]      \r\n                        }   \r\n                    ],\r\n                    margin : [20,8],\r\n                    width : '*',\r\n                }\r\n            }\r\n        },\r\n        footer : (currentPage,pageCount)=>{\r\n            if( currentPage === pageCount ){\r\n                return {\r\n                    stack : [\r\n                        {\r\n                            table : {\r\n                                widths : ['*',190,250],\r\n                                headerRows : 1,\r\n                                body : [\r\n                                    [\r\n                                        {\r\n                                            text : \"Prepared by : \",\r\n                                            style : {\r\n                                                fontSize : 15\r\n                                            },\r\n                                            bold : true\r\n                                        },\r\n                                        {\r\n                                            text : `Discount : ${formatter.format(discount)}`,\r\n                                            style : {\r\n                                                fontSize : 15,\r\n                                                font : 'Times'\r\n                                            },\r\n                                            bold : true\r\n                                        },\r\n                                        {\r\n                                            text : `Amount to pay : ${formatter.format(total_amount)}`,\r\n                                            style : {\r\n                                                fontSize : 15,\r\n                                                font : 'Times'\r\n                                            },\r\n                                            bold : true\r\n                                        }\r\n                                    ],\r\n                                    [ \r\n                                        { \r\n                                            text : \"\", \r\n                                            border : [false,false,false,false],\r\n                                        },\r\n                                        {\r\n                                            text : [\r\n                                                `Cash : `,\r\n                                                { \r\n                                                    text : `${cash_amount}`,\r\n                                                    style : { \r\n                                                        alignment : \"center\", \r\n                                                        font : \"Times\",\r\n                                                        fontSize : 15\r\n                                                    } \r\n                                                }\r\n                                            ],\r\n                                            bold : true,\r\n                                            fontSize : 15\r\n                                        }, \r\n                                        { \r\n                                            text : `${change_amount <= -1 ? 'Balance : ' + formatter.format(change_amount * -1) : 'Change : ' + formatter.format(change_amount)}`,\r\n                                            style : {\r\n                                                font : 'Times',\r\n                                                fontSize : 15\r\n                                            },\r\n                                            bold : true\r\n                                        } \r\n                                    ]\r\n                                ]                        \r\n                            }\r\n                        },\r\n                        {\r\n                            text : \"**** Nothing Follows ****\",                            \r\n                            style : {\r\n                                fontSize : 12,        \r\n                                //color : \"#808080\"                     \r\n                            },\r\n                            bold : true,\r\n                            alignment : \"center\",\r\n                            margin : [0,7,0,0]\r\n                        },\r\n                        {\r\n                            text : \"Received goods in order and prestine condition\\n\\nby:__________________________________\",                            \r\n                            style : {\r\n                                fontSize : 12,                         \r\n                            },\r\n                            alignment : \"right\",\r\n                            bold : true,\r\n                            margin : [0,3,0,0]\r\n                        }\r\n                    ],                    \r\n                    margin : [20,0]                 \r\n                }\r\n            }\r\n        },\r\n        content : [\r\n            {\r\n                columns : [\r\n                    { \r\n                        text : \"ORDER SLIP\", \r\n                        bold : true,\r\n                        style : \r\n                        { \r\n                            fontSize : 22,\r\n                            //color : \"#808080\",\r\n                            font : \"Times\"                            \r\n                        } \r\n                    }\r\n                ],\r\n                alignment : \"center\"\r\n            },\r\n            {                \r\n                stack : [\r\n                    {\r\n                        columns : [\r\n                            {\r\n                                text : [\r\n                                    'Customer Name : ',\r\n                                    {\r\n                                        text : `${customer_name}`,\r\n                                        italics : false,\r\n                                        bold : true\r\n                                    }\r\n                                ],       \r\n                                bold : true,                         \r\n                                fontSize : 15,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Transaction Date : ',\r\n                                    {\r\n                                        text : `${transaction_date}`,\r\n                                        italics : false,\r\n                                        bold : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 15,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                        ],\r\n                        \r\n                    },\r\n                    {\r\n                        columns : [                            \r\n                            {\r\n                                text : `Address : ${customer_address}`,\r\n                                bold : true,\r\n                                fontSize : 15,\r\n                                margin : [0,5,0,10]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Receipt# : ',\r\n                                    {\r\n                                        text : `${_id}`,\r\n                                        fontSize : 15\r\n                                    }\r\n                                ],                         \r\n                                bold : true,\r\n                                fontSize : 15,\r\n                                margin : [0,5,0,10]\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        table : {\r\n                            dontBreakRows : true,\r\n                            headerRows: 1,\r\n                            widths: [ 60,60,'*', 120,80],\r\n                            body: [\r\n                                [                                     \r\n                                    {\r\n                                        text : 'QTY',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'UNIT',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'ITEM NAME',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'UNIT PRICE',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'AMOUNT',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },                                   \r\n                                ]                                                   \r\n                            ]\r\n                        }\r\n                    },\r\n                    {\r\n                        layout : {\r\n                            hLineWidth : (i,node)=>{\r\n                                return (i === 0 || i === node.table.body.length) ? 1 : 0;\r\n                            },\r\n                            hLineHeight : (i,node)=>{\r\n                                return (i === 1) ? 0 : 1;\r\n                            },\r\n                            paddingBottom: (i, node, colIndex) => {                                \r\n                                const DEFAULT_PADDING = 2;\r\n                                // Calculate padding for the last element of the table.\r\n                                if (i === node.table.body.length - 1 && node.positions[node.positions.length - 1] !== undefined) {\r\n                                    const currentPosition = node.positions[node.positions.length - 1];                                    \r\n                                    const totalPageHeight = currentPosition.pageInnerHeight;\r\n                                    const currentHeight = currentPosition.top;\r\n                                    const paddingBottom = totalPageHeight - currentHeight;                                    \r\n                                    \r\n                                    if( paddingBottom < 0 ){\r\n                                        return DEFAULT_PADDING;\r\n                                    }else{\r\n                                        return paddingBottom;\r\n                                    }                                    \r\n                                } else {\r\n                                    return DEFAULT_PADDING;\r\n                                }\r\n                            }\r\n                        },\r\n                        table : {\r\n                            dontBreakRows : true,\r\n                            headerRows: 1,\r\n                            widths: [ 60,60,'*', 120,80],\r\n                            body: [                                   \r\n                                ...docs                                                      \r\n                            ]\r\n                        }\r\n                    }                    \r\n                ],                \r\n                margin : [0,10,0,0]\r\n            }\r\n        ],\r\n        styles : {\r\n            header : {\r\n                // bold : true,\r\n                //color : \"#808080\"\r\n                fontSize : 12,\r\n                font : \"Times\",\r\n                bold : true\r\n            },\r\n            subheader : {\r\n                fontSize : 12,\r\n                // bold : true,\r\n                font : \"Times\",\r\n                bold : true\r\n            },\r\n            tableHeader : {\r\n                fontSize : 16,\r\n                alignment : 'center',\r\n                margin : [0,3],  \r\n                bold : true,\r\n                border : [true,true,true,true]      \r\n            },\r\n            tableItems : {\r\n                alignment : 'center',\r\n                margin : [0,2],\r\n                fontSize : 13,\r\n                //color : \"#808080\"\r\n            },\r\n            tableItemsAmount : {\r\n                alignment : 'center',\r\n                margin : [0,2],\r\n                fontSize : 13,\r\n                font : \"Times\",\r\n            }\r\n        },\r\n        defaultStyle : {\r\n            font : 'Times',\r\n            columnGap : 5,\r\n            //color : \"#808080\",\r\n            fontSize : 12\r\n        }\r\n    }\r\n}","import { faBuilding, faDollarSign, faMoneyBill, faMoneyBillAlt, faPrint, faSave, faUser, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Fade, Grid, Modal, withStyles, TextField, InputAdornment, ButtonGroup, Button, Typography, MenuItem } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport useStyle from './Styles';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CreateTransaction } from '../store/CartServices';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartLoading } from '../store/CartSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { CreateTransactionReport } from '../../shared/store/ReportServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../docs/TransactionDocDef';\r\nimport { io } from 'socket.io-client';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n \r\nfunction Transaction(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(cartLoading);\r\n    const {state : cart} = useLocation();\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const {TransactionModal,ModalContent} = props.classes;\r\n    const [total,setTotal] = useState(0);\r\n    const [totalSrp,setTotalSrp] = useState(0);\r\n    const [info,setInfo] = useState({\r\n        customer_name : '',\r\n        customer_address : '',\r\n        transact_payment_type : 'full',\r\n        cash_amount : 0,\r\n        transact_status : true\r\n    });\r\n\r\n    const handleClose = async (id)=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : '/settings'\r\n            }) );\r\n\r\n            if( GetSettings.fulfilled.match(resSettings) ){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const socket = io(`http://${host}:${port}`);\r\n\r\n                if( id.payload !== undefined ){\r\n                    const { transact_id } = id.payload;\r\n                    \r\n                    const resTrans = await dispatch( CreateTransactionReport({\r\n                        url : '/transactions/' + transact_id\r\n                    }) );\r\n            \r\n                    if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                        const { doc,logo } = resTrans.payload;\r\n                        let pdf = JSON.parse(doc);      \r\n        \r\n                        if( pdf.length > 0 ){                    \r\n                            pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                            const docDef = TransactionDocDef(pdf,logo);\r\n                            const docGenerator = pdfMake.createPdf(docDef);\r\n        \r\n                            docGenerator.getBase64(data=>{\r\n                                socket.emit('printcmd',{\r\n                                    sid : socket.id,\r\n                                    data,\r\n                                    id : transact_id,\r\n                                });\r\n                            });\r\n        \r\n                            docGenerator.getBlob(blob=>{\r\n                                let url = window.URL.createObjectURL(blob);                                                \r\n                                history.push('/transaction/success?pdf=' + url);\r\n                            });                    \r\n                        } \r\n                    }\r\n                }else{            \r\n                    await history.goBack();\r\n                }  \r\n            }                \r\n            setOpen(false); \r\n        }catch(err){\r\n            dispatch( OpenNotification({\r\n                message : 'Transaction Failed, Pls try again.',\r\n                severity : 'error'\r\n            }) );\r\n        }     \r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        cart.map(item=>{\r\n            let price = item.total_per_unit;\r\n            let price_srp = item.total_per_unit_srp;\r\n            setTotal( prevVal => prevVal + price)\r\n            setTotalSrp( prevVal => prevVal + price_srp );\r\n        })\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    borderRadius : '20px',\r\n                    height : '730px'\r\n                }\r\n            }}\r\n            className={TransactionModal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={ModalContent}>\r\n                    <Grid container spacing={2}>                        \r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Number of Order :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={cart.length}\r\n                                    customInput={TextField}\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Price :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={totalSrp}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    prefix=\"Php \"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Cash Change :&nbsp;                                \r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={info.cash_amount == 0 ? 0.00 : info.cash_amount - totalSrp}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                value={info.customer_name}\r\n                                onChange={(e)=>{\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            customer_name : e.target.value\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                label=\"Customer Name\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                value={info.customer_address}\r\n                                onChange={(e)=>{\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            customer_address : e.target.value\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                label=\"Customer Address\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faBuilding} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <NumberFormat \r\n                                error={(info.transact_payment_type == 'full' && info.cash_amount < total ? true : false) || (\r\n                                    info.cash_amount == 0 && info.transact_payment_type == 'partial'\r\n                                )}\r\n                                label=\"Cash Amount\"\r\n                                fullWidth\r\n                                size=\"small \"\r\n                                variant=\"outlined\"\r\n                                customInput={TextField}\r\n                                value={info.cash_amount}\r\n                                decimalScale={2}\r\n                                decimalSeparator=\".\"\r\n                                fixedDecimalScale\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBill} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                                onChange={(e)=>{\r\n                                    let cash = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            cash_amount : cash\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                select\r\n                                label=\"Payment Type\"\r\n                                value={info.transaction_payment_type}\r\n                                onChange={(e)=>{\r\n                                    let payment_type = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            transact_payment_type : payment_type \r\n                                        }\r\n                                    });\r\n                                }}\r\n                            >\r\n                                <MenuItem value=\"full\">Full Payment</MenuItem>\r\n                                <MenuItem value=\"partial\">Partial Payment</MenuItem>\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid \r\n                            item \r\n                            lg={12} \r\n                            sm={12} \r\n                            style={{ \r\n                                position : 'absolute', \r\n                                bottom : '0',\r\n                                left : '0'\r\n                            }}\r\n                        >\r\n                            <ButtonGroup\r\n                                variant=\"outlined\" \r\n                                color=\"primary\" \r\n                                aria-label=\"contained primary button group\"\r\n                            >\r\n                                <Button \r\n                                    fullWidth \r\n                                    startIcon={<FontAwesomeIcon color=\"green\" icon={faMoneyBillAlt} />}\r\n                                    onClick={ async()=>{                                        \r\n                                        \r\n                                        if( info.customer_name == '' ) return;\r\n                                        if( info.cash_amount === 0 ) return; \r\n                                        if(info.transact_payment_type == 'full' && info.cash_amount < total) return;\r\n\r\n                                        const resTrans = await dispatch( CreateTransaction({\r\n                                            values : cart.map(item=>{\r\n                                                return {\r\n                                                    ...item,                                                    \r\n                                                    customer_name : info.customer_name,\r\n                                                    customer_address : info.customer_address,\r\n                                                    total_amount : total,\r\n                                                    total_amount_srp : totalSrp,\r\n                                                    cash_amount : info.cash_amount,\r\n                                                    change_amount : info.cash_amount - total,\r\n                                                    change_amount_srp : info.cash_amount - totalSrp,\r\n                                                    transact_payment_type : info.transact_payment_type === '' ? (info.cash_amount >= total ? 'full' : 'partial') : info.transact_payment_type,\r\n                                                    transact_status : info.transact_payment_type === 'full' ? true : false\r\n                                                }\r\n                                            })\r\n                                        }) );\r\n\r\n                                        if( CreateTransaction.fulfilled.match(resTrans) ){\r\n                                            handleClose(resTrans);\r\n                                        }else if( CreateTransaction.rejected.match(resTrans) ){\r\n                                            dispatch( OpenNotification({\r\n                                                message : 'Error : ' + resTrans.payload,\r\n                                                severity : 'error'\r\n                                            }) );\r\n                                            handleClose();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Process Order\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                >Cancel</Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyle)(Transaction)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst ConnectionSlice = createSlice({\r\n    name : 'connection',\r\n    initialState : {\r\n        isConnected : false\r\n    },\r\n    reducers : {\r\n        setConnection : (state,{payload})=>{\r\n            state.isConnected = payload;\r\n        }\r\n    }\r\n});\r\nexport const { setConnection } = ConnectionSlice.actions;\r\nexport default ConnectionSlice.reducer;","import { Box, Button, Divider, Grid, IconButton, InputAdornment, Paper, Popper, TextField, Typography, withStyles } from '@material-ui/core'\r\nimport { Close, Minimize, SettingsRemote } from '@material-ui/icons'\r\nimport React, { useEffect,useState,useRef } from 'react'\r\nimport useStyles from './Styles';\r\nimport { motion } from 'framer-motion';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCog, faList, faSearch, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { io } from 'socket.io-client';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setConnection } from '../store/ConnectionSlice';\r\nimport { searchProduct, selectAllProducts } from '../../products/store/productServices';\r\nimport { useHistory } from 'react-router';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\nimport { OpenNotification } from '../store/NotificationSlice';\r\nimport Loader from './Loader';\r\nimport { productsSelector } from '../../products/store/productSlice';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport escapeStringRegexp from 'escape-string-regexp';\r\n\r\nfunction Header(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const { searchRef } = props;\r\n    const { HeaderWrap } = props.classes;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const products = useSelector(productsSelector.selectAll);\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const history = useHistory();\r\n    const [searchText,setSearchText] = useState('');\r\n    \r\n    const closeWindow = ()=>{\r\n        ipcRenderer.invoke('close');\r\n    }\r\n\r\n    const productsAutoComplete = ()=>{\r\n        return [...new Set(products.map(product=>product.item_name))];\r\n    }\r\n\r\n    const PopperCustom = (props)=>{\r\n        return <Popper {...props} style={{ left : 5,WebkitAppRegion : \"no-drag\", left : 0 }} />\r\n    }\r\n\r\n    const handleChange = (e)=>{\r\n        setSearchText(e.target.value);\r\n    }\r\n\r\n    const handleKeyPress = async (e)=>{\r\n        const filteredString = escapeStringRegexp(searchText);\r\n        console.log(filteredString);\r\n        if( e.key === 'Enter' ){\r\n            const res = await dispatch( searchProduct({\r\n                opt : {\r\n                    url : '/search/products?query=' + filteredString\r\n                }\r\n            }) );\r\n\r\n            if( searchProduct.fulfilled.match(res) ){\r\n                setSearchText('');\r\n            }\r\n        }\r\n    }\r\n  \r\n    const minimizeWindow = ()=>{\r\n        ipcRenderer.invoke('min');\r\n    }\r\n\r\n    const defaultSettings = async()=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }));\r\n\r\n            if( GetSettings.fulfilled.match(resSettings) ){\r\n                const { settings } = resSettings.payload;                \r\n\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const socket = io(`http://${host}:${port}`);\r\n\r\n                socket.on('connect',()=>{\r\n                    dispatch( setConnection(socket.connected) );\r\n                });\r\n\r\n                socket.on('disconnect',()=>{                    \r\n                    dispatch( setConnection(socket.connected) );\r\n                });\r\n\r\n                socket.on('server-printer',(printerName)=>{\r\n                    console.log(printerName);\r\n                });\r\n\r\n                socket.on('created_product',()=>{\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));\r\n                });\r\n\r\n                socket.on('updated_product',()=>{\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));\r\n                });\r\n\r\n                socket.on('deleted_product',()=>{\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));\r\n                });\r\n            }\r\n\r\n        }catch(err){\r\n            dispatch( OpenNotification({\r\n                message : \"Settings not loaded.\",\r\n                severity : \"error\"\r\n            }) );\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        defaultSettings();\r\n\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid              \r\n            item   \r\n            container\r\n            lg={12} sm={12}\r\n            className={HeaderWrap}\r\n            component={Paper}\r\n            elevation={2}\r\n            style={{\r\n                display : \"flex !important\",\r\n                flexDirection : 'row',\r\n                justifyContent : \"space-between\",\r\n                WebkitAppRegion : \"no-drag\"\r\n            }}\r\n        >\r\n            <Box\r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"40px\",\r\n                    alignSelf : \"center\",\r\n                    display : 'flex'\r\n                }}\r\n            >\r\n                <Autocomplete                     \r\n                    style={{ width : \"350px\" }}\r\n                    options={productsAutoComplete()}\r\n                    PopperComponent={PopperCustom}\r\n                    inputValue={searchText}\r\n                    onChange={(e,value)=>setSearchText(value)}\r\n                    size=\"small\"                    \r\n                    renderInput={(params)=>(\r\n                        <TextField \r\n                            fullWidth      \r\n                            variant=\"outlined\" \r\n                            label=\"Search Product\"\r\n                            inputRef={searchRef}\r\n                            value={searchText}\r\n                            InputProps={{\r\n                                startAdornment : (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <FontAwesomeIcon icon={faSearch} />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                            onChange={handleChange}\r\n                            onKeyPress={handleKeyPress}\r\n                            {...params}\r\n                        />\r\n                    )}\r\n                />    \r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />                \r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center'\r\n                    }}\r\n                >\r\n                    <IconButton                        \r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( selectAllProducts({\r\n                                opt : {\r\n                                    url : '/products'\r\n                                }\r\n                            }) );\r\n                        }}\r\n                    >                        \r\n                        <FontAwesomeIcon color=\"blue\" icon={faSyncAlt} />    \r\n                    </IconButton>                    \r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<FontAwesomeIcon icon={faList} />}\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            history.push('/translist');\r\n                        }}                        \r\n                    >\r\n                        Transactions\r\n                    </Button>\r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <SettingsRemote fontSize=\"small\" htmlColor={ connection ? \"green\" : \"maroon\" } />\r\n                    <Typography variant=\"caption\">&nbsp;{ connection ? `Connected to Server` : \"Disconnected\" }</Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box  \r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    alignSelf : \"center\"\r\n                }}\r\n            >\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={()=>{\r\n                        history.push('/settings');\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon icon={faCog} />\r\n                </IconButton>\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={minimizeWindow}\r\n                >\r\n                    <Minimize \r\n                        color=\"primary\" \r\n                    />\r\n                </IconButton>\r\n                <IconButton                     \r\n                    size=\"small\"                     \r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={closeWindow}\r\n                >\r\n                    <Close \r\n                        color=\"secondary\" \r\n                    />\r\n                </IconButton>&nbsp;&nbsp;\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Header)\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst TransServices = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const getAllTransaction = createAsyncThunk(\r\n    'transactions/getAllTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getSingleTransaction = createAsyncThunk(\r\n    'transactions/getSingleTransaction',\r\n    async(args, {rejectWithValue,dispatch})=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'transactions/createTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt,values } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const findTransaction = createAsyncThunk(\r\n    'transactions/findTransaction',\r\n    async( args, { rejectWithValue,dispatch } )=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getDocDef = createAsyncThunk(\r\n    'transactions/getDocDef',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET',\r\n                    responseType : 'blob',  \r\n                    headers: {\r\n                        Accept: 'application/pdf',\r\n                        'Content-Type': 'application/pdf',\r\n                        mode : 'no-cors'\r\n                    }\r\n                });\r\n                const url = window.URL.createObjectURL(res.data);\r\n                return url;\r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const updateTransaction = createAsyncThunk(\r\n    'transactions/updateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt,value } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'PATCH',\r\n                    data : value\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteTransaction = createAsyncThunk(\r\n    'transactions/deleteTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'DELETE'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;\r\n            }\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { faBoxes, faCalendar, faIdCard, faMarker, faMoneyBillWaveAlt, faPrint, faStop, faTrash, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Button, ButtonGroup, Fade, Grid, IconButton, InputAdornment, makeStyles, Modal, TextField } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { updateTransaction } from '../store/TransactionServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../../cart/docs/TransactionDocDef';\r\nimport {CreateTransactionReport} from '../../shared/store/ReportServices';\r\nimport { io } from 'socket.io-client';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n \r\nconst useStyles = makeStyles((theme)=>({\r\n    Modal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    ModalContent : {\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        borderRadius : \"5px\",\r\n        background : \"#ffffff\",\r\n        outline : 'none',\r\n        padding : \"25px\"   \r\n    }\r\n}));\r\n\r\nconst BtnGroupSingleTrans = (props)=>{\r\n\r\n    const { data,fn } = props;\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.report);\r\n    const [payment,setPayment] = useState({\r\n        partial_payments : 0\r\n    });\r\n    \r\n    const history = useHistory();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Grid item container lg={12} sm={12} spacing={2}>\r\n            {data.payment_type === 'partial' ? (\r\n                <Grid item lg={4} sm={4}>\r\n                    <NumberFormat\r\n                        customInput={TextField}\r\n                        fixedDecimalScale\r\n                        decimalScale={2}\r\n                        thousandSeparator\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Amount\"\r\n                        margin=\"dense\"                                        \r\n                        variant=\"outlined\"\r\n                        onChange={(e)=>{                        \r\n                            setPayment(payment=>{\r\n                                return {\r\n                                    ...payment,\r\n                                    partial_payments : parseInt(e.target.value)\r\n                                }\r\n                            })\r\n                        }}\r\n                        InputProps={{\r\n                            style : {\r\n                                color : data.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                            }, \r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <Grid \r\n                item \r\n                lg={8} \r\n                sm={8}\r\n                style={{\r\n                    display : \"flex\",\r\n                    justifyContent : \"center\",\r\n                    alignItems : \"center\"\r\n                }}\r\n            >\r\n                <ButtonGroup variant=\"contained\">\r\n                    {data.payment_type === 'partial' ? (\r\n                        <Button    \r\n                            size=\"small\"                                                                                    \r\n                            color=\"secondary\"\r\n                            style={{\r\n                                background : \"green\"\r\n                            }}\r\n                            onClick={async()=>{\r\n                                const res = await dispatch( updateTransaction({\r\n                                    opt : {\r\n                                        url : '/transactions/' + data._id\r\n                                    },\r\n                                    value : payment\r\n                                }) );\r\n\r\n                                if( updateTransaction.fulfilled.match(res) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Updated',\r\n                                        severity : 'success'\r\n                                    }) );\r\n                                }else{\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Update Failed',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                        >\r\n                            Pay\r\n                        </Button>\r\n                    ) : (\r\n                        <Button size=\"small\" disabled >Paid</Button>\r\n                    )}\r\n                    <Button \r\n                        size=\"small\"                                                                                       \r\n                        color=\"primary\"\r\n                        onClick={async ()=>{\r\n                            try{\r\n                                const resSettings = await dispatch( GetSettings({\r\n                                    url : '/settings'\r\n                                }) );\r\n\r\n                                if( GetSettings.fulfilled.match(resSettings) ){\r\n                                    const { settings } = resSettings.payload;\r\n                                    const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                                    const port = settings.port !== undefined ? settings.port : 8081;\r\n                                    const socket = io(`http://${host}:${port}`);\r\n                                    \r\n                                    const resTrans = await dispatch( CreateTransactionReport({\r\n                                        url : '/transactions/' + data._id\r\n                                    }) );\r\n        \r\n                                    if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                                        const { doc,logo } = resTrans.payload;\r\n                                        let pdf = JSON.parse(doc);                                                              \r\n        \r\n                                        if( pdf.length > 0 ){\r\n                                            pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                                            const docDef = TransactionDocDef(pdf,logo);\r\n                                            const docGenerator = pdfMake.createPdf(docDef);\r\n        \r\n                                            docGenerator.getBase64(data64=>{\r\n                                                socket.emit('printcmd',{\r\n                                                    sid : socket.id,\r\n                                                    data : data64,\r\n                                                    id : data._id,\r\n                                                });\r\n                                            });\r\n        \r\n                                            docGenerator.getBlob(blob=>{\r\n                                                const url = window.URL.createObjectURL(blob);                        \r\n                                                history.push('/transaction/success?pdf=' + url + \"&page=transaction\");\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                                \r\n                            }catch(err){\r\n                                dispatch( OpenNotification({\r\n                                    message : 'Cannot Print Transaction, please try again.',\r\n                                    severity : 'error'\r\n                                }) );\r\n                            }                            \r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={faPrint} />}\r\n                    >\r\n                        Print\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        color=\"secondary\"\r\n                        onClick={()=>{\r\n                            history.push(\"/transaction/delete/\" + data._id);\r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        style={{\r\n                            background : \"orange\"\r\n                        }}\r\n                        onClick={fn}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction TransactionSingle(props) {\r\n\r\n    const { inOpen,onClose,data : transaction } = props;\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const classes = useStyles();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={inOpen}\r\n            onClose={onClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={inOpen}\r\n            >\r\n                <div className={classes.ModalContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Receipt No\"\r\n                                value={transaction._id}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faIdCard} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Customer\"\r\n                                value={transaction.customer_name}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label=\"Item in cart\"\r\n                                value={transaction.cart_count}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faBoxes} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                fullWidth\r\n                                label=\"Transaction Date\"\r\n                                value={new Date(transaction.transaction_date).toISOString().split('T')[0]}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faCalendar} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={5} sm={5}>\r\n                            <TextField \r\n                                size=\"small\"                                \r\n                                fullWidth\r\n                                label=\"Payment Type\"\r\n                                value={transaction.payment_type}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={7} sm={7}>\r\n                            <NumberFormat\r\n                                customInput={TextField}\r\n                                fixedDecimalScale\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                decimalScale={2}\r\n                                thousandSeparator\r\n                                allowNegative={false}\r\n                                prefix=\"Php \" \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label={transaction.payment_type == 'partial' ? \"Remaining Balance\" : \"Change Amount\"}\r\n                                value={transaction.change_amount}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <BtnGroupSingleTrans fn={onClose} data={transaction} />\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TransactionSingle\r\n","import { TableCell, TableRow } from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport React, { useState } from 'react'\r\nimport TransactionSingle from './TransactionSingle';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TransactionItems({transaction}) {\r\n\r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleOpen = ()=>{\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n    \r\n    return (\r\n        <TableRow\r\n            key={transaction._id}\r\n            hover\r\n            onDoubleClick={handleOpen}\r\n            style={{ \r\n                background : transaction.payment_type == 'partial' ? '#fafafa' : '',\r\n                cursor : 'pointer',\r\n                userSelect : 'none'\r\n            }}\r\n        >\r\n            <TableCell>{transaction.customer_name}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.cart_count}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.transaction_date.split('T')[0]}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.payment_type}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.cash_amount}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.total_price_srp}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.change_amount_srp}\r\n                    thousandSeparator\r\n                    allowNegative={false}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TransactionSingle data={transaction} inOpen={open} onClose={handleClose} />\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default TransactionItems\r\n","import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    AppBar, \r\n    Dialog, \r\n    Grid, \r\n    IconButton, \r\n    InputAdornment, \r\n    makeStyles, \r\n    Paper, \r\n    Slide, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow, \r\n    TextField, \r\n    Toolbar \r\n} from '@material-ui/core';\r\nimport { KeyboardDatePicker,MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { forwardRef, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { findTransaction, getAllTransaction } from '../store/TransactionServices';\r\nimport TransactionItems from './TransactionItems';\r\nimport Loader from '../../shared/components/Loader';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    appBar : {\r\n        position : 'relative',\r\n        background : \"#ffffff\"\r\n    }\r\n}));\r\n\r\nconst TransitionDialog = forwardRef((props,ref)=>{\r\n    return(\r\n        <Slide \r\n            direction=\"up\"\r\n            ref={ref}\r\n            {...props}            \r\n        />\r\n    )\r\n});\r\n\r\nfunction TransactionList(props) {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { entities : transactions } = useSelector(state=>state.transactions);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    \r\n    const [open,setOpen] = useState(false);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const [search,setSearch] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleClose = ()=>{\r\n        setOpen(false);\r\n        history.goBack();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        dispatch( getAllTransaction({\r\n            opt : {\r\n                url : '/transactions'\r\n            }\r\n        }) );\r\n    },[]);\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date(Date.now()).toLocaleDateString());\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(new Date(date));\r\n        let selDate = new Date(date);\r\n        dispatch( findTransaction({\r\n            opt : {\r\n                url : `/search/transactions?date=${selDate}`\r\n            }\r\n        }) )\r\n    };\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Dialog\r\n            fullScreen\r\n            open={open}\r\n            onClose={handleClose}\r\n            TransitionComponent={TransitionDialog}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"700px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            style={{\r\n                WebkitAppRegion : \"no-drag\",\r\n                padding : \"20px\",\r\n                height : \"660px\",\r\n                borderRadius : \"10px\"\r\n            }}\r\n        >   \r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar \r\n                    style={{\r\n                        justifyContent : 'space-between'\r\n                    }}\r\n                >\r\n                    <TextField \r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        label=\"Search\"\r\n                        InputProps={{\r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        style={{\r\n                            flexBasis : \"220px\",\r\n                            flex : 2,\r\n                            marginRight : \"10px\"\r\n                        }}\r\n                        onKeyDown={(e)=>{\r\n                            setSearch(e.target.value);\r\n                        }}\r\n                        onKeyPress={(e)=>{\r\n                            if( e.key === 'Enter' ){\r\n                                dispatch( findTransaction({\r\n                                    opt : {\r\n                                        url : `/search/transactions?s=${search}`\r\n                                    }\r\n                                }) )\r\n                            }\r\n                        }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"yyyy-dd-MM\"\r\n                        size=\"small\"\r\n                        margin=\"dense\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Filter Date\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          'aria-label': 'change date',\r\n                        }}\r\n                        style={{\r\n                            alignSelf : \"flex-start\",\r\n                            flex : 1\r\n                        }}\r\n                    />\r\n                    <IconButton focusRipple={false} style={{ margin : \"0px 8px\" }} size=\"small\" onClick={handleClose}>\r\n                        <Close color=\"secondary\" />\r\n                    </IconButton>                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container>\r\n                <Grid item lg={12} sm={12} style={{ padding : \"30px\" }}>\r\n                    <TableContainer\r\n                        component={Paper}\r\n                        elevation={2}\r\n                        style={{\r\n                            minHeight : \"500px\",\r\n                            position : \"relative\"\r\n                        }}\r\n                    >\r\n                        <Table \r\n                            stickyHeader \r\n                            size=\"medium\"\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{ fontWeight : 600 }}>Customer Name</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>In cart</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Transaction date</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Payment Type</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Cash Amount</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Total</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Change</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {transactions.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(entry=>(\r\n                                    <TransactionItems transaction={entry} />\r\n                                ))}\r\n                                <TableRow style={{ position : \"absolute\", bottom : 0, right : 0 }} >\r\n                                    <TablePagination \r\n                                        rowsPerPageOptions={[8, 16, 800]}\r\n                                        count={transactions.length}\r\n                                        rowsPerPage={rowsPerPage}\r\n                                        page={page}\r\n                                        onChangePage={handleChangePage}\r\n                                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                        labelRowsPerPage={false}\r\n                                    />\r\n                                </TableRow>\r\n                            </TableBody>                            \r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>            \r\n        </Dialog>\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nexport default TransactionList\r\n","import React,{ useEffect,useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { Modal,Backdrop,Fade, Fab } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport Styles from './Styles';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { Close } from '@material-ui/icons';\r\n\r\nexport const useQuery = ()=>{\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction SuccessPage(props) {\r\n\r\n    const history = useHistory();\r\n    const [open,setOpen] = useState(false);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const { loading : rptLoad } = useSelector(state=>state.report);\r\n    const query = useQuery();\r\n    const pdf = query.get('pdf');\r\n    const page = query.get('page');\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        \r\n        if( page === 'transaction' ){\r\n            history.goBack();\r\n        }else{\r\n            history.push('/');\r\n        }\r\n\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{        \r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading || rptLoad ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={classes.SuccessPageModal}>\r\n                    <Fab\r\n                        size=\"small\"\r\n                        variant=\"circular\"\r\n                        onClick={handleClose}\r\n                        style={{\r\n                            position : \"absolute\",\r\n                            left : 15,\r\n                            top : 8,          \r\n                            WebkitAppRegion : \"no-drag\"          \r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </Fab>\r\n                    <iframe                         \r\n                        style={{\r\n                            border : \"none\",    \r\n                            WebkitAppRegion : 'no-drag'                        \r\n                        }} \r\n                        onClick={handleClose}                         \r\n                        src={pdf+'#toolbar=1'} \r\n                        width=\"100%\" \r\n                        height=\"100%\"\r\n                    ></iframe>\r\n                </div>                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(SuccessPage)\r\n","const useStyles = {\r\n    SettingsModal : {\r\n        WebkitAppRegion : \"no-drag\",\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        outline : \"none\",\r\n        borderRadius : \"15px\"\r\n    },\r\n    SettingsContent : {\r\n        backgroundColor : \"#ffffff\",\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        outline : \"none\",\r\n        padding : \"20px\"\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { faCog, faNetworkWired } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal,Backdrop,withStyles, Fade, Grid, TextField, InputAdornment, Button } from '@material-ui/core';\r\nimport { Dns, UsbRounded } from '@material-ui/icons';\r\nimport React,{useEffect,useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { SetIPAddress } from '../store/SettingsServices';\r\nimport Styles from './Styles';\r\n\r\nfunction Settings(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const [open,setOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const { settings } = useSelector(state=>state.settings.entities);\r\n    const [ipAdd,setIpAdd] = useState(settings.address);\r\n    const [port,setPort] = useState(settings.port);\r\n    const history = useHistory();\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleRestart = ()=>{\r\n        ipcRenderer.invoke('restart');\r\n    }\r\n\r\n    const handlePortChange = (e)=>{\r\n        setPort(e.target.value);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.SettingsModal}\r\n        >\r\n            <Fade\r\n                in={open}                        \r\n            >\r\n                <div className={classes.SettingsContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField\r\n                                value={ipAdd}\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Host Address\"\r\n                                placeholder=\"0.0.0.0\"\r\n                                onChange={(e)=>{\r\n                                    setIpAdd(e.target.value)\r\n                                }}\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <Dns />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Port\"       \r\n                                value={port}\r\n                                onChange={handlePortChange}       \r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <UsbRounded />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={6} sm={6}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                size=\"medium\"\r\n                                startIcon={<FontAwesomeIcon icon={faCog} />}\r\n                                onClick={ async(e)=>{\r\n                                    \r\n                                    const resSettings = await dispatch(SetIPAddress({\r\n                                        url : \"/settings\",\r\n                                        data : {\r\n                                            address : ipAdd,\r\n                                            port : parseInt(port)\r\n                                        }\r\n                                    }));\r\n                                    \r\n                                    if( SetIPAddress.fulfilled.match(resSettings) ){\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Settings has been saved.\",\r\n                                            severity : \"success\"\r\n                                        }) );\r\n                                        history.push('/');\r\n                                        handleRestart();\r\n                                    }else{\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Please run application as `Administrator`\\nSettings not save.\",\r\n                                            severity : \"error\"\r\n                                        }) );\r\n                                    }\r\n\r\n                                }}\r\n                            >Save</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Settings)\r\n","const useStyles = {\r\n    Modal : {\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        outline : \"none\"\r\n    },\r\n    ModalContent : {\r\n        background : \"#ffffff\",\r\n        height : \"auto\",\r\n        width : \"350px\",\r\n        outline : \"none\",\r\n        padding : \"30px\"\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal,Fade,Backdrop, Grid,withStyles, Button } from '@material-ui/core';\r\nimport React,{ useEffect,useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { loadingSelector } from '../../products/store/productSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { deleteTransaction } from '../store/TransactionServices';\r\nimport Styles from './Styles';\r\n\r\nfunction TransactionDeleteModal(props) {\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const { classes } = props;\r\n    const dispatch = useDispatch();\r\n    const {loading} = useSelector(state=>state.transactions);\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal            \r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <Grid container className={classes.ModalContent} spacing={2}>\r\n                    <Grid item lg={12} sm={12}>\r\n                        <h4\r\n                            style={{\r\n                                textAlign : \"center\"\r\n                            }}\r\n                        >Delete transaction entry?</h4>                        \r\n                    </Grid>\r\n                    <Grid item lg={6} sm={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            startIcon={<FontAwesomeIcon icon={faTrash} />}\r\n                            onClick={ async()=>{\r\n                                const resTrans = await dispatch( deleteTransaction({\r\n                                    opt : {\r\n                                        url : \"/transactions/\" + id\r\n                                    }\r\n                                }) );\r\n\r\n                                if( deleteTransaction.fulfilled.match(resTrans) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : \"Transaction has been deleted.\",\r\n                                        severity : \"success\"\r\n                                    }) );\r\n                                    handleClose();\r\n                                }else{\r\n                                    dispatch(OpenNotification({\r\n                                        message : \"Error deleting transaction.\",\r\n                                        severity : \"error\"\r\n                                    }));\r\n                                }\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item lg={6} sm={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleClose}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(TransactionDeleteModal)\r\n","import React,{useEffect,useRef} from 'react';\nimport { BrowserRouter as Router,Switch, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Index';\nimport ProductsList from './products/components/ProductsList';\nimport { Grid, withStyles } from '@material-ui/core';\nimport useStyles from './Styles';\nimport Toast from './shared/components/Toast';\nimport { useDispatch } from 'react-redux';\nimport { CloseNotification } from './shared/store/NotificationSlice';\nimport Transaction from './cart/components/Transaction';\nimport Header from './shared/components/Header';\nimport TransactionList from './transactions/components/TransactionList';\nimport SuccessPage from './cart/components/SuccessPage';\nimport Settings from './settings/components/settings';\nimport TransactionDeleteModal from './transactions/components/TransactionDeleteModal';\n\nfunction App(props) {\n\n  const dispatch = useDispatch();\n  const { root,ContainerWrap } = props.classes;\n  const searchRef = useRef(null);\n  const focusSearch = ()=>{\n      searchRef.current.focus();\n  }\n\n  useEffect(()=>{\n\n      document.addEventListener('keydown',(e)=>{\n          if( e.ctrlKey && e.key == 'f' ){\n              focusSearch();\n          }\n      });\n\n      return ()=>{\n        document.removeEventListener('keydown',(e)=>{          \n            if( e.ctrlKey && e.key == 'f' ){\n                focusSearch();\n            }\n        });\n      }      \n\n  },[]);\n\n  const handleClose = ()=>{\n      dispatch( CloseNotification() );\n  }\n\n  return (\n    <Router>\n    <Grid style={{ WebkitAppRegion : 'drag' }} container dicrection=\"column\" className={root} spacing={3}>\n        <Header searchRef={searchRef} />\n        <Grid item lg={12} sm={12} className={ContainerWrap}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Dashboard />\n                </Route>\n                <Route exact path=\"/products\" >\n                    <ProductsList />\n                </Route>\n                <Route exact path=\"/transaction\">\n                    <Transaction />\n                </Route>\n                <Route exact path=\"/transaction/success\">\n                    <SuccessPage />\n                </Route>\n                <Route exact path=\"/translist\">\n                    <TransactionList />\n                </Route>\n                <Route exact path=\"/transaction/delete/:id\">\n                    <TransactionDeleteModal />\n                </Route>\n                <Route exact path=\"/settings\" >\n                    <Settings />\n                </Route>\n            </Switch>\n            <Toast\n                handleCloseToast={handleClose}\n            />\n        </Grid>\n    </Grid>\n    </Router>\n  );\n}\n\nexport default withStyles(useStyles)(App);","import { createSlice } from '@reduxjs/toolkit';\r\nimport { createTransaction, deleteTransaction, findTransaction, getAllTransaction,getDocDef,updateTransaction } from './TransactionServices';\r\n\r\nconst transactionSlice = createSlice({\r\n    name : 'transactions',\r\n    initialState : {\r\n        entities : [],\r\n        pdf : [],\r\n        loading : false,\r\n        errors : null\r\n    },\r\n    reducers : {},\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL TRANSACTIONS\r\n        builder.addCase(getAllTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getAllTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(getAllTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //FIND TRANSACTION\r\n        .addCase(findTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(findTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(findTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //GET DOCUMENT DEFINITION FOR PRINT\r\n        .addCase(getDocDef.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getDocDef.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.pdf = payload;\r\n        })\r\n        .addCase(getDocDef.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        .addCase(createTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(createTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities[payload._id] = payload;\r\n        })\r\n        .addCase(createTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //UPDATE TRANSACTION\r\n        .addCase(updateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(updateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(updateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //DELETE TRANSACTION\r\n        .addCase(deleteTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(deleteTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(deleteTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default transactionSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { CreateTransactionReport } from './ReportServices';\r\n\r\nconst ReportSlice = createSlice({\r\n    name : 'report',\r\n    initialState : {\r\n        doc : '',\r\n        loading : false,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder =>{\r\n        builder.addCase( CreateTransactionReport.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransactionReport.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.doc = payload;\r\n        })\r\n        .addCase(CreateTransactionReport.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default ReportSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { GetSettings, SetIPAddress } from './SettingsServices';\r\n\r\nconst SettingsSlice = createSlice({\r\n    name : 'settings',\r\n    initialState : {\r\n        entities : [],\r\n        loading : true,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder=>{\r\n        //SET HOST IP ADDRESS\r\n        builder.addCase( SetIPAddress.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(SetIPAddress.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(SetIPAddress.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //GET SETTINGS\r\n        .addCase(GetSettings.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(GetSettings.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(GetSettings.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default SettingsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport ProductReducers from '../../products/store/productSlice';\r\nimport CartReducer from '../../cart/store/CartSlice';\r\nimport NotificationReducer from './NotificationSlice';\r\nimport TransactionReducer from '../../transactions/store/TransactionSlice';\r\nimport ConnectionReducer from './ConnectionSlice';\r\nimport ReportReducer from './ReportSlice';\r\nimport SettingsReducer from '../../settings/store/SettingsSlice';\r\n\r\nexport default configureStore({\r\n    reducer : {\r\n        settings : SettingsReducer,\r\n        products : ProductReducers,\r\n        cart : CartReducer,\r\n        notifications : NotificationReducer,\r\n        transactions : TransactionReducer,\r\n        connection : ConnectionReducer,   \r\n        report : ReportReducer     \r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './shared/store/MainStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}