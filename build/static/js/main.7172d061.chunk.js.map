{"version":3,"sources":["shared/components/Styles.js","shared/components/Loader.js","shared/store/NotificationSlice.js","settings/store/SettingsServices.js","cart/store/CartServices.js","cart/store/CartSlice.js","cart/components/CartItems.js","cart/components/Cart.js","products/store/productServices.js","products/store/productSlice.js","products/components/ProductItem.js","products/components/ProductsList.js","components/Dashboard/Styles.js","components/Dashboard/Index.js","Styles.js","shared/components/Toast.js","cart/components/Styles.js","shared/store/ReportServices.js","cart/docs/TransactionDocDef.js","cart/components/Transaction.js","shared/store/ConnectionSlice.js","shared/components/Header.js","transactions/store/TransactionServices.js","transactions/components/TransactionSingle.js","transactions/components/TransactionItems.js","transactions/components/TransactionList.js","cart/components/SuccessPage.js","settings/components/Styles.js","settings/components/settings.js","transactions/components/Styles.js","transactions/components/TransactionDeleteModal.js","cart/components/AddQty.js","App.js","transactions/store/TransactionSlice.js","shared/store/ReportSlice.js","settings/store/SettingsSlice.js","shared/store/MainStore.js","index.js"],"names":["useStyles","ProgressWrap","top","left","display","position","justifyContent","flexDirection","alignItems","zIndex","backgroundColor","height","width","transition","borderRadius","HeaderWrap","padding","WebkitAppRegion","withStyles","props","classes","useState","progress","className","CircularProgress","size","style","textAlign","color","letterSpacing","NotificationSlice","createSlice","initialState","open","message","severity","reducers","OpenNotification","state","payload","CloseNotification","actions","SettingsServices","axios","create","baseURL","timeout","sleep","x","Promise","resolve","setTimeout","SetIPAddress","createAsyncThunk","args","a","rejectWithValue","url","data","method","res","response","GetSettings","CartService","CreateTransaction","dispatch","resSettings","fulfilled","match","settings","host","undefined","address","port","values","cartAdapter","createEntityAdapter","selectId","prod","_id","CartSlice","name","getInitialState","cart","loading","error","addItem","index","findIndex","item_name","discount","item_price","item_qty","inventory_qty","item_unit","item_srp","qty","calcDiscount","total_qty_price","parseInt","total_qty_srp","withDiscount_per_unit","withDiscount_per_unit_srp","total_per_unit","total_per_unit_srp","unshift","updateQty","val","NaN","setDiscount","total","total_srp","removeItem","splice","extraReducers","builder","addCase","pending","rejected","selectCart","cartItems","createDraftSafeSelector","cartLoading","CartItems","item","useDispatch","setTotal","totalSrp","setTotalSrp","history","useSelector","useHistory","useEffect","TableRow","id","hover","component","motion","tr","title","initial","y","opacity","animate","onDoubleClick","push","cursor","TableCell","fontSize","colSpan","icon","faBoxes","substring","thousandSeparator","displayType","value","decimalScale","decimalSeparator","fixedDecimalScale","IconButton","onClick","faTrashAlt","Cart","items","setItems","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","Paper","elevation","minHeight","Table","stickyHeader","TableHead","TableBody","slice","map","bottom","Button","variant","startIcon","faShoppingBag","length","errors","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","target","labelRowsPerPage","ProdServices","selectAllProducts","opt","searchProduct","selectSingleProduct","productsAdapter","sortComparer","createdAt","productSlice","selectedProd","clearProducts","entities","setAll","addOne","loadingSelector","products","productsSelector","getSelectors","ProductItem","item_type","item_brand","faBox","allowNegative","customInput","TextField","faPlusCircle","ProductsList","selectAll","settingsLoading","connection","isConnected","aria-label","product","Dashboard","infoBlock","background","ContentBlock","Styles","Grid","container","spacing","direction","lg","sm","body","margin","overflow","html","root","ContainerWrap","Toast","handleCloseToast","notifications","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","right","Alert","useStyle","TransactionModal","ModalContent","outline","SuccessPageModal","ModalCartContent","AddQTYModal","AddDiscountModal","ReportServices","CreateTransactionReport","formatter","Intl","NumberFormat","currency","pdfmake","fonts","Courier","normal","bold","italics","bolditalics","Times","Arial","Epson","Charlie_dotted","DOT_MATRIX","FAKE_RECEIPT","docs","logoURL","customer_name","customer_address","transaction_date","total_amount","change_amount","cash_amount","discountArr","doc","less","price","Date","date","toLocaleDateString","transact_type","reduce","b","pageSize","pageMargins","compress","header","currentPage","columns","image","stack","text","alignment","footer","pageCount","table","widths","headerRows","format","font","border","content","dontBreakRows","layout","hLineWidth","i","node","hLineHeight","paddingBottom","colIndex","positions","currentPosition","pageInnerHeight","styles","subheader","tableHeader","tableItems","tableItemsAmount","defaultStyle","columnGap","useLocation","setOpen","autoPrint","setAutoPrint","transact_payment_type","transact_status","info","setInfo","handleClose","socket","io","transact_id","resTrans","logo","pdf","JSON","parse","pdfMake","vfs","pdfFonts","docDef","TransactionDocDef","docGenerator","createPdf","getBase64","emit","sid","getBlob","blob","window","URL","createObjectURL","goBack","price_srp","prevVal","Modal","BackdropComponent","Backdrop","BackdropProps","Fade","in","Typography","fullWidth","label","InputProps","startAdornment","InputAdornment","faDollarSign","prefix","onChange","e","faUserTie","faBuilding","faMoneyBill","cash","select","transaction_payment_type","payment_type","MenuItem","FormControl","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","ButtonGroup","faMoneyBillAlt","total_amount_srp","change_amount_srp","ConnectionSlice","setConnection","ipcRenderer","require","searchRef","searchText","setSearchText","handleChange","handleKeyPress","filteredString","escapeStringRegexp","console","log","key","defaultSettings","on","connected","printerName","Box","alignSelf","Autocomplete","options","Set","PopperComponent","Popper","inputValue","renderInput","params","inputRef","faSearch","onKeyPress","Divider","orientation","flexItem","faSyncAlt","justifySelf","faList","SettingsRemote","htmlColor","div","whileHover","scale","faCog","invoke","Minimize","Close","TransServices","getAllTransaction","createTransaction","findTransaction","getDocDef","responseType","headers","Accept","mode","updateTransaction","deleteTransaction","makeStyles","theme","BtnGroupSingleTrans","fn","report","partial_payments","payment","setPayment","faMoneyBillWaveAlt","disabled","faEye","data64","faPrint","TransactionSingle","inOpen","transaction","transactions","faIdCard","cart_count","toISOString","split","faCalendar","TransactionItems","userSelect","total_price_srp","appBar","TransitionDialog","forwardRef","ref","Slide","TransactionList","search","setSearch","now","selectedDate","setSelectedDate","utils","DateFnsUtils","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","flexBasis","flex","marginRight","onKeyDown","disableToolbar","selDate","KeyboardButtonProps","focusRipple","fontWeight","entry","rptLoad","query","URLSearchParams","get","Fab","src","SettingsModal","SettingsContent","ipAdd","setIpAdd","setPort","placeholder","Dns","UsbRounded","useParams","faTrash","setQTY","itemDiscount","setItemDiscount","err","setErr","location","cartQuantity","arrCurrentCart","filter","itm","errMessage","handleSaveEvent","useCallback","saveBtn","document","getElementById","code","click","addEventListener","removeEventListener","closeAfterTransition","inputProps","autoFocus","helperText","faSave","preventDefault","handleSave","useRef","focusSearch","current","focus","ctrlKey","dicrection","exact","path","transactionSlice","ReportSlice","SettingsSlice","configureStore","reducer","SettingsReducer","ProductReducers","CartReducer","NotificationReducer","TransactionReducer","ConnectionReducer","ReportReducer","ReactDOM","render","store"],"mappings":"0SAwBeA,EAxBG,CACdC,aAAe,CACXC,IAAM,EACNC,KAAO,EACPC,QAAU,OACVC,SAAU,QACVC,eAAiB,SACjBC,cAAgB,SAChBC,WAAa,SACbC,OAAS,IACTC,gBAAkB,qBAClBC,OAAQ,QACRC,MAAQ,OACRC,WAAa,mBACbC,aAAe,QAEnBC,WAAa,CACTJ,OAAS,OACTK,QAAU,WACVF,aAAe,OACfG,gBAAkB,S,OCGXC,kBAAWlB,EAAXkB,EAnBf,SAAgBC,GAEZ,IAAQC,EAAYD,EAAZC,QACR,EAA+BC,mBAAS,WAAxC,mBAAOC,EAAP,KAEA,OAFA,KAGI,sBAAKC,UAAWH,EAAQnB,aAAxB,UACI,cAACuB,EAAA,EAAD,CAAkBC,KAAM,KACxB,oBACIC,MAAO,CACHC,UAAY,SACZC,MAAQ,QACRC,cAAgB,QAJxB,SAMEP,U,QChBRQ,EAAoBC,YAAY,CAClC,KAAS,gBACTC,aAAe,CACXC,MAAO,EACPC,QAAU,GACVC,SAAW,IAEfC,SAAW,CACPC,iBAAmB,SAACC,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACvBD,EAAML,MAAO,EACbK,EAAMH,SAAWI,EAAQJ,SACzBG,EAAMJ,QAAUK,EAAQL,SAE5BM,kBAAoB,SAACF,EAAD,GAAmB,EAAXC,QACxBD,EAAML,MAAO,EACbK,EAAMH,SAAW,GACjBG,EAAMJ,QAAU,OAKrB,EAA+CJ,EAAkBW,QAAzDJ,EAAR,EAAQA,iBAAiBG,EAAzB,EAAyBA,kBAEjBV,IAAf,Q,yCCrBMY,EAAmBC,IAAMC,OAAO,CAClCC,QAFS,4BAGTC,QAAU,MAGRC,EAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAWC,WAAWD,EAAQF,OAGxCI,EAAeC,YACxB,wBADwC,uCAExC,WAAMC,EAAN,wBAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAZ,SAEgBC,EAAaH,EAAbG,IAAIC,EAASJ,EAATI,KAFpB,SAG0BhB,EAAiB,CAC/Be,MACAE,OAAS,QACTD,SANZ,cAGcE,EAHd,gBAQcb,EAAM,KARpB,gCASea,EAAIF,MATnB,2DAWeF,EAAgB,KAAIK,SAASH,OAX5C,0DAFwC,yDAkB/BI,EAAcT,YACvB,uBADuC,uCAEvC,WAAMC,EAAN,sBAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAZ,SAEgBC,EAAQH,EAARG,IAFhB,SAG0Bf,EAAiB,CAC/Be,MACAE,OAAS,QALrB,cAGcC,EAHd,yBAOeA,EAAIF,MAPnB,yDASeF,EAAgB,KAAIK,SAASH,OAT5C,yDAFuC,yDC1BrCK,EAAcpB,IAAMC,OAAO,CAC7BE,QAAU,MAGRC,EAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAEC,WAAWD,EAAQF,OAGtCgB,EAAoBX,YAC7B,yBAD6C,uCAE7C,WAAMC,EAAN,gCAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAgBS,EAA5B,EAA4BA,SAA5B,kBAGkCA,EAAUH,EAAY,CAC5CL,IAAM,eAJlB,UAGcS,EAHd,QAOWJ,EAAYK,UAAUC,MAAMF,GAPvC,wBAQoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KAEnDC,EAAWpB,EAAXoB,OAZpB,UAa8BX,EAAY,CAC1BlB,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPhB,IAAM,gBACNE,OAAS,OACTD,KAAOgB,IAjBvB,eAakBd,EAblB,iBAmBkBb,EAAM,KAnBxB,iCAoBmBa,EAAIF,MApBvB,mFAuBeF,EAAgB,KAAIK,SAASH,OAvB5C,0DAF6C,yDCV3CiB,EAAcC,YAAoB,CACpCC,SAAW,SAAAC,GAAI,OAAEA,EAAKC,OAGpBC,EAAYjD,YAAY,CAC1BkD,KAAO,OACPjD,aAAe2C,EAAYO,gBAAgB,CACvCC,KAAO,GACPC,SAAU,EACVC,MAAQ,KAEZjD,SAAW,CACPkD,QAAU,SAAChD,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAERgD,EAAQjD,EAAM6C,KAAKK,WAAU,SAAAV,GAAI,OAAEA,EAAKC,MAAQxC,EAAQwC,OAG1DA,EAQAxC,EARAwC,IACAU,EAOAlD,EAPAkD,UACAC,EAMAnD,EANAmD,SACAC,EAKApD,EALAoD,WACAC,EAIArD,EAJAqD,SACAC,EAGAtD,EAHAsD,cACAC,EAEAvD,EAFAuD,UACAC,EACAxD,EADAwD,SAGEC,EAAMJ,EACNK,EAAeP,EAAW,IAEhC,IAAe,IAAXH,EAAe,CAEf,IAAMW,GAAmBC,SAAS7D,EAAM6C,KAAKI,GAAOS,KAAOG,SAASH,IAAQL,EACtES,GAAiBD,SAAS7D,EAAM6C,KAAKI,GAAOS,KAAOG,SAASH,IAAQD,EAEpEM,EAAuD,IAA/B/D,EAAM6C,KAAKI,GAAOG,SAAiBQ,EAAmBA,EAAkB5D,EAAM6C,KAAKI,GAAOG,SAAYQ,EAC9HI,EAA2D,IAA/BhE,EAAM6C,KAAKI,GAAOG,SAAiBU,EAAkBA,EAAgB9D,EAAM6C,KAAKI,GAAOG,SAAaU,EAEtI9D,EAAM6C,KAAKI,GAAOS,IAAMG,SAAS7D,EAAM6C,KAAKI,GAAOS,KAAOG,SAASH,GACnE1D,EAAM6C,KAAKI,GAAOgB,eAAiBF,EACnC/D,EAAM6C,KAAKI,GAAOiB,mBAAqBF,EAEnCN,EAAMH,IACNvD,EAAM6C,KAAKI,GAAOF,OAAQ,OAG7B,CAED,IAAMa,EAAkBF,EAAML,EACxBS,EAAgBJ,EAAMD,EAEtBM,EAAyC,IAAjBJ,EAAqBC,EAAmBA,EAAkBD,EAAgBC,EAClGI,EAA6C,IAAjBL,EAAqBG,EAAkBA,EAAgBH,EAAiBG,EAE1G9D,EAAM6C,KAAKsB,QAAQ,CACf1B,MACAU,YACAE,aACAI,WACAF,gBACAR,OAAQ,EACRW,MACAN,SAAWO,EACXM,eAAiBF,EACjBG,mBAAqBF,EACrBR,gBAIZY,UAAY,SAACpE,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAGZwC,EAKAxC,EALAwC,IACAiB,EAIAzD,EAJAyD,IACAL,EAGApD,EAHAoD,WACAE,EAEAtD,EAFAsD,cACAE,EACAxD,EADAwD,SAGER,EAAQjD,EAAM6C,KAAKK,WAAU,SAAAV,GAAI,OAAEA,EAAKC,MAAQA,KAElD4B,EAAcC,MAARZ,EAAc,EAAIG,SAASH,GACjCE,EAAkBS,EAAMhB,EACxBS,EAAgBO,EAAMZ,GAEX,IAAXR,IACAjD,EAAM6C,KAAKI,GAAOS,IAAMW,EACxBrE,EAAM6C,KAAKI,GAAOgB,eAAgD,IAA/BjE,EAAM6C,KAAKI,GAAOG,SAAiBQ,EAAoBA,EAAmB5D,EAAM6C,KAAKI,GAAOG,SAAYQ,EAC3I5D,EAAM6C,KAAKI,GAAOiB,mBAAoD,IAA/BlE,EAAM6C,KAAKI,GAAOG,SAAiBU,EAAkBA,EAAiB9D,EAAM6C,KAAKI,GAAOG,SAAYU,EAGvI9D,EAAM6C,KAAKI,GAAOF,MADlBsB,EAAMd,IASlBgB,YAAc,SAACvE,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAEdwC,EAKAxC,EALAwC,IACAW,EAIAnD,EAJAmD,SACAC,EAGApD,EAHAoD,WACAI,EAEAxD,EAFAwD,SACAC,EACAzD,EADAyD,IAGET,EAAQjD,EAAM6C,KAAKK,WAAU,SAAAV,GAAI,OAAEA,EAAKC,MAAQA,KAChDkB,EAAeP,EAAW,IAC1BoB,EAAQnB,EAAaK,EACrBe,EAAYhB,EAAWC,GAEf,IAAXT,IACCjD,EAAM6C,KAAKI,GAAOG,SAAWO,EAC7B3D,EAAM6C,KAAKI,GAAOgB,eAA8B,IAAbb,EAAiBoB,EAASA,EAAQb,EAAgBN,EAAaK,EAClG1D,EAAM6C,KAAKI,GAAOiB,mBAAkC,IAAbd,EAAiBqB,EAAaA,EAAYd,EAAgBF,EAAWC,IAIpHgB,WAAa,SAAC1E,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACXgD,EAAQjD,EAAM6C,KAAKK,WAAU,SAAAV,GAAI,OAAEA,EAAKC,MAAQxC,KACtDD,EAAM6C,KAAK8B,OAAO1B,EAAM,KAGhC2B,cAAgB,SAACC,GACbA,EAAQC,QAASpD,EAAkBqD,SAAQ,SAAA/E,GACvCA,EAAM8C,SAAU,KAEnBgC,QAASpD,EAAkBG,WAAU,SAAC7B,EAAD,GAAmB,EAAXC,QAC1CD,EAAM8C,SAAU,EAChB9C,EAAM6C,KAAO,MAEhBiC,QAASpD,EAAkBsD,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACzCD,EAAM8C,SAAU,EAChB9C,EAAM+C,MAAQ9C,QAKpBgF,EAAa,SAACjF,GAAD,OAASA,EAAM6C,MACrBqC,EAAYC,YACrBF,GACA,SAAAjF,GAAK,OAAEA,EAAM6C,QAEJuC,EAAcD,YACvBF,GACA,SAAAjF,GAAK,OAAEA,EAAM8C,WAEV,EAAqDJ,EAAUvC,QAAvD6C,EAAR,EAAQA,QAAQ0B,EAAhB,EAAgBA,WAAWN,EAA3B,EAA2BA,UAAUG,GAArC,EAAqCA,YAC7B7B,KAAf,Q,6BCpEe2C,OA1Ef,YAA4B,IAARC,EAAO,EAAPA,KAEV3D,EAAW4D,cACjB,EAAyBxG,mBAAS8E,SAASyB,EAAKjC,YAAcQ,SAASyB,EAAK5B,MAA5E,mBAAa8B,GAAb,WACA,EAA+BzG,mBAAS8E,SAASyB,EAAK7B,UAAYI,SAASyB,EAAK5B,MAAhF,mBAAO+B,EAAP,KAAgBC,EAAhB,KAEMC,GADOC,YAAYV,GACTW,eAYhB,OAVAC,qBAAU,WACNN,EAAS3B,SAASyB,EAAKjC,YAAcQ,SAASyB,EAAK5B,MACnDgC,EAAY7B,SAASyB,EAAK7B,UAAYI,SAASyB,EAAK5B,QACtD,CAAC4B,EAAK5B,MAERoC,qBAAU,WACNN,EAASF,EAAKrB,gBACdyB,EAAYJ,EAAKpB,sBACnB,CAACoB,EAAKrB,eAAeqB,EAAKpB,qBAGxB,mCACI,eAAC6B,EAAA,EAAD,CACIC,GAAIV,EAAK7C,IACTwD,OAAK,EAELC,UAAWC,KAAOC,GAClBC,MAAK,iBAAYf,EAAKnC,UAAjB,wBAA0CmC,EAAK5B,IAA/C,wBAAkF,IAAhB4B,EAAKlC,SAAvE,KACLkD,QAAS,CACLC,GAAK,IACLC,QAAU,GAEdC,QAAS,CACLF,EAAI,EACJC,QAAU,GAEdE,cAAe,WACXf,EAAQgB,KAAR,wCAA8CrB,EAAKlC,SAAW,KAAMkC,IAExElG,MAAO,CAAET,gBAAkB,UAAUiI,OAAS,WAjBlD,UAmBI,eAACC,EAAA,EAAD,CACIzH,MAAO,CAAC0H,SAAW,QACnBC,QAAS,EAFb,UAGC,cAAC,IAAD,CAAiBzH,MAAM,OAAO0H,KAAMC,MAHrC,WAG6D3B,EAAKnC,UAAU+D,UAAU,EAAE,IAAM,SAC9F,cAACL,EAAA,EAAD,CAAWzH,MAAO,CAAEC,UAAY,UAAhC,SAA6CiG,EAAK5B,MAClD,cAACmD,EAAA,EAAD,UACI,cAAC,KAAD,CACIM,mBAAiB,EACjBC,YAAY,OACZC,MAAO5B,EACPrG,MAAO,CAAE0H,SAAW,OAAQzH,UAAY,UACxCiI,aAAc,EACdC,iBAAkB,IAClBC,mBAAmB,MAG3B,cAACX,EAAA,EAAD,CAAWzH,MAAO,CAAEC,UAAY,UAAhC,SACI,cAACoI,GAAA,EAAD,CACInI,MAAM,YACNH,KAAK,QACLuI,QAAS,WACL/F,EAAU+C,EAAWY,EAAK7C,OAE9BrD,MAAO,CACHT,gBAAkB,WAP1B,SAUI,cAAC,IAAD,CAAiBqI,KAAMW,YA3C1BrC,EAAK7C,QCsGXmF,OAnHf,SAAc/I,GAEV,IAAM8C,EAAW4D,cACX1C,EAAO+C,YAAYV,GACjBpC,EAAY8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM6C,QAArCC,QACR,EAAyB/D,mBAAS,IAAlC,mBAAO8I,EAAP,KAAaC,EAAb,KACA,EAAwB/I,mBAAS,GAAjC,mBAAOgJ,EAAP,KAAaC,EAAb,KACA,EAAsCjJ,mBAAS,GAA/C,mBAAOkJ,EAAP,KAAoBC,EAApB,KACMvC,EAAUE,cAehB,OAJAC,qBAAU,WACNgC,EAASjF,KACX,CAACA,IAECC,EAEI,cAAC,EAAD,IAKJ,cAACqF,EAAA,EAAD,CACIjC,UAAWkC,IACXC,UAAW,EACXjJ,MAAO,CACHkJ,UAAY,QACZvK,SAAW,YALnB,SAQI,eAACwK,EAAA,EAAD,CAAOpJ,KAAK,QAAQqJ,cAAY,EAAhC,UACI,cAACC,EAAA,EAAD,UACI,eAAC1C,EAAA,EAAD,WACI,cAACc,EAAA,EAAD,CAAWE,QAAS,EAApB,kBACA,cAACF,EAAA,EAAD,CAAWzH,MAAO,CAAEC,UAAY,UAAhC,iBACA,cAACwH,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,CAAWzH,MAAO,CAAEC,UAAY,UAAhC,yBAGR,cAACqJ,EAAA,EAAD,UACKb,EAAMc,MAAMZ,EAAKE,EAAYF,EAAKE,EAAcA,GAAaW,KAAI,SAAAtD,GAAI,OAClE,cAAC,GAAD,CACIA,KAAMA,SAIlB,eAACS,EAAA,EAAD,CAAU3G,MAAO,CACbrB,SAAW,WACX8K,OAAS,IACThL,KAAO,IACPc,gBAAkB,WAJtB,UAMI,cAACkI,EAAA,EAAD,CAAWE,QAAS,EAApB,SACI,cAAC+B,EAAA,EAAD,CACIC,QAAQ,YACR5J,KAAK,QACLC,MAAO,CACHhB,gBAAkB,QAClBkB,MAAQ,UACRX,gBAAkB,WAEtBqK,UAAW,cAAC,IAAD,CAAiBhC,KAAMiC,MAClCvB,QAAS,WAEL,GAAoB,GAAhBG,EAAMqB,OACN,OAAOvH,EAAU5B,EAAiB,CAC9BH,QAAU,gBACVC,SAAW,WAInB,IAAIsJ,EAAS,GAQb,GANAtB,EAAMe,KAAI,SAAAtD,IACa,IAAfA,EAAKvC,OACLoG,EAAOxC,KAAKrB,EAAKvC,UAIrBoG,EAAOD,OAAS,EAChB,OAAOvH,EAAU5B,EAAiB,CAC9BH,QAAU,mBACVC,SAAW,WAInB8F,EAAQgB,KAAK,eAAe9D,IAjCpC,wBAqCJ,cAACgE,EAAA,EAAD,CAAWE,QAAS,EAApB,SACI,cAACqC,EAAA,EAAD,CACIC,mBAAoB,CAAC,GACrBC,MAAOzB,EAAMqB,OACbjB,YAAaA,EACbF,KAAMA,EACNwB,aA9FC,SAACC,EAAOC,GAC7BzB,EAAQyB,IA8FYC,oBA3FQ,SAACF,GAC7BtB,GAAgBsB,EAAMG,OAAOtC,OAC7BW,EAAQ,IA0FY4B,kBAAkB,e,SC1HxCC,GAAexJ,IAAMC,OAAO,CAC9BE,QAAU,MAGRC,GAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAWC,WAAWD,EAAQF,OAGxCoJ,GAAoB/I,YAC7B,6BAD6C,uCAE7C,WAAOC,EAAP,gCAAAC,EAAA,6DAAeC,EAAf,EAAeA,gBAAgBS,EAA/B,EAA+BA,SAA/B,kBAEkCA,EAAUH,EAAY,CAC5CL,IAAM,eAHlB,UAEcS,EAFd,QAMWJ,EAAYK,UAAUC,MAAMF,GANvC,wBAOoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACnD4H,EAAQ/I,EAAR+I,IAVpB,UAW8BF,GAAa,2BAC3BtJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,YACJ4H,GAFuB,IAG1B1I,OAAS,SAdzB,eAWkBC,EAXlB,iBAgBkBb,GAAM,KAhBxB,iCAiBmBa,EAAIF,MAjBvB,mFAoBeF,EAAgB,KAAIK,SAASH,OApB5C,0DAF6C,yDA2BpC4I,GAAgBjJ,YACzB,yBADyC,uCAEzC,WAAMC,EAAN,gCAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAgBS,EAA5B,EAA4BA,SAA5B,kBAEkCA,EAAUH,EAAY,CAC5CL,IAAM,eAHlB,UAEcS,EAFd,QAMWJ,EAAYK,UAAUC,MAAMF,GANvC,wBAOoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACnD4H,EAAQ/I,EAAR+I,IAVpB,UAW8BF,GAAa,2BAC3BtJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,YACJ4H,GAFuB,IAG1B1I,OAAS,SAdzB,eAWkBC,EAXlB,iBAgBkBb,GAAM,KAhBxB,iCAiBmBa,EAAIF,MAjBvB,mFAqBeF,EAAgB,KAAIK,SAASH,OArB5C,0DAFyC,yDA4BhC6I,GAAsBlJ,YAC/B,+BAD+C,uCAE/C,WAAMiF,EAAN,8BAAA/E,EAAA,6DAAUC,EAAV,EAAUA,gBAAgBS,EAA1B,EAA0BA,SAA1B,kBAGkCA,EAAUH,EAAY,CAC5CL,IAAM,eAJlB,UAGcS,EAHd,QAOWJ,EAAYK,UAAUC,MAAMF,GAPvC,wBAQoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KAVvE,UAW8B0H,GAAa,CAC3BtJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,MACTF,IAAM,aAAe6E,IAdrC,eAWkB1E,EAXlB,iBAgBkBb,GAAM,KAhBxB,iCAiBmBa,EAAIF,MAjBvB,mFAoBeF,EAAgB,KAAIK,SAASH,OApB5C,0DAF+C,yDCjE7C8I,ID4F2BnJ,YAC7B,6BAD6C,uCAE7C,WAAOqB,EAAP,8BAAAnB,EAAA,6DAAeC,EAAf,EAAeA,gBAAgBS,EAA/B,EAA+BA,SAA/B,kBAGkCA,EAAUH,EAAY,CAC5CL,IAAM,eAJlB,UAGcS,EAHd,QAOWJ,EAAYK,UAAUC,MAAMF,GAPvC,wBAQoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KAVvE,UAW8B0H,GAAa,CAC3BtJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,OACTF,IAAM,YACNC,KAAOgB,IAfvB,eAWkBd,EAXlB,iBAiBkBb,GAAM,KAjBxB,iCAkBmBa,EAAIF,MAlBvB,mFAqBeF,EAAgB,KAAIK,SAASH,OArB5C,0DAF6C,yDC5FzBkB,YAAoB,CACxCC,SAAW,SAACC,GAAD,OAAQA,EAAKC,KACxB0H,aAAe,SAAC3H,GAAD,OAAQA,EAAK4H,cAG1BC,GAAe5K,YAAY,CAC7BkD,KAAO,WACPjD,aAAewK,GAAgBtH,gBAAgB,CAC3CE,SAAU,EACVwH,aAAe,GACfvH,MAAQ,OAEZjD,SAAW,CACPyK,cAAgB,SAAAvK,GACZA,EAAMwK,SAAW,KAGzB5F,cAAgB,SAACC,GAEbA,EAAQC,QAAQgF,GAAkB/E,SAAQ,SAAA/E,GACtCA,EAAM8C,SAAU,KAEnBgC,QAAQgF,GAAkBjI,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACzCD,EAAM8C,SAAU,EAChBoH,GAAgBO,OAAOzK,EAAMC,MAEhC6E,QAAQgF,GAAkB9E,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACxCD,EAAM8C,SAAU,EAChB9C,EAAM+C,MAAQ9C,KAGjB6E,QAAQkF,GAAcjF,SAAQ,SAAA/E,GAC3BA,EAAM8C,SAAU,KAEnBgC,QAAQkF,GAAcnI,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACrCD,EAAM8C,SAAU,EAChBoH,GAAgBO,OAAOzK,EAAMC,MAEhC6E,QAAQkF,GAAchF,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACpCD,EAAM8C,SAAU,EAChB9C,EAAM+C,MAAQ9C,KAGjB6E,QAAQmF,GAAoBlF,SAAQ,SAAC/E,EAAD,GAAmB,EAAXC,QACzCD,EAAM8C,SAAU,KAEnBgC,QAAQmF,GAAoBpI,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAC3CD,EAAM8C,SAAU,EAChBoH,GAAgBQ,OAAO1K,EAAMC,MAEhC6E,QAAQmF,GAAoBjF,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAC1CD,EAAM8C,SAAU,EAChB9C,EAAM+C,MAAQ9C,QAUb0K,GAAkBxF,aAFX,SAAAnF,GAAK,OAAEA,EAAM4K,YAI7B,SAAA5K,GAAK,OAAEA,EAAM8C,WAIJ+H,IADoBR,GAAalK,QAA/BoK,cACiBL,GAAgBY,cAAa,SAAA9K,GAAK,OAAEA,EAAM4K,aAC3DP,MAAf,Q,UChBeU,OA/Cf,YAA8B,IAARzF,EAAO,EAAPA,KAGZK,GADWJ,cACDM,eAEhB,OACI,mCACI,eAACE,EAAA,EAAD,CACIE,OAAK,EAEL7G,MAAO,CAAEwH,OAAS,UAAUjI,gBAAkB,WAC9C0H,MAAK,iBAAYf,EAAKnC,UAAjB,oBAAsCmC,EAAK0F,UAA3C,qBAAiE1F,EAAK2F,YAJ/E,UAMI,eAACpE,EAAA,EAAD,CAAWzH,MAAO,CAAE0H,SAAW,QAA/B,UAAyC,cAAC,IAAD,CAAiBxH,MAAM,OAAO0H,KAAMkE,MAA7E,WAAmG5F,EAAKnC,aACxG,cAAC0D,EAAA,EAAD,CAAWzH,MAAO,CAAE0H,SAAW,QAA/B,SAA0CxB,EAAKhC,WAC/C,cAACuD,EAAA,EAAD,CAAWzH,MAAO,CAAE0H,SAAW,QAA/B,SACI,cAAC,KAAD,CACIM,YAAY,OACZD,mBAAiB,EACjBK,mBAAiB,EACjB2D,eAAe,EACf7D,aAAc,EACdC,iBAAiB,IACjB6D,YAAaC,KACbhE,MAAO/B,EAAK7B,aAGpB,cAACoD,EAAA,EAAD,UACI,cAACY,GAAA,EAAD,CACInI,MAAM,UACNH,KAAK,QACLuI,QAAS,WAEL/B,EAAQgB,KAAK,WAAWrB,IAE5BlG,MAAO,CACHT,gBAAkB,WAR1B,SAWI,cAAC,IAAD,CAAiBqI,KAAMsE,YA9B1BhG,EAAK7C,QCuEX8I,OAjFf,WAEI,IAAM5J,EAAW4D,cACXqF,EAAWhF,YAAYiF,GAAiBW,WAC5BC,EAAoB7F,aAAY,SAAA5F,GAAK,OAAEA,EAAM+B,YAAvDe,QAEFA,GAD+B8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM0L,cAAtDC,YACQ/F,YAAY+E,KAC5B,EAAwB5L,mBAAS,GAAjC,mBAAOgJ,EAAP,KAAaC,EAAb,KACA,EAAsCjJ,mBAAS,IAA/C,mBAAOkJ,EAAP,KAAoBC,EAApB,KAyBA,OAdApC,qBAAU,WACNkC,EAAQ,KACV,CAAC4C,IAEH9E,qBAAU,WAENnE,EAAUmI,GAAkB,CACxBC,IAAM,CACF5I,IAAM,kBAIhB,IAEE2B,GAAW2I,EAEP,cAAC,EAAD,IAKJ,8BACI,cAACtD,EAAA,EAAD,CAAgBjC,UAAWkC,IAAOhJ,MAAO,CAAEkJ,UAAY,QAASvK,SAAW,YAA3E,SACI,eAACwK,EAAA,EAAD,CAAOpJ,KAAK,QAAQqJ,cAAY,EAACoD,aAAW,eAA5C,UACI,cAACnD,EAAA,EAAD,UACI,eAAC1C,EAAA,EAAD,WACI,cAACc,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,kBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,0BAGR,cAAC6B,EAAA,EAAD,UACKkC,EAASjC,MAAMZ,EAAOE,EAAYF,EAAOE,EAAcA,GAAaW,KAAI,SAAAiD,GAAO,OAC5E,cAAC,GAAD,CAAavG,KAAMuG,SAG3B,cAAC9F,EAAA,EAAD,CACI3G,MAAO,CACHrB,SAAW,WACX8K,OAAS,IACThL,KAAO,IACPc,gBAAkB,WAL1B,SAQI,cAACkI,EAAA,EAAD,CAAWE,QAAS,EAApB,SACI,cAACqC,EAAA,EAAD,CACIC,mBAAoB,CAAC,IACrBC,MAAOsB,EAAS1B,OAChBjB,YAAaA,EACbF,KAAMA,EACNwB,aA5DH,SAACC,EAAOC,GAC7BzB,EAAQyB,IA4DgBC,oBAzDI,SAACF,GAC7BtB,GAAgBsB,EAAMG,OAAOtC,OAC7BW,EAAQ,kBCRDtK,GAhBG,CACdoO,UAAY,CACRzN,OAAS,OAEb0N,UAAY,CACR1N,OAAS,OACTG,aAAe,OACfwN,WAAa,QAEjBC,aAAe,CACX5N,OAAS,MACTG,aAAe,OACfE,QAAU,SCiBHE,mBAAWsN,GAAXtN,EArBf,SAAmBC,GAEf,MAA6CA,EAAMC,QAA3CmN,EAAR,EAAQA,aAAaH,EAArB,EAAqBA,UAGrB,OAHA,EAA+BC,UACflG,cAGZ,eAACsG,EAAA,EAAD,CAAMC,WAAS,EAACnN,UAAW6M,EAAWO,QAAS,EAA/C,UACI,cAACF,EAAA,EAAD,CAAMG,UAAU,SAAShH,MAAI,EAAC8G,WAAS,EAACG,GAAI,EAAGC,GAAI,EAAnD,SACI,cAAC,GAAD,MAEJ,cAACL,EAAA,EAAD,CACI7G,MAAI,EAACiH,GAAI,EACTC,GAAI,EACJvN,UAAWgN,EAHf,SAKI,cAAC,GAAD,YCWDvO,GAlCG,CACd,UAAY,CACR+O,KAAO,CACHpO,OAAS,OACTqO,OAAS,MACT,UAAY,CACRrO,OAAS,QAEbsO,SAAW,SACX5O,SAAW,WACXS,aAAe,QAEnBoO,KAAO,CACHvO,OAAS,MACTqO,OAAS,MACThO,QAAU,SAIlBmO,KAAO,CACHxO,OAAS,OACT2N,WAAa,UACbtN,QAAU,OACVF,aAAe,OACfT,SAAW,YAGf+O,cAAgB,CACZzO,OAAS,OACTK,QAAU,8BACVX,SAAW,a,oBCCJgP,OAzBf,SAAelO,GAEX,IAAQmO,EAAqBnO,EAArBmO,iBACR,EAAkCpH,aAAY,SAAA5F,GAAK,OAAEA,EAAMiN,iBAAnDrN,EAAR,EAAQA,QAAQC,EAAhB,EAAgBA,SAASF,EAAzB,EAAyBA,KAEzB,OACI,cAACuN,GAAA,EAAD,CACIvN,KAAMA,EACNwN,iBAAkB,IAClBC,QAASJ,EACTK,aAAc,CAACC,SAAW,SAASC,WAAa,SAChDnO,MAAO,CAAEyJ,OAAS,OAAQ2E,MAAQ,OAAQ7O,gBAAkB,WALhE,SAOI,cAAC8O,GAAA,EAAD,CACIpF,UAAW,EACXU,QAAQ,SACRqE,QAASJ,EACTnN,SAAUA,EAJd,SAMKD,O,wHCkBF8N,GA3CE,CACbC,iBAAmB,CACf7P,QAAS,OACTI,WAAY,SACZF,eAAgB,SAChBW,gBAAkB,WAEtBiP,aAAe,CACXpP,aAAe,OACfE,QAAU,OACVJ,MAAQ,QACRD,OAAS,QACTD,gBAAkB,UAClByP,QAAU,OACV9P,SAAW,YAEf+P,iBAAmB,CACfD,QAAU,OACVxP,OAAS,QACTK,QAAU,QAEdqP,iBAAmB,CACfvP,aAAe,OACfE,QAAU,OACVJ,MAAQ,QACRF,gBAAkB,UAClByP,QAAU,OACV9P,SAAW,YAEfiQ,YAAc,CACVlQ,QAAU,OACVE,eAAiB,SACjBE,WAAa,SACbS,gBAAkB,WAEtBsP,iBAAmB,CACfnQ,QAAU,OACVE,eAAiB,SACjBE,WAAa,SACbS,gBAAkB,YCnCpBuP,GAAiB7N,IAAMC,OAAO,CAChCE,QAAU,MAGRC,GAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAWC,WAAWD,EAAQF,OAGxCyN,GAA0BpN,YACnC,iCADmD,uCAEnD,WAAMC,EAAN,gCAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAgBS,EAA5B,EAA4BA,SAA5B,kBAGkCA,EAAUH,EAAY,CAC5CL,IAAM,eAJlB,UAGcS,EAHd,QAOWJ,EAAYK,UAAUC,MAAMF,GAPvC,wBAQoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACnDhB,EAAQH,EAARG,IAXpB,UAY8B+M,GAAe,CAC7B3N,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,oBACPhB,MACAE,OAAS,QAfzB,eAYkBC,EAZlB,iBAiBkBb,GAAM,KAjBxB,yBAkByBa,EAAIF,KAlB7B,4HAqBeF,EAAgB,KAAIK,SAASH,OArB5C,0DAFmD,yD,kDCXjDgN,GAAY,IAAIC,KAAKC,aAAa,QAAQ,CAC5ClP,MAAQ,WACRmP,SAAW,QAGfC,KAAQC,MAAQ,CACZC,QAAU,CACNC,OAAQ,WACRC,KAAM,aACNC,QAAS,YACTC,YAAa,cAEjBC,MAAO,CACHJ,OAAQ,YACRC,KAAM,cACNC,QAAS,aACTC,YAAa,eAEjBE,MAAQ,CACJL,OAAQ,YACRC,KAAM,cACNC,QAAS,aACTC,YAAa,eAQjBG,MAAO,CACHN,OAAQ,aACRC,KAAM,aACNC,QAAS,aACTC,YAAa,cAEjBI,eAAiB,CACbP,OAAS,qBACTC,KAAO,qBACPC,QAAU,qBACVC,YAAc,sBAElBK,WAAa,CACTR,OAAS,eACTC,KAAO,eACPC,QAAU,eACVC,YAAc,gBAElBM,aAAe,CACXT,OAAS,mBACTC,KAAO,mBACPC,QAAU,mBACVC,YAAc,qBAIP,gBAACO,EAAKC,GACjB,IACIC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAnN,EARAoN,EAAc,GAWlBR,EAAKzG,KAAI,SAAAkH,GACL,IAAIC,EAASD,EAAI,GAAG1M,SAAW0M,EAAI,GAAGE,MACtCT,EAAgBO,EAAI,GAAGP,cACvBE,EAAmB,IAAIQ,KAAKH,EAAI,GAAGI,MAAMC,qBACtBL,EAAI,GAAGM,cAC1BV,EAAeI,EAAI,GAAGJ,aACtBC,EAAgBG,EAAI,GAAGH,cACvBC,EAAcE,EAAI,GAAGF,YACrBnN,EAAMqN,EAAI,GAAGrN,IACb+M,EAAmBM,EAAI,GAAGN,iBAC1BK,EAAYlJ,KAAKoJ,MAGrB,IAAI3M,EAAWyM,EAAYQ,QAAO,SAACpP,EAAEqP,GAAH,OAAOrP,EAAEqP,IAAE,GAE7C,MAAO,CACHC,SAAW,CACPjS,MAAQ,MACRD,OAAS,OAEbmS,YAAa,CAAE,GAAI,GAAI,GAAI,KAC3BC,UAAW,EACXC,OAAS,SAACC,GACN,GAAoB,IAAhBA,EACA,MAAO,CACHC,QAAU,CACN,CACIC,MAAK,gCAA4BvB,GACjChR,MAAQ,GACRD,OAAS,IAEb,CACIyS,MAAQ,CACJ,CACIC,KAAO,kDAEP3R,MAAQ,cAGhB4R,UAAY,UAGpBtE,OAAS,CAAC,GAAG,GACbpO,MAAQ,MAIpB2S,OAAS,SAACN,EAAYO,GAClB,GAAIP,IAAgBO,EAChB,MAAO,CACHJ,MAAQ,CACJ,CACIK,MAAQ,CACJC,OAAS,CAAC,IAAI,IAAI,KAClBC,WAAa,EACb5E,KAAO,CACH,CACI,CACIsE,KAAO,iBACP3R,MAAQ,CACJ0H,SAAW,IAEf8H,MAAO,GAEX,CACImC,KAAI,qBAAiB3C,GAAUkD,OAAOlO,IACtChE,MAAQ,CACJ0H,SAAW,GACXyK,KAAO,SAEX3C,MAAO,GAEX,CACImC,KAAI,0BAAsB3C,GAAUkD,OAAO5B,IAC3CtQ,MAAQ,CACJ0H,SAAW,GACXyK,KAAO,SAEX3C,MAAO,IAGf,CACI,CACImC,KAAO,GACPS,OAAS,EAAC,GAAM,GAAM,GAAM,IAEhC,CACIT,KAAO,CAAC,UAEJ,CACIA,KAAI,UAAMnB,GACVxQ,MAAQ,CACJ4R,UAAY,SACZO,KAAO,QACPzK,SAAW,MAIvB8H,MAAO,EACP9H,SAAW,IAEf,CACIiK,KAAI,UAAMpB,IAAkB,EAAI,aAAevB,GAAUkD,QAAwB,EAAjB3B,GAAsB,YAAcvB,GAAUkD,OAAO3B,IACrHvQ,MAAQ,CACJmS,KAAO,QACPzK,SAAW,IAEf8H,MAAO,OAM3B,CACImC,KAAO,4BACP3R,MAAQ,CACJ0H,SAAW,IAGf8H,MAAO,EACPoC,UAAY,SACZtE,OAAS,CAAC,EAAE,EAAE,EAAE,IAEpB,CACIqE,KAAO,0FACP3R,MAAQ,CACJ0H,SAAW,IAEfkK,UAAY,QACZpC,MAAO,EACPlC,OAAS,CAAC,EAAE,EAAE,EAAE,KAGxBA,OAAS,CAAC,GAAG,KAIzB+E,QAAU,CACN,CACIb,QAAU,CACN,CACIG,KAAO,aACPnC,MAAO,EACPxP,MACA,CACI0H,SAAW,GAEXyK,KAAO,WAInBP,UAAY,UAEhB,CACIF,MAAQ,CACJ,CACIF,QAAU,CACN,CACIG,KAAO,CACH,mBACA,CACIA,KAAI,UAAMxB,GACVV,SAAU,EACVD,MAAO,IAGfA,MAAO,EACP9H,SAAW,GACX4F,OAAS,CAAC,EAAE,EAAE,EAAE,IAEpB,CACIqE,KAAO,CACH,sBACA,CACIA,KAAI,UAAMtB,GACVZ,SAAU,EACVD,MAAO,IAGfA,MAAO,EACP9H,SAAW,GACX4F,OAAS,CAAC,EAAE,EAAE,EAAE,MAK5B,CACIkE,QAAU,CACN,CACIG,KAAO,CAAC,aAEJ,CACIA,KAAI,UAAMvB,GACVZ,MAAO,IAGfA,MAAO,EACP9H,SAAW,GACX4F,OAAS,CAAC,EAAE,EAAE,EAAE,KAEpB,CACIqE,KAAO,CACH,cACA,CACIA,KAAI,UAAMtO,GACVqE,SAAW,GACX8H,MAAO,IAGfA,MAAO,EACP9H,SAAW,GACX4F,OAAS,CAAC,EAAE,EAAE,EAAE,OAI5B,CACIyE,MAAQ,CACJO,eAAgB,EAChBL,WAAY,EACZD,OAAQ,CAAE,GAAG,GAAG,IAAK,IAAI,IACzB3E,KAAM,CACF,CACI,CACIsE,KAAO,MACP3R,MAAQ,cACRoS,OAAS,EAAC,GAAK,GAAK,GAAK,IAE7B,CACIT,KAAO,OACP3R,MAAQ,cACRoS,OAAS,EAAC,GAAK,GAAK,GAAK,IAE7B,CACIT,KAAO,YACP3R,MAAQ,cACRoS,OAAS,EAAC,GAAK,GAAK,GAAK,IAE7B,CACIT,KAAO,aACP3R,MAAQ,cACRoS,OAAS,EAAC,GAAK,GAAK,GAAK,IAE7B,CACIT,KAAO,SACP3R,MAAQ,cACRoS,OAAS,EAAC,GAAK,GAAK,GAAK,QAM7C,CACIG,OAAS,CACLC,WAAa,SAACC,EAAEC,GACZ,OAAc,IAAND,GAAWA,IAAMC,EAAKX,MAAM1E,KAAKvD,OAAU,EAAI,GAE3D6I,YAAc,SAACF,EAAEC,GACb,OAAc,IAAND,EAAW,EAAI,GAE3BG,cAAe,SAACH,EAAGC,EAAMG,GAGrB,GAAIJ,IAAMC,EAAKX,MAAM1E,KAAKvD,OAAS,QAAmDjH,IAA9C6P,EAAKI,UAAUJ,EAAKI,UAAUhJ,OAAS,GAAkB,CAC7F,IAAMiJ,EAAkBL,EAAKI,UAAUJ,EAAKI,UAAUhJ,OAAS,GAGzD8I,EAFkBG,EAAgBC,gBAClBD,EAAgBvU,IAGtC,OAAIoU,EAAgB,EARA,EAWTA,EAGX,OAdoB,IAkBhCb,MAAQ,CACJO,eAAgB,EAChBL,WAAY,EACZD,OAAQ,CAAE,GAAG,GAAG,IAAK,IAAI,IACzB3E,KAAK,aACE4C,MAKnB3C,OAAS,CAAC,EAAE,GAAG,EAAE,KAGzB2F,OAAS,CACL3B,OAAS,CAGL5J,SAAW,GACXyK,KAAO,QACP3C,MAAO,GAEX0D,UAAY,CACRxL,SAAW,GAEXyK,KAAO,QACP3C,MAAO,GAEX2D,YAAc,CACVzL,SAAW,GACXkK,UAAY,SACZtE,OAAS,CAAC,EAAE,GACZkC,MAAO,EACP4C,OAAS,EAAC,GAAK,GAAK,GAAK,IAE7BgB,WAAa,CACTxB,UAAY,SACZtE,OAAS,CAAC,EAAE,GACZ5F,SAAW,IAGf2L,iBAAmB,CACfzB,UAAY,SACZtE,OAAS,CAAC,EAAE,GACZ5F,SAAW,GACXyK,KAAO,UAGfmB,aAAe,CACXnB,KAAO,QACPoB,UAAY,EACZ7L,SAAW,GACXxH,MAAQ,CAAC,GAAG,GAAG,GAAG,Q,SCYfV,mBAAW8O,GAAX9O,EAtXf,SAAqBC,GAEjB,IAAM8C,EAAW4D,cACXzC,EAAU8C,YAAYR,GACbvC,EAAQ+P,cAAhB5S,MAEP,EAAuBjB,oBAAS,GAAhC,mBAAOY,EAAP,KAAYkT,EAAZ,KACA,EAAiC9T,oBAAS,GAA1C,mBAAO+T,EAAP,KAAiBC,EAAjB,KACMpN,EAAUE,cAChB,EAAwChH,EAAMC,QAAvC6O,EAAP,EAAOA,iBAAiBC,EAAxB,EAAwBA,aACxB,EAAyB7O,mBAAS,GAAlC,mBAAOyF,EAAP,KAAagB,EAAb,KACA,EAA+BzG,mBAAS,GAAxC,mBAAO0G,EAAP,KAAgBC,EAAhB,KACA,EAAuB3G,mBAAS,CAC5BwQ,cAAgB,GAChBC,iBAAmB,GACnBwD,sBAAwB,OACxBpD,YAAc,EACdqD,iBAAkB,IALtB,mBAAOC,EAAP,KAAYC,EAAZ,KAYMC,EAAW,uCAAG,WAAOpN,GAAP,uCAAA/E,EAAA,+EAGcU,EAAUH,EAAY,CAC5CL,IAAM,eAJE,UAGNS,EAHM,QAORJ,EAAYK,UAAUC,MAAMF,GAPpB,oBAQAG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACrDkR,EAASC,cAAG,UAAD,OAAWtR,EAAX,YAAmBG,SAEjBF,IAAf+D,EAAG/F,QAbC,wBAcIsT,EAAgBvN,EAAG/F,QAAnBsT,YAdJ,UAgBmB5R,EAAUwM,GAAwB,CACrDhN,IAAM,iBAAmBoS,KAjBzB,QAgBEC,EAhBF,OAoBArF,GAAwBtM,UAAUC,MAAM0R,KAAY,EAC/BA,EAASvT,QAAtB6P,EAD2C,EAC3CA,IAAI2D,EADuC,EACvCA,MACRC,EAAMC,KAAKC,MAAM9D,IAEb5G,OAAS,IACb2K,KAAQC,IAAMC,KAASF,QAAQC,IACzBE,EAASC,GAAkBP,EAAID,GAC/BS,EAAeL,KAAQM,UAAUH,GAEnClB,GACAoB,EAAaE,WAAU,SAAAhT,GACnBiS,EAAOgB,KAAK,WAAW,CACnBC,IAAMjB,EAAOrN,GACb5E,OACA4E,GAAKuN,OAKjBW,EAAaK,SAAQ,SAAAC,GACjB,IAAIrT,EAAMsT,OAAOC,IAAIC,gBAAgBH,GACrC7O,EAAQgB,KAAK,4BAA8BxF,QAzCnD,wBA8CJwE,EAAQiP,SA9CJ,QAiDZ/B,GAAQ,GAjDI,kDAmDZlR,EAAU5B,EAAiB,CACvBH,QAAU,qCACVC,SAAW,WArDH,0DAAH,sDAoEjB,OAVAiG,qBAAU,WACN+M,GAAQ,GACRhQ,EAAK+F,KAAI,SAAAtD,GACL,IAAI0K,EAAQ1K,EAAKrB,eACb4Q,EAAYvP,EAAKpB,mBACrBsB,GAAU,SAAAsP,GAAO,OAAIA,EAAU9E,KAC/BtK,GAAa,SAAAoP,GAAO,OAAIA,EAAUD,UAExC,IAEE/R,EAEI,cAAC,EAAD,IAKJ,cAACiS,GAAA,EAAD,CACIpV,KAAMA,EACNyN,QAASgG,EACT4B,kBAAmBC,KACnBC,cAAe,CACX1U,QAAU,IACVpB,MAAQ,CACJZ,aAAe,OACfH,OAAS,UAGjBY,UAAW0O,EAXf,SAaI,cAACwH,GAAA,EAAD,CACIC,GAAIzV,EADR,SAGI,qBAAKV,UAAW2O,EAAhB,SACI,eAACzB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,eAAC6I,GAAA,EAAD,CAAYtM,QAAQ,KAApB,wCAEI,cAAC,KAAD,CACI3B,YAAY,OACZC,MAAOxE,EAAKqG,OACZkC,YAAaC,KACbiK,WAAS,EACTnW,KAAK,QACL4J,QAAQ,WACRwM,MAAM,QACNC,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM2O,gBAO/C,cAACxJ,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,eAAC6I,GAAA,EAAD,CAAYtM,QAAQ,KAApB,8BAEI,cAAC,KAAD,CACI3B,YAAY,OACZC,MAAO5B,EACP2F,YAAaC,KACb7D,mBAAiB,EACjBF,aAAc,EACdH,mBAAiB,EACjBI,iBAAiB,IACjBqO,OAAO,OACPN,WAAS,EACTnW,KAAK,QACL4J,QAAQ,WACRwM,MAAM,QACNC,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM2O,gBAO/C,cAACxJ,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,eAAC6I,GAAA,EAAD,CAAYtM,QAAQ,KAApB,8BAEI,cAAC,KAAD,CACI3B,YAAY,OACZC,MAA2B,GAApB6L,EAAKtD,YAAmB,EAAOsD,EAAKtD,YAAcnK,EACzD2F,YAAaC,KACb7D,mBAAiB,EACjBF,aAAc,EACdH,mBAAiB,EACjBI,iBAAiB,IACjB+N,WAAS,EACTnW,KAAK,QACL4J,QAAQ,WACRwM,MAAM,QACNC,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM2O,gBAO/C,cAACxJ,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,cAACnB,GAAA,EAAD,CACIiK,WAAS,EACTnW,KAAK,QACL4J,QAAQ,WACR1B,MAAO6L,EAAK3D,cACZsG,SAAU,SAACC,GACP3C,GAAQ,SAAAD,GACJ,OAAO,6BACAA,GADP,IAEI3D,cAAgBuG,EAAEnM,OAAOtC,YAIrCkO,MAAM,gBACNC,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM+O,aAM3C,cAAC5J,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,cAACnB,GAAA,EAAD,CACIiK,WAAS,EACTnW,KAAK,QACL4J,QAAQ,WACR1B,MAAO6L,EAAK1D,iBACZqG,SAAU,SAACC,GACP3C,GAAQ,SAAAD,GACJ,OAAO,6BACAA,GADP,IAEI1D,iBAAmBsG,EAAEnM,OAAOtC,YAIxCkO,MAAM,mBACNC,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAMgP,aAM3C,cAAC7J,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,cAAC,KAAD,CACIzJ,MAAsC,QAA9BmQ,EAAKF,uBAAmCE,EAAKtD,YAAcpL,GAC3C,GAApB0O,EAAKtD,aAAkD,WAA9BsD,EAAKF,sBAElCuC,MAAM,cACND,WAAS,EACTnW,KAAK,SACL4J,QAAQ,WACRqC,YAAaC,KACbhE,MAAO6L,EAAKtD,YACZtI,aAAc,EACdC,iBAAiB,IACjBC,mBAAiB,EACjBgO,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAMiP,SAInCJ,SAAU,SAACC,GACP,IAAII,EAAOJ,EAAEnM,OAAOtC,MACpB8L,GAAQ,SAAAD,GACJ,OAAO,6BACAA,GADP,IAEItD,YAAcsG,YAMlC,cAAC/J,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,eAACnB,GAAA,EAAD,CACIiK,WAAS,EACTvM,QAAQ,WACR5J,KAAK,QACLgX,QAAM,EACNZ,MAAM,eACNlO,MAAO6L,EAAKkD,yBACZP,SAAU,SAACC,GACP,IAAIO,EAAeP,EAAEnM,OAAOtC,MAC5B8L,GAAQ,SAAAD,GACJ,OAAO,6BACAA,GADP,IAEIF,sBAAwBqD,QAZxC,UAiBI,cAACC,GAAA,EAAD,CAAUjP,MAAM,OAAhB,0BACA,cAACiP,GAAA,EAAD,CAAUjP,MAAM,UAAhB,kCAGR,cAAC8E,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,eAAC+J,GAAA,EAAD,CACIpX,KAAK,QACL+G,UAAU,WACV6C,QAAQ,WAHZ,UAKI,cAACyN,GAAA,EAAD,CAAWtQ,UAAU,SAArB,wBACA,eAACuQ,GAAA,EAAD,CACIC,KAAG,EACHb,SAxRR,SAACC,GACrB/C,GAAcD,IAwRczL,MAAOyL,EAHX,UAKI,cAAC6D,GAAA,EAAD,CAAkBtP,OAAO,EAAMuP,QAAS,cAACC,GAAA,EAAD,CAAO1X,KAAK,UAAYoW,MAAM,OACtE,cAACoB,GAAA,EAAD,CAAkBtP,OAAO,EAAOuP,QAAS,cAACC,GAAA,EAAD,CAAO1X,KAAK,UAAYoW,MAAM,gBAInF,cAACpJ,EAAA,EAAD,CACI7G,MAAI,EACJiH,GAAI,GACJC,GAAI,GACJpN,MAAO,CACHrB,SAAW,WACX8K,OAAS,IACThL,KAAO,MAPf,SAUI,eAACiZ,GAAA,EAAD,CACI/N,QAAQ,WACRzJ,MAAM,UACNsM,aAAW,iCAHf,UAKI,cAAC9C,EAAA,EAAD,CACIwM,WAAS,EACTtM,UAAW,cAAC,IAAD,CAAiB1J,MAAM,QAAQ0H,KAAM+P,MAChDrP,QAAO,sBAAG,4BAAAzG,EAAA,yDAEoB,IAAtBiS,EAAK3D,cAFH,oDAGmB,IAArB2D,EAAKtD,YAHH,sDAI2B,QAA9BsD,EAAKF,uBAAmCE,EAAKtD,YAAcpL,GAJxD,iEAMiB7C,EAAUD,EAAkB,CAC/CU,OAASS,EAAK+F,KAAI,SAAAtD,GACd,OAAO,6BACAA,GADP,IAEIiK,cAAgB2D,EAAK3D,cACrBC,iBAAmB0D,EAAK1D,iBACxBE,aAAelL,EACfwS,iBAAmBvR,EACnBmK,YAAcsD,EAAKtD,YACnBD,cAAgBuD,EAAKtD,YAAcpL,EACnCyS,kBAAoB/D,EAAKtD,YAAcnK,EACvCuN,sBAAuD,KAA/BE,EAAKF,sBAAgCE,EAAKtD,aAAepL,EAAQ,OAAS,UAAa0O,EAAKF,sBACpHC,gBAAiD,SAA/BC,EAAKF,8BAlB7B,OAMAQ,EANA,OAuBF9R,EAAkBG,UAAUC,MAAM0R,GAClCJ,EAAYI,GACN9R,EAAkBsD,SAASlD,MAAM0R,KACvC7R,EAAU5B,EAAiB,CACvBH,QAAU,WAAa4T,EAASvT,QAChCJ,SAAW,WAEfuT,KA9BE,4CAHd,2BAuCA,cAACtK,EAAA,EAAD,CACIpB,QAAS0L,EADb,qC,qEC5Y1B8D,GAAkBzX,YAAY,CAChCkD,KAAO,aACPjD,aAAe,CACXiM,aAAc,GAElB7L,SAAW,CACPqX,cAAgB,SAACnX,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACpBD,EAAM2L,YAAc1L,MAIjBkX,GAAkBD,GAAgB/W,QAAlCgX,cACAD,MAAf,Q,+BCgSetY,mBAAWlB,EAAXkB,EA3Rf,SAAgBC,GAEZ,IAAQuY,EAAgB3C,OAAO4C,QAAQ,YAA/BD,YACAE,EAAczY,EAAdyY,UACA7Y,EAAeI,EAAMC,QAArBL,WAGFkD,EAAW4D,cACKmG,EAAe9F,aAAY,SAAA5F,GAAK,OAAEA,EAAM0L,cAAtDC,YACFf,EAAWhF,YAAYiF,GAAiBW,WACtC1I,EAAY8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM+B,YAArCe,QACF6C,EAAUE,cAChB,EAAmC9G,mBAAS,IAA5C,mBAAOwY,EAAP,KAAkBC,EAAlB,KAcMC,EAAe,SAAC3B,GAClB0B,EAAc1B,EAAEnM,OAAOtC,QAGrBqQ,EAAc,uCAAG,WAAO5B,GAAP,iBAAA7U,EAAA,yDACb0W,EAAiBC,KAAmBL,GAC1CM,QAAQC,IAAIH,GACE,UAAV7B,EAAEiC,IAHa,gCAIGpW,EAAUqI,GAAc,CACtCD,IAAM,CACF5I,IAAM,0BAA4BwW,MAN3B,OAITrW,EAJS,OAUX0I,GAAcnI,UAAUC,MAAMR,IAC9BkW,EAAc,IAXH,2CAAH,sDAoBdQ,EAAe,uCAAG,oCAAA/W,EAAA,+EAEUU,EAAUH,EAAY,CAC5CL,IAAM,eAHM,OAEVS,EAFU,OAMZJ,EAAYK,UAAUC,MAAMF,KACpBG,EAAaH,EAAY3B,QAAzB8B,SAEFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,MACrDkR,EAASC,cAAG,UAAD,OAAWtR,EAAX,YAAmBG,KAE7B8V,GAAG,WAAU,WAChBtW,EAAUwV,GAAc9D,EAAO6E,YAC/BvW,EAAUmI,GAAkB,CACxBC,IAAM,CACF5I,IAAM,mBAKlBkS,EAAO4E,GAAG,cAAa,WACnBtW,EAAUwV,GAAc9D,EAAO6E,YAC/BvW,EAAUmI,GAAkB,CACxBC,IAAM,CACF5I,IAAM,mBAKlBkS,EAAO4E,GAAG,kBAAiB,SAACE,GACxBN,QAAQC,IAAIK,MAGhB9E,EAAO4E,GAAG,mBAAkB,WACxBtW,EAAUmI,GAAkB,CACxBC,IAAM,CACF5I,IAAM,mBAKlBkS,EAAO4E,GAAG,mBAAkB,WACxBtW,EAAUmI,GAAkB,CACxBC,IAAM,CACF5I,IAAM,mBAKlBkS,EAAO4E,GAAG,mBAAkB,WACxBtW,EAAUmI,GAAkB,CACxBC,IAAM,CACF5I,IAAM,mBAKlBkS,EAAO4E,GAAG,gBAAe,SAAArY,GACrBiY,QAAQC,IAAIlY,OA5DJ,gDAiEhB+B,EAAU5B,EAAiB,CACvBH,QAAU,uBACVC,SAAW,WAnEC,yDAAH,qDA8ErB,OANAiG,qBAAU,WAENkS,MAEF,IAEElV,EAEI,cAAC,EAAD,IAKJ,eAACqJ,EAAA,EAAD,CACI7G,MAAI,EACJ8G,WAAS,EACTG,GAAI,GAAIC,GAAI,GACZvN,UAAWR,EACXyH,UAAWkC,IACXC,UAAW,EACXjJ,MAAO,CACHtB,QAAU,kBACVG,cAAgB,MAChBD,eAAiB,gBACjBW,gBAAkB,WAX1B,UAcI,eAACyZ,GAAA,EAAD,CACIhZ,MAAO,CACHT,gBAAkB,UAClBN,OAAS,OACTga,UAAY,SACZva,QAAU,QALlB,UAQI,cAACwa,GAAA,EAAD,CACIlZ,MAAO,CAAEd,MAAQ,SACjBia,QA5IL,aAAI,IAAIC,IAAI5N,EAAShC,KAAI,SAAAiD,GAAO,YAAwB5J,IAAtB4J,EAAQ1I,WAA2B0I,EAAQ1I,eA6IxEsV,gBA1IK,SAAC5Z,GAClB,OAAO,cAAC6Z,GAAA,EAAD,6BAAY7Z,GAAZ,IAAmBO,MAAK,cAAIvB,KAAO,EAAEc,gBAAkB,WAA/B,OAAiD,OA0IpEga,WAAYpB,EACZ1B,SAAU,SAACC,EAAEzO,GAAH,OAAWmQ,EAAcnQ,IACnClI,KAAK,QACLyZ,YAAa,SAACC,GAAD,OACT,cAACxN,GAAA,EAAD,cACIiK,WAAS,EACTvM,QAAQ,WACRwM,MAAM,iBACNuD,SAAUxB,EACVjQ,MAAOkQ,EACP/B,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM+R,SAInClD,SAAU4B,EACVuB,WAAYtB,GACRmB,OAIhB,cAACI,GAAA,EAAD,CAAS7Z,MAAO,CAAEsN,OAAS,YAAa3D,QAAQ,YAAYmQ,YAAY,WAAWC,UAAQ,IAC3F,cAACf,GAAA,EAAD,CACIhZ,MAAO,CACHT,gBAAkB,UAClBN,OAAS,OACTP,QAAU,OACVI,WAAa,UALrB,SAQI,cAACuJ,GAAA,EAAD,CACItI,KAAK,QACLuI,QAAS,WACL/F,EAAUmI,GAAkB,CACxBC,IAAM,CACF5I,IAAM,iBALtB,SAUI,cAAC,IAAD,CAAiB7B,MAAM,OAAO0H,KAAMoS,UAG5C,cAACH,GAAA,EAAD,CAAS7Z,MAAO,CAAEsN,OAAS,YAAa3D,QAAQ,YAAYmQ,YAAY,WAAWC,UAAQ,IAC3F,cAACf,GAAA,EAAD,CACIhZ,MAAO,CACHT,gBAAkB,UAClBN,OAAS,OACTP,QAAU,OACVI,WAAa,SACbmb,YAAc,YANtB,SASI,cAACvQ,EAAA,EAAD,CACIC,QAAQ,YACRzJ,MAAM,UACN0J,UAAW,cAAC,IAAD,CAAiBhC,KAAMsS,MAClCna,KAAK,QACLuI,QAAS,WACL/B,EAAQgB,KAAK,eANrB,4BAYJ,cAACsS,GAAA,EAAD,CAAS7Z,MAAO,CAAEsN,OAAS,YAAa3D,QAAQ,YAAYmQ,YAAY,WAAWC,UAAQ,IAC3F,eAACf,GAAA,EAAD,CACIhZ,MAAO,CACHT,gBAAkB,UAClBN,OAAS,OACTP,QAAU,OACVI,WAAa,SACbmb,YAAc,YANtB,UASI,cAACE,GAAA,EAAD,CAAgBzS,SAAS,QAAQ0S,UAAY9N,EAAa,QAAU,WACpE,eAAC2J,GAAA,EAAD,CAAYtM,QAAQ,UAApB,iBAAsC2C,EAAU,sBAA2B,wBAGnF,eAAC0M,GAAA,EAAD,CACIhZ,MAAO,CACHT,gBAAkB,UAClB0Z,UAAY,UAHpB,UAMI,cAAC5Q,GAAA,EAAD,CACItI,KAAK,QACL+G,UAAWC,KAAOsT,IAClBC,WAAY,CAACC,MAAQ,KACrBjS,QAAS,WACL/B,EAAQgB,KAAK,cALrB,SAQI,cAAC,IAAD,CAAiBK,KAAM4S,QAE3B,cAACnS,GAAA,EAAD,CACItI,KAAK,QACL+G,UAAWC,KAAOsT,IAClBC,WAAY,CAACC,MAAQ,KACrBjS,QAxNO,WACnB0P,EAAYyC,OAAO,QAmNX,SAMI,cAACC,GAAA,EAAD,CACIxa,MAAM,cAGd,cAACmI,GAAA,EAAD,CACItI,KAAK,QACL+G,UAAWC,KAAOsT,IAClBC,WAAY,CAACC,MAAQ,KACrBjS,QAlQI,WAChB0P,EAAYyC,OAAO,UA6PX,SAMI,cAACE,GAAA,EAAD,CACIza,MAAM,gBAjClB,oB,+ECjQN0a,GAAgB3Z,IAAMC,OAAO,CAC/BE,QAAU,MAGRC,GAAQ,SAACC,GACX,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAEC,WAAWD,EAAQF,OAGtCuZ,GAAoBlZ,YAC7B,iCAD6C,uCAE7C,WAAMC,EAAN,gCAAAC,EAAA,6DAAaC,EAAb,EAAaA,gBAAgBS,EAA7B,EAA6BA,SACjBoI,EAAQ/I,EAAR+I,IADZ,kBAIkCpI,EAAUH,EAAY,CAC5CL,IAAM,eALlB,UAIcS,EAJd,QAQWJ,EAAYK,UAAUC,MAAMF,GARvC,wBASoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KAXvE,UAY8B6X,GAAc,6BACzBjQ,GADwB,IAE3BxJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,SAfzB,eAYkBC,EAZlB,iBAiBkBb,GAAM,KAjBxB,iCAkBmBa,EAAIF,MAlBvB,mFAqBeF,EAAgB,EAAD,KArB9B,0DAF6C,yDAwDpCgZ,IA5BuBnZ,YAChC,oCADgD,uCAEhD,WAAMC,EAAN,gCAAAC,EAAA,6DAAaC,EAAb,EAAaA,gBAAgBS,EAA7B,EAA6BA,SACjBoI,EAAQ/I,EAAR+I,IADZ,kBAIkCpI,EAAUH,EAAY,CAC5CL,IAAM,eALlB,UAIcS,EAJd,QAQWJ,EAAYK,UAAUC,MAAMF,GARvC,wBASoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KAXvE,UAY8B6X,GAAc,6BACzBjQ,GADwB,IAE3BxJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,SAfzB,eAYkBC,EAZlB,iBAiBkBb,GAAM,KAjBxB,iCAkBmBa,EAAIF,MAlBvB,mFAqBeF,EAAgB,EAAD,KArB9B,0DAFgD,yDA4BnBH,YAC7B,iCAD6C,uCAE7C,WAAMC,EAAN,kCAAAC,EAAA,6DAAaC,EAAb,EAAaA,gBAAgBS,EAA7B,EAA6BA,SACjBoI,EAAe/I,EAAf+I,IAAI3H,EAAWpB,EAAXoB,OADhB,kBAIkCT,EAAUH,EAAY,CAC5CL,IAAM,eALlB,UAIcS,EAJd,QAQWJ,EAAYK,UAAUC,MAAMF,GARvC,wBASoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KAXvE,UAY8B6X,GAAc,6BACzBjQ,GADwB,IAE3BxJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,OACTD,KAAOgB,KAhBvB,eAYkBd,EAZlB,iBAkBkBb,GAAM,KAlBxB,iCAmBmBa,EAAIF,MAnBvB,mFAsBeF,EAAgB,EAAD,KAtB9B,0DAF6C,0DA6BpCiZ,GAAkBpZ,YAC3B,+BAD2C,uCAE3C,WAAOC,EAAP,gCAAAC,EAAA,6DAAeC,EAAf,EAAeA,gBAAgBS,EAA/B,EAA+BA,SAA/B,kBAGkCA,EAAUH,EAAY,CAC5CL,IAAM,eAJlB,UAGcS,EAHd,QAOWJ,EAAYK,UAAUC,MAAMF,GAPvC,wBAQoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACnD4H,EAAQ/I,EAAR+I,IAXpB,UAY8BiQ,GAAc,6BACzBjQ,GADwB,IAE3BxJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,SAfzB,eAYkBC,EAZlB,iBAiBkBb,GAAM,KAjBxB,iCAkBmBa,EAAIF,MAlBvB,mFAqBeF,EAAgB,KAAIK,SAASH,OArB5C,0DAF2C,yDA4BlCgZ,GAAYrZ,YACrB,yBADqC,uCAErC,WAAMC,EAAN,kCAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAgBS,EAA5B,EAA4BA,SAA5B,kBAGkCA,EAAUH,EAAY,CAC5CL,IAAM,eAJlB,UAGcS,EAHd,QAOWJ,EAAYK,UAAUC,MAAMF,GAPvC,wBAQoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACnD4H,EAAQ/I,EAAR+I,IAXpB,UAY8BiQ,GAAc,6BACzBjQ,GADwB,IAE3BxJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,MACTgZ,aAAe,OACfC,QAAS,CACLC,OAAQ,kBACR,eAAgB,kBAChBC,KAAO,cApB3B,eAYkBlZ,EAZlB,OAuBkBH,EAAMsT,OAAOC,IAAIC,gBAAgBrT,EAAIF,MAvBvD,kBAwBmBD,GAxBnB,mFA2BeD,EAAgB,KAAIK,SAASH,OA3B5C,0DAFqC,yDAkC5BqZ,GAAoB1Z,YAC7B,iCAD6C,uCAE7C,WAAMC,EAAN,kCAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAgBS,EAA5B,EAA4BA,SAA5B,kBAEkCA,EAAUH,EAAY,CAC5CL,IAAM,eAHlB,UAEcS,EAFd,QAMWJ,EAAYK,UAAUC,MAAMF,GANvC,wBAOoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACnD4H,EAAc/I,EAAd+I,IAAI1C,EAAUrG,EAAVqG,MAVxB,UAW8B2S,GAAc,6BACzBjQ,GADwB,IAE3BxJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,QACTD,KAAOiG,KAfvB,eAWkB/F,EAXlB,iBAiBkBb,GAAM,KAjBxB,iCAkBmBa,EAAIF,MAlBvB,mFAqBeF,EAAgB,KAAIK,SAASH,OArB5C,0DAF6C,yDA4BpCsZ,GAAoB3Z,YAC7B,iCAD6C,uCAE7C,WAAMC,EAAN,gCAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAgBS,EAA5B,EAA4BA,SAA5B,kBAGkCA,EAAUH,EAAY,CAC5CL,IAAM,eAJlB,UAGcS,EAHd,QAOWJ,EAAYK,UAAUC,MAAMF,GAPvC,wBAQoBG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACnD4H,EAAQ/I,EAAR+I,IAXpB,UAY8BiQ,GAAc,6BACzBjQ,GADwB,IAE3BxJ,QAAO,iBAAayB,EAAb,YAAqBG,EAArB,WACPd,OAAS,YAfzB,eAYkBC,EAZlB,iBAiBkBb,GAAM,KAjBxB,iCAkBmBa,EAAIF,MAlBvB,mFAqBeF,EAAgB,KAAIK,SAASH,OArB5C,0DAF6C,yDCzK3C1D,GAAYid,cAAW,SAACC,GAAD,MAAU,CACnC7F,MAAQ,CACJjX,QAAS,OACTI,WAAY,SACZF,eAAgB,UAEpB4P,aAAe,CACXtP,MAAQ,QACRD,OAAS,OACTG,aAAe,MACfwN,WAAa,UACb6B,QAAU,OACVnP,QAAU,YAIZmc,GAAsB,SAAChc,GAEzB,IAAQuC,EAAYvC,EAAZuC,KAAK0Z,EAAOjc,EAAPic,GACPnZ,EAAW4D,cACTzC,EAAY8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM+a,UAArCjY,QACR,EAA6B/D,mBAAS,CAClCic,iBAAmB,IADvB,mBAAOC,EAAP,KAAeC,EAAf,KAIMvV,EAAUE,cAEhB,OAAI/C,EAEI,cAAC,EAAD,IAKJ,eAACqJ,EAAA,EAAD,CAAM7G,MAAI,EAAC8G,WAAS,EAACG,GAAI,GAAIC,GAAI,GAAIH,QAAS,EAA9C,UAC2B,YAAtBjL,EAAKiV,aACF,cAAClK,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAAC,KAAD,CACIpB,YAAaC,KACb7D,mBAAiB,EACjBF,aAAc,EACdH,mBAAiB,EACjBhI,KAAK,QACLmW,WAAS,EACTC,MAAM,SACN7I,OAAO,QACP3D,QAAQ,WACR8M,SAAU,SAACC,GACPoF,GAAW,SAAAD,GACP,OAAO,6BACAA,GADP,IAEID,iBAAmBnX,SAASiS,EAAEnM,OAAOtC,aAIjDmO,WAAY,CACRpW,MAAQ,CACJE,MAA6B,WAArB8B,EAAKiV,aAA4B,SAAW,SAExDZ,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAMmU,aAO3C,wBAEJ,cAAChP,EAAA,EAAD,CACI7G,MAAI,EACJiH,GAAI,GACJC,GAAI,GACJpN,MAAO,CACHtB,QAAU,OACVE,eAAiB,SACjBE,WAAa,UAPrB,SAUI,eAAC4Y,GAAA,EAAD,CAAa/N,QAAQ,YAArB,UAC2B,YAAtB3H,EAAKiV,aACF,cAACvN,EAAA,EAAD,CACI3J,KAAK,QACLG,MAAM,YACNF,MAAO,CACH4M,WAAa,SAEjBtE,QAAO,sBAAE,4BAAAzG,EAAA,sEACaU,EAAU8Y,GAAkB,CAC1C1Q,IAAM,CACF5I,IAAM,iBAAmBC,EAAKqB,KAElC4E,MAAQ4T,KALP,OACC3Z,EADD,OAQDmZ,GAAkB5Y,UAAUC,MAAMR,GAClCK,EAAU5B,EAAiB,CACvBH,QAAU,sBACVC,SAAW,aAGf8B,EAAU5B,EAAiB,CACvBH,QAAU,4BACVC,SAAW,WAhBd,2CAoBTmJ,UAAW,cAAC,IAAD,CAAiBhC,KAAM,cAAC+S,GAAA,EAAD,MA1BtC,iBA+BA,cAACjR,EAAA,EAAD,CAAQ3J,KAAK,QAAQic,UAAQ,EAA7B,kBAEJ,cAACtS,EAAA,EAAD,CACI3J,KAAK,QACLC,MAAO,CACH4M,WAAa,QACb1M,MAAQ,SAEZoI,QAAO,sBAAG,8CAAAzG,EAAA,+EAEwBU,EAAUH,EAAY,CAC5CL,IAAM,eAHR,UAEIS,EAFJ,QAMEJ,EAAYK,UAAUC,MAAMF,GAN9B,wBAOUG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KAC5CmR,cAAG,UAAD,OAAWtR,EAAX,YAAmBG,IAVtC,UAYyBR,EAAUwM,GAAwB,CACrDhN,IAAM,iBAAmBC,EAAKqB,OAbpC,QAYQ+Q,EAZR,OAgBMrF,GAAwBtM,UAAUC,MAAM0R,KAAY,EAC/BA,EAASvT,QAAtB6P,EAD2C,EAC3CA,IAAI2D,EADuC,EACvCA,MACRC,EAAMC,KAAKC,MAAM9D,IAEb5G,OAAS,IACb2K,KAAQC,IAAMC,KAASF,QAAQC,IACzBE,EAASC,GAAkBP,EAAID,GAChBI,KAAQM,UAAUH,GAE1BO,SAAQ,SAAAC,GACjB,IAAMrT,EAAMsT,OAAOC,IAAIC,gBAAgBH,GACvC7O,EAAQgB,KAAK,4BAA8BxF,EAAM,0BA3B/D,0DAkCFQ,EAAU5B,EAAiB,CACvBH,QAAU,8CACVC,SAAW,WApCb,0DAwCVmJ,UAAW,cAAC,IAAD,CAAiBhC,KAAMqU,MA9CtC,kBAkDA,cAACvS,EAAA,EAAD,CACI3J,KAAK,QACLG,MAAM,UACNoI,QAAO,sBAAE,kDAAAzG,EAAA,+EAEyBU,EAAUH,EAAY,CAC5CL,IAAM,eAHT,UAEKS,EAFL,QAMGJ,EAAYK,UAAUC,MAAMF,GAN/B,wBAOWG,EAAaH,EAAY3B,QAAzB8B,SACFC,OAA4BC,IAArBF,EAASG,QAAwBH,EAASG,QAAU,YAC3DC,OAAyBF,IAAlBF,EAASI,KAAqBJ,EAASI,KAAO,KACrDkR,EAASC,cAAG,UAAD,OAAWtR,EAAX,YAAmBG,IAVvC,UAY0BR,EAAUwM,GAAwB,CACrDhN,IAAM,iBAAmBC,EAAKqB,OAbrC,QAYS+Q,EAZT,OAgBOrF,GAAwBtM,UAAUC,MAAM0R,KAAY,EAC/BA,EAASvT,QAAtB6P,EAD2C,EAC3CA,IAAI2D,EADuC,EACvCA,MACRC,EAAMC,KAAKC,MAAM9D,IAEb5G,OAAS,IACb2K,KAAQC,IAAMC,KAASF,QAAQC,IACzBE,EAASC,GAAkBP,EAAID,IAC/BS,EAAeL,KAAQM,UAAUH,IAE1BI,WAAU,SAAAkH,GACnBjI,EAAOgB,KAAK,WAAW,CACnBC,IAAMjB,EAAOrN,GACb5E,KAAOka,EACPtV,GAAK5E,EAAKqB,SAIlByR,EAAaK,SAAQ,SAAAC,GACjB,IAAMrT,EAAMsT,OAAOC,IAAIC,gBAAgBH,GACvC7O,EAAQgB,KAAK,4BAA8BxF,EAAM,0BAnChE,0DA0CDQ,EAAU5B,EAAiB,CACvBH,QAAU,8CACVC,SAAW,WA5Cd,0DAgDTmJ,UAAW,cAAC,IAAD,CAAiBhC,KAAMuU,MAnDtC,mBAuDA,cAACzS,EAAA,EAAD,CACI3J,KAAK,QACLG,MAAM,YACNoI,QAAS,WACL/B,EAAQgB,KAAK,uBAAyBvF,EAAKqB,MAE/CuG,UAAW,cAAC,IAAD,CAAiBhC,KAAM,cAAC+S,GAAA,EAAD,MANtC,oBAUA,cAACjR,EAAA,EAAD,CACI3J,KAAK,QACLC,MAAO,CACH4M,WAAa,SACb1M,MAAQ,SAEZoI,QAASoT,EACT9R,UAAW,cAAC,IAAD,CAAiBhC,KAAM,cAAC+S,GAAA,EAAD,MAPtC,6BAwKLyB,OAvJf,SAA2B3c,GAEvB,IAAQ4c,EAAsC5c,EAAtC4c,OAAOrO,EAA+BvO,EAA/BuO,QAAesO,EAAgB7c,EAAvBuC,KACf0B,EAAY8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM2b,gBAArC7Y,QACFhE,EAAUpB,KAEhB,OAAIoF,EAEI,cAAC,EAAD,IAKJ,cAACiS,GAAA,EAAD,CACIpV,KAAM8b,EACNrO,QAASA,EACT4H,kBAAmBC,KACnBC,cAAe,CACX1U,QAAU,IACVpB,MAAQ,CACJf,OAAS,QACTG,aAAe,SAGvBS,UAAWH,EAAQiW,MAXvB,SAaI,cAACI,GAAA,EAAD,CACIC,GAAIqG,EADR,SAGI,qBAAKxc,UAAWH,EAAQ8O,aAAxB,SACI,eAACzB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,cAACnB,GAAA,EAAD,CACIlM,KAAK,QACLmW,WAAS,EACT8F,UAAQ,EACR7F,MAAM,aACNlO,MAAOqU,EAAYjZ,IACnBsG,QAAQ,WACRyM,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM4U,aAM3C,cAACzP,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,cAACnB,GAAA,EAAD,CACIlM,KAAK,QACLmW,WAAS,EACT8F,UAAQ,EACR7F,MAAM,WACNlO,MAAOqU,EAAYnM,cACnBxG,QAAQ,WACRyM,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM+O,aAM3C,cAAC5J,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAACnB,GAAA,EAAD,CACIlM,KAAK,QACLmW,WAAS,EACTC,MAAM,eACNlO,MAAOqU,EAAYG,WACnB9S,QAAQ,WACRyM,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAMC,aAM3C,cAACkF,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAACnB,GAAA,EAAD,CACIlM,KAAK,QACLic,SAAwC,SAA7BM,EAAYrF,aACvBf,WAAS,EACTC,MAAM,mBACNlO,MAAO,IAAI4I,KAAKyL,EAAYjM,kBAAkBqM,cAAcC,MAAM,KAAK,GACvEhT,QAAQ,WACRyM,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAMgV,aAM3C,cAAC7P,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAACnB,GAAA,EAAD,CACIlM,KAAK,QACLmW,WAAS,EACTC,MAAM,eACNlO,MAAOqU,EAAYrF,aACnBtN,QAAQ,WACRyM,WAAY,CACRpW,MAAQ,CACJE,MAAoC,WAA5Boc,EAAYrF,aAA4B,SAAW,SAE/DZ,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAMmU,aAM3C,cAAChP,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAAC,KAAD,CACIpB,YAAaC,KACb7D,mBAAiB,EACjB4T,SAAwC,SAA7BM,EAAYrF,aACvB/O,aAAc,EACdH,mBAAiB,EACjBgE,eAAe,EACfyK,OAAO,OACPzW,KAAK,QACLmW,WAAS,EACTC,MAAmC,WAA5BmG,EAAYrF,aAA4B,oBAAsB,gBACrEhP,MAAOqU,EAAYzE,kBACnBlO,QAAQ,WACRyM,WAAY,CACRpW,MAAQ,CACJE,MAAoC,WAA5Boc,EAAYrF,aAA4B,SAAW,SAE/DZ,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAMmU,aAM3C,cAAC,GAAD,CAAqBL,GAAI1N,EAAShM,KAAMsa,cCxTjDO,OA1Ff,YAA0C,IAAD,EAAdP,EAAc,EAAdA,YAEvB,EAAuB3c,oBAAS,GAAhC,mBAAOY,EAAP,KAAYkT,EAAZ,KACMlN,EAAUE,cAWhB,OACI,eAACE,EAAA,EAAD,CAEIE,OAAK,EACLS,cAbW,WACfmM,GAAQ,IAaJzT,MAAO,CACH4M,WAAyC,WAA5B0P,EAAYrF,aAA4B,UAAY,GACjEzP,OAAS,UACTsV,WAAa,QAPrB,UAUI,cAACrV,EAAA,EAAD,UAAY6U,EAAYnM,gBACxB,cAAC1I,EAAA,EAAD,CACIzH,MAAO,CACHC,UAAY,UAFpB,SAIEqc,EAAYG,aACd,cAAChV,EAAA,EAAD,CACIzH,MAAO,CACHC,UAAY,UAFpB,SAIEqc,EAAYjM,iBAAiBsM,MAAM,KAAK,KAC1C,cAAClV,EAAA,EAAD,CACIzH,MAAO,CACHC,UAAY,UAFpB,SAIEqc,EAAYrF,eACd,cAACxP,EAAA,EAAD,CACIzH,MAAO,CACHC,UAAY,UAFpB,SAKI,cAAC,KAAD,CACI+H,YAAY,OACZC,MAAOqU,EAAY9L,YACnBpI,mBAAiB,EACjBF,aAAc,EACdH,mBAAiB,EACjByO,OAAO,WAGf,cAAC/O,EAAA,EAAD,CACIzH,MAAO,CACHC,UAAY,UAFpB,SAKI,cAAC,KAAD,CACI+H,YAAY,OACZC,MAAOqU,EAAYS,gBACnB3U,mBAAiB,EACjBF,aAAc,EACdH,mBAAiB,EACjByO,OAAO,WAGf,cAAC/O,EAAA,EAAD,CACIzH,MAAO,CACHC,UAAY,UAFpB,SAKI,cAAC,MAAD,GACI+H,YAAY,OACZC,MAAOqU,EAAYzE,kBACnB9P,mBAAiB,EACjBgE,eAAe,EACf3D,mBAAiB,EACjBF,aAAc,GANlB,+DAQW,QARX,MAWJ,cAAC,GAAD,CAAmBlG,KAAMsa,EAAaD,OAAQ9b,EAAMyN,QA5ExC,WAChBzH,EAAQiP,SACR/B,GAAQ,QAKC6I,EAAYjZ,MCSvB/E,GAAYid,cAAW,SAACC,GAAD,MAAU,CACnCwB,OAAS,CACLre,SAAW,WACXiO,WAAa,eAIfqQ,GAAmBC,sBAAW,SAACzd,EAAM0d,GACvC,OACI,cAACC,GAAA,EAAD,cACIlQ,UAAU,KACViQ,IAAKA,GACD1d,OA6LD4d,OAxLf,SAAyB5d,GAErB,IAAMC,EAAUpB,KACViI,EAAUE,cACVlE,EAAW4D,cACEoW,EAAiB/V,aAAY,SAAA5F,GAAK,OAAEA,EAAM2b,gBAArDnR,SACA1H,EAAY8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM2b,gBAArC7Y,QAER,EAAuB/D,oBAAS,GAAhC,mBAAOY,EAAP,KAAYkT,EAAZ,KAEA,EAAwB9T,mBAAS,GAAjC,mBAAOgJ,EAAP,KAAaC,EAAb,KACA,EAAsCjJ,mBAAS,GAA/C,mBAAOkJ,EAAP,KAAoBC,EAApB,KACA,EAA2BnJ,mBAAS,IAApC,mBAAO2d,EAAP,KAAcC,EAAd,KAWMvJ,EAAc,WAChBP,GAAQ,GACRlN,EAAQiP,UAGZ9O,qBAAU,WACN+M,GAAQ,GACRlR,EAAUsY,GAAkB,CACxBlQ,IAAM,CACF5I,IAAM,sBAGhB,IAEF,MAAwCpC,mBAAS,IAAIkR,KAAKA,KAAK2M,OAAOzM,sBAAtE,mBAAO0M,EAAP,KAAqBC,EAArB,KAYA,OAAIha,EAEI,cAAC,EAAD,IAMJ,cAAC,KAAD,CAAyBia,MAAOC,KAAhC,SACA,eAACC,GAAA,EAAD,CACIC,YAAU,EACVvd,KAAMA,EACNyN,QAASgG,EACT+J,oBAAqBd,GACrBnH,cAAe,CACX9V,MAAQ,CACJf,OAAS,QACTG,aAAe,SAGvBY,MAAO,CACHT,gBAAkB,UAClBD,QAAU,OACVL,OAAS,QACTG,aAAe,QAfvB,UAkBI,cAAC4e,GAAA,EAAD,CAAQne,UAAWH,EAAQsd,OAA3B,SACI,eAACiB,GAAA,EAAD,CACIje,MAAO,CACHpB,eAAiB,iBAFzB,UAKI,cAACqN,GAAA,EAAD,CACIlM,KAAK,QACL4J,QAAQ,WACRwM,MAAM,SACNC,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC,IAAD,CAAiBiJ,KAAM+R,SAInC3Z,MAAO,CACHke,UAAY,QACZC,KAAO,EACPC,YAAc,QAElBC,UAAW,SAAC3H,GACR6G,EAAU7G,EAAEnM,OAAOtC,QAEvB2R,WAAY,SAAClD,GACK,UAAVA,EAAEiC,KACFpW,EAAUwY,GAAgB,CACtBpQ,IAAM,CACF5I,IAAG,iCAA6Bub,UAMpD,cAAC,KAAD,CACIgB,gBAAc,EACd3U,QAAQ,SACRuI,OAAO,aACPnS,KAAK,QACLuN,OAAO,QACP1G,GAAG,qBACHuP,MAAM,cACNlO,MAAOwV,EACPhH,SAjFK,SAAC3F,GACtB4M,EAAgB,IAAI7M,KAAKC,IACzB,IAAIyN,EAAU,IAAI1N,KAAKC,GACvBvO,EAAUwY,GAAgB,CACtBpQ,IAAM,CACF5I,IAAG,oCAAgCwc,QA6E3BC,oBAAqB,CACnB,aAAc,eAEhBxe,MAAO,CACHiZ,UAAY,aACZkF,KAAO,KAGf,cAAC9V,GAAA,EAAD,CAAYoW,aAAa,EAAOze,MAAO,CAAEsN,OAAS,WAAavN,KAAK,QAAQuI,QAAS0L,EAArF,SACI,cAAC2G,GAAA,EAAD,CAAOza,MAAM,qBAIzB,cAAC6M,EAAA,EAAD,CAAMC,WAAS,EAAf,SACI,cAACD,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAIpN,MAAO,CAAEV,QAAU,QAA9C,SACI,cAACyJ,EAAA,EAAD,CACIjC,UAAWkC,IACXC,UAAW,EACXjJ,MAAO,CACHkJ,UAAY,QACZvK,SAAW,YALnB,SAQI,eAACwK,EAAA,EAAD,CACIC,cAAY,EACZrJ,KAAK,SAFT,UAII,cAACsJ,EAAA,EAAD,UACI,eAAC1C,EAAA,EAAD,WACI,cAACc,EAAA,EAAD,CAAWzH,MAAO,CAAE0e,WAAa,KAAjC,2BACA,cAACjX,EAAA,EAAD,CAAWzH,MAAO,CAAE0e,WAAa,IAAKze,UAAY,UAAlD,qBACA,cAACwH,EAAA,EAAD,CAAWzH,MAAO,CAAE0e,WAAa,IAAKze,UAAY,UAAlD,8BACA,cAACwH,EAAA,EAAD,CAAWzH,MAAO,CAAE0e,WAAa,IAAKze,UAAY,UAAlD,0BACA,cAACwH,EAAA,EAAD,CAAWzH,MAAO,CAAE0e,WAAa,IAAKze,UAAY,UAAlD,yBACA,cAACwH,EAAA,EAAD,CAAWzH,MAAO,CAAE0e,WAAa,IAAKze,UAAY,UAAlD,mBACA,cAACwH,EAAA,EAAD,CAAWzH,MAAO,CAAE0e,WAAa,IAAKze,UAAY,UAAlD,yBAGR,eAACqJ,EAAA,EAAD,WACKiT,EAAahT,MAAMZ,EAAOE,EAAYF,EAAOE,EAAcA,GAAaW,KAAI,SAAAmV,GAAK,OAC9E,cAAC,GAAD,CAAkBrC,YAAaqC,OAEnC,cAAChY,EAAA,EAAD,CAAU3G,MAAO,CAAErB,SAAW,WAAY8K,OAAS,EAAG2E,MAAQ,GAA9D,SACI,cAACpE,EAAA,EAAD,CACIC,mBAAoB,CAAC,EAAG,GAAI,KAC5BC,MAAOqS,EAAazS,OACpBjB,YAAaA,EACbF,KAAMA,EACNwB,aA3JX,SAACC,EAAOC,GAC7BzB,EAAQyB,IA2JwBC,oBAxJJ,SAACF,GAC7BtB,GAAgBsB,EAAMG,OAAOtC,OAC7BW,EAAQ,IAuJwB4B,kBAAkB,wB,oBChI3ChL,oBAAWsN,GAAXtN,EA9Ef,SAAqBC,GAEjB,IAAM8G,EAAUE,cAChB,EAAuB9G,oBAAS,GAAhC,mBAAOY,EAAP,KAAYkT,EAAZ,KACQ/P,EAAY8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM2b,gBAArC7Y,QACUkb,EAAYpY,aAAY,SAAA5F,GAAK,OAAEA,EAAM+a,UAA/CjY,QACFmb,EATC,IAAIC,gBAAgBtL,cAAc8J,QAUnChJ,EAAMuK,EAAME,IAAI,OAChBpW,EAAOkW,EAAME,IAAI,QACfrf,EAAYD,EAAZC,QAEFsU,EAAc,WAEH,gBAATrL,EACApC,EAAQiP,SAERjP,EAAQgB,KAAK,KAGjBkM,GAAQ,IAOZ,OAJA/M,qBAAU,WACN+M,GAAQ,KACV,IAEE/P,GAAWkb,EAEP,cAAC,EAAD,IAKJ,cAACjJ,GAAA,EAAD,CACIpV,KAAMA,EACNyN,QAASgG,EACT4B,kBAAmBC,KACnBC,cAAe,CACX1U,QAAU,IACVpB,MAAQ,CACJf,OAAS,QACTG,aAAe,SAR3B,SAYI,cAAC2W,GAAA,EAAD,CACIC,GAAIzV,EADR,SAGI,sBAAKV,UAAWH,EAAQgP,iBAAxB,UACI,cAACsQ,GAAA,EAAD,CACIjf,KAAK,QACL4J,QAAQ,WACRrB,QAAS0L,EACThU,MAAO,CACHrB,SAAW,WACXF,KAAO,GACPD,IAAM,EACNe,gBAAkB,WAR1B,SAWI,cAACob,GAAA,EAAD,MAEJ,wBACI3a,MAAO,CACHoS,OAAS,OACT7S,gBAAkB,WAEtB+I,QAAS0L,EACTiL,IAAK3K,EAAI,aACTpV,MAAM,OACND,OAAO,mB,oBCjEhBX,GAlBG,CACd4gB,cAAgB,CACZ3f,gBAAkB,UAClBb,QAAU,OACVE,eAAiB,SACjBE,WAAa,SACb2P,QAAU,OACVrP,aAAe,QAEnB+f,gBAAkB,CACdngB,gBAAkB,UAClBE,MAAQ,QACRD,OAAS,OACTwP,QAAU,OACVnP,QAAU,SCiIHE,mBAAWsN,GAAXtN,EAnIf,SAAkBC,GAEd,IAAQuY,EAAgB3C,OAAO4C,QAAQ,YAA/BD,YACR,EAAuBrY,oBAAS,GAAhC,mBAAOY,EAAP,KAAYkT,EAAZ,KACMlR,EAAW4D,cACTzC,EAAY8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM+B,YAArCe,QACAf,EAAa6D,aAAY,SAAA5F,GAAK,OAAEA,EAAM+B,SAASyI,YAA/CzI,SACR,EAAyBhD,mBAASgD,EAASG,SAA3C,mBAAOsc,EAAP,KAAaC,EAAb,KACA,EAAuB1f,mBAASgD,EAASI,MAAzC,mBAAOA,EAAP,KAAYuc,EAAZ,KACM/Y,EAAUE,cACR/G,EAAYD,EAAZC,QAmBR,OAJAgH,qBAAU,WACN+M,GAAQ,KACV,IAEE/P,EAEI,cAAC,EAAD,IAKJ,cAACiS,GAAA,EAAD,CACIpV,KAAMA,EACNyN,QA1BY,WAChBzH,EAAQiP,SACR/B,GAAQ,IAyBJmC,kBAAmBC,KACnBC,cAAe,CACX9V,MAAQ,CACJf,OAAS,QACTG,aAAe,SAGvBS,UAAWH,EAAQwf,cAVvB,SAYI,cAACnJ,GAAA,EAAD,CACIC,GAAIzV,EADR,SAGI,qBAAKV,UAAWH,EAAQyf,gBAAxB,SACI,eAACpS,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAACnB,GAAA,EAAD,CACIhE,MAAOmX,EACPzV,QAAQ,WACR2D,OAAO,QACP4I,WAAS,EACTC,MAAM,eACNoJ,YAAY,UACZ9I,SAAU,SAACC,GACP2I,EAAS3I,EAAEnM,OAAOtC,QAEtBmO,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC6gB,GAAA,EAAD,WAMpB,cAACzS,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAACnB,GAAA,EAAD,CACItC,QAAQ,WACR2D,OAAO,QACP4I,WAAS,EACTC,MAAM,OACNlO,MAAOlF,EACP0T,SA3DH,SAACC,GACtB4I,EAAQ5I,EAAEnM,OAAOtC,QA2DOmO,WAAY,CACRC,eACI,cAACC,GAAA,EAAD,CAAgB3X,SAAS,QAAzB,SACI,cAAC8gB,GAAA,EAAD,WAMpB,cAAC1S,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAAC1D,EAAA,EAAD,CACIxJ,MAAM,UACNgW,WAAS,EACTvM,QAAQ,YACR5J,KAAK,SACL6J,UAAW,cAAC,IAAD,CAAiBhC,KAAM4S,MAClClS,QAAO,uCAAG,WAAMoO,GAAN,eAAA7U,EAAA,sEAEoBU,EAASb,EAAa,CAC5CK,IAAM,YACNC,KAAO,CACHc,QAAUsc,EACVrc,KAAO0B,SAAS1B,OANlB,OAEAP,EAFA,OAUFd,EAAae,UAAUC,MAAMF,IAC7BD,EAAU5B,EAAiB,CACvBH,QAAU,2BACVC,SAAW,aAEf8F,EAAQgB,KAAK,KA9F7CyQ,EAAYyC,OAAO,YAiGalY,EAAU5B,EAAiB,CACvBH,QAAU,gEACVC,SAAW,WApBb,2CAAH,sDANX,gCCvFbnC,GAhBG,CACdqX,MAAQ,CACJjX,QAAU,OACVE,eAAiB,SACjBE,WAAa,SACb2P,QAAU,QAEdD,aAAe,CACX5B,WAAa,UACb3N,OAAS,OACTC,MAAQ,QACRuP,QAAU,OACVnP,QAAU,SCkGHE,mBAAWsN,GAAXtN,EAlGf,SAAgCC,GAE5B,MAAuBE,oBAAS,GAAhC,mBAAOY,EAAP,KAAYkT,EAAZ,KACMlN,EAAUE,cACRG,EAAO8Y,cAAP9Y,GACAlH,EAAYD,EAAZC,QACF6C,EAAW4D,cACVzC,EAAW8C,aAAY,SAAA5F,GAAK,OAAEA,EAAM2b,gBAApC7Y,QAEDsQ,EAAc,WAChBzN,EAAQiP,SACR/B,GAAQ,IAOZ,OAJA/M,qBAAU,WACN+M,GAAQ,KACV,IAEE/P,EAEI,cAAC,EAAD,IAKJ,cAACiS,GAAA,EAAD,CACIpV,KAAMA,EACNyN,QAASgG,EACT4B,kBAAmBC,KACnBC,cAAe,CACX1U,QAAU,IACVpB,MAAQ,CACJT,gBAAkB,UAClBN,OAAS,QACTG,aAAe,SAGvBS,UAAWH,EAAQiW,MAZvB,SAcI,cAACI,GAAA,EAAD,CACIC,GAAIzV,EADR,SAGI,eAACwM,EAAA,EAAD,CAAMC,WAAS,EAACnN,UAAWH,EAAQ8O,aAAcvB,QAAS,EAA1D,UACI,cAACF,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,oBACIpN,MAAO,CACHC,UAAY,UAFpB,yCAMJ,cAAC8M,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAAC1D,EAAA,EAAD,CACIwM,WAAS,EACTnW,KAAK,QACL4J,QAAQ,YACRzJ,MAAM,YACN0J,UAAW,cAAC,IAAD,CAAiBhC,KAAM+X,MAClCrX,QAAO,sBAAG,4BAAAzG,EAAA,sEACiBU,EAAU+Y,GAAkB,CAC/C3Q,IAAM,CACF5I,IAAM,iBAAmB6E,MAH3B,OACAwN,EADA,OAOFkH,GAAkB7Y,UAAUC,MAAM0R,IAClC7R,EAAU5B,EAAiB,CACvBH,QAAU,gCACVC,SAAW,aAEfuT,KAEAzR,EAAS5B,EAAiB,CACtBH,QAAU,8BACVC,SAAW,WAhBb,2CANd,sBA8BJ,cAACsM,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,EAAGC,GAAI,EAAtB,SACI,cAAC1D,EAAA,EAAD,CACIwM,WAAS,EACTnW,KAAK,QACL4J,QAAQ,YACRzJ,MAAM,UACNoI,QAAS0L,EALb,gCC2HTxU,mBAAWsN,GAAXtN,EA3Mf,SAAgBC,GAEZ,MAAqBE,mBAAS,GAA9B,mBAAO2E,EAAP,KAAWsb,EAAX,KACA,EAAuBjgB,oBAAS,GAAhC,mBAAOY,EAAP,KAAYkT,EAAZ,KACA,EAAuC9T,mBAAS,GAAhD,mBAAOkgB,EAAP,KAAoBC,EAApB,KACA,EAAqBngB,oBAAS,GAA9B,mBAAOogB,EAAP,KAAWC,EAAX,KAEMvc,EAAO+C,YAAYV,GACnBS,EAAUE,cACVwZ,EAAWzM,cACX4H,EAbC,IAAI0D,gBAAgBtL,cAAc8J,QAajByB,IAAI,QACtBxc,EAAW4D,cACjB,EAAyC1G,EAAMC,QAAvCkP,EAAR,EAAQA,YAAYD,EAApB,EAAoBA,iBAGJzI,EAAS+Z,EAAjBrf,MAEFsf,EAAe,WACjB,IAAMC,EAAiB1c,EAAK2c,QAAO,SAAAC,GAAG,OAAEA,EAAItc,YAAYmC,EAAKnC,aAC7D,YAA6BlB,IAAtBsd,EAAe,GAAmB1b,SAAS0b,EAAe,GAAG7b,KAAO,IAGzEgc,EAAaJ,KAAkBha,EAAKhC,UAAqB,WAATkX,GAAqB3W,SAASH,GAAOG,SAASyB,EAAK/B,eAAiB,qBAAuB,uCAAkD,WAATiX,EAAoBlV,EAAK/B,cAAgB+B,EAAKhC,UAElO8P,EAAc,WAChBzN,EAAQiP,SACR/B,GAAQ,IA+CN8M,EAAkBC,uBAAY,SAAA9J,GAChC,IAAI+J,EAAUC,SAASC,eAAe,WACzB,SAATjK,EAAEiC,KAA4B,SAAVjC,EAAEkK,MACtBH,EAAQI,UAEd,IA6BF,OA3BAna,qBAAU,WAGN,OAFAga,SAASI,iBAAiB,WAAWP,GAE9B,WACHG,SAASK,oBAAoB,WAAWR,MAE9C,CAACA,IAEH7Z,qBAAU,WACDR,EAAKhC,UAAYgc,IAAiBzb,SAASH,IAAS,EACrD0b,GAAO,GAEPA,GAAO,KAEb,CAAC9Z,EAAKhC,SAASI,IAEjBoC,qBAAU,WAEO,WAAT0U,IACDwE,EAAO1Z,EAAK5B,KACZwb,EAAgC,IAAhB5Z,EAAKlC,WAGxByP,GAAQ,KAEV,IAGE,cAACkC,GAAA,EAAD,CACIpV,KAAMA,EACNyN,QAASgG,EACT4B,kBAAmBC,KACnBC,cAAe,CACX1U,QAAU,KAEd4f,sBAAoB,EACpBnhB,UAAW+O,EARf,SAUI,cAACmH,GAAA,EAAD,CACIC,GAAIzV,EADR,SAGI,eAACwM,EAAA,EAAD,CACIC,WAAS,EACTnN,UAAW8O,EACX1B,QAAS,EACTrG,GAAG,YAJP,UAMI,cAACmG,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACA,cAAC,KAAD,CACIpB,YAAaC,KACbiK,WAAS,EACT8F,SAAU9V,EAAKvC,MACfgG,QAAQ,WACRwM,MAAM,WACNpW,KAAK,QACLuN,OAAO,OACPrF,MAAOxD,SAASob,GAChBoB,WAAY,CACRjhB,MAAQ,CACJC,UAAY,WAGpBwW,SAjHG,SAACC,GACD,KAAnBA,EAAEnM,OAAOtC,MAAe6X,EAAgB,GAAKA,EAAgBpJ,EAAEnM,OAAOtC,QAiHtDjI,MAAO,CACHT,gBAAkB,eAI1B,cAACwN,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,cAAC,KAAD,CACIpB,YAAaC,KACbiV,WAAS,EACTvd,SAAQoc,GAAOG,KAAkBha,EAAKhC,UAAqB,WAATkX,GAAqB9W,EAAMG,SAASyB,EAAK/B,gBAC3Fgd,WAAYb,EACZpK,WAAS,EACTC,MAAM,WACNlO,MAAOxD,SAASH,GAChBmS,SA5HH,SAACC,GACC,KAAnBA,EAAEnM,OAAOtC,MAAe2X,EAAO,GAAKA,EAAOlJ,EAAEnM,OAAOtC,QA4HhC0B,QAAQ,WACR5J,KAAK,QACLkhB,WAAY,CACRjhB,MAAQ,CACJC,UAAY,eAK5B,cAAC8M,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAvB,SACI,eAACsK,GAAA,EAAD,WACI,cAAChO,EAAA,EAAD,CACI9C,GAAG,UACH+C,QAAQ,YACR5J,KAAK,QACLmW,WAAS,EACTtM,UAAW,cAAC,IAAD,CAAiBhC,KAAMwZ,MAClClhB,MAAM,UACNoI,QAAS,SAACoO,GACNA,EAAE2K,iBA5If,WAEf,IAAIpc,EAAc,KAARX,EAAa,EAAIG,SAASH,GACjCyb,GACC9a,EAAMiB,EAAKhC,UACF,WAATkX,GAAqBnW,EAAMR,SAASyB,EAAK/B,gBACzC+b,KAAkBha,EAAKhC,WAEd,OAATkX,EAEA7Y,EAASqB,EAAQ,6BACVsC,GADS,IAEZ/B,cAAgB+B,EAAKhC,SACrBA,SAAWe,EACXjB,SAAWS,SAASob,QAIpB3Z,EAAKlC,WAAaS,SAASob,IAC3Btd,EAAU4C,GAAY,6BACfe,GADc,IAEjBlC,SAAWS,SAASob,OAIxB3Z,EAAK5B,MAAQA,GACb/B,EAAUyC,EAAU,6BACbkB,GADY,IAEf5B,IAAMW,OAKlB+O,KA4G4BsN,IATR,SAYc,WAATlG,EAAoB,SAAW,SAEpC,cAAC1R,EAAA,EAAD,CACIC,QAAQ,YACR5J,KAAK,QACLmW,WAAS,EACThW,MAAM,YACNoI,QAAS,WAEL0L,KAPR,mCC7GbxU,mBAAWlB,GAAXkB,EAvEf,SAAaC,GAEX,IAAM8C,EAAW4D,cACjB,EAA+B1G,EAAMC,QAA7B+N,EAAR,EAAQA,KAAKC,EAAb,EAAaA,cACPwK,EAAYqJ,iBAAO,MACnBC,EAAc,WAChBtJ,EAAUuJ,QAAQC,SAyBtB,OAtBAhb,qBAAU,WAQN,OANAga,SAASI,iBAAiB,WAAU,SAACpK,GAC7BA,EAAEiL,SAAoB,KAATjL,EAAEiC,KACf6I,OAID,WACLd,SAASK,oBAAoB,WAAU,SAACrK,GAChCA,EAAEiL,SAAoB,KAATjL,EAAEiC,KACf6I,UAKZ,IAOA,cAAC,IAAD,UACA,eAACzU,EAAA,EAAD,CAAM/M,MAAO,CAAET,gBAAkB,QAAUyN,WAAS,EAAC4U,WAAW,SAAS/hB,UAAW4N,EAAMR,QAAS,EAAnG,UACI,cAAC,GAAD,CAAQiL,UAAWA,IACnB,eAACnL,EAAA,EAAD,CAAM7G,MAAI,EAACiH,GAAI,GAAIC,GAAI,GAAIvN,UAAW6N,EAAtC,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOmU,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,eAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,uBAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,0BAAlB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SACI,cAAC,GAAD,SAGR,cAAC,GAAD,CACIlU,iBApCM,WAChBrL,EAAUzB,mBC2CDihB,GArFU1hB,YAAY,CACjCkD,KAAO,eACPjD,aAAe,CACX8K,SAAW,GACXkJ,IAAM,GACN5Q,SAAU,EACVqG,OAAS,MAEbrJ,SAAW,GACX8E,cAAgB,SAACC,GAEbA,EAAQC,QAAQmV,GAAkBlV,SAAQ,SAAA/E,GACtCA,EAAM8C,SAAU,KAEnBgC,QAAQmV,GAAkBpY,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACzCD,EAAM8C,SAAU,EAChB9C,EAAMwK,SAAWvK,KAEpB6E,QAAQmV,GAAkBjV,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACxCD,EAAM8C,SAAU,EAChB9C,EAAMmJ,OAASlJ,KAGlB6E,QAAQqV,GAAgBpV,SAAQ,SAAA/E,GAC7BA,EAAM8C,SAAU,KAEnBgC,QAAQqV,GAAgBtY,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACvCD,EAAM8C,SAAU,EAChB9C,EAAMwK,SAAWvK,KAEpB6E,QAAQqV,GAAgBnV,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACtCD,EAAM8C,SAAU,EAChB9C,EAAMmJ,OAASlJ,KAGlB6E,QAAQsV,GAAUrV,SAAQ,SAAA/E,GACvBA,EAAM8C,SAAU,KAEnBgC,QAAQsV,GAAUvY,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACjCD,EAAM8C,SAAU,EAChB9C,EAAM0T,IAAMzT,KAEf6E,QAAQsV,GAAUpV,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAChCD,EAAM8C,SAAU,EAChB9C,EAAMmJ,OAASlJ,KAGlB6E,QAAQoV,GAAkBnV,SAAQ,SAAA/E,GAC/BA,EAAM8C,SAAU,KAEnBgC,QAAQoV,GAAkBrY,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACzCD,EAAM8C,SAAU,EAChB9C,EAAMwK,SAASvK,EAAQwC,KAAOxC,KAEjC6E,QAAQoV,GAAkBlV,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACxCD,EAAM8C,SAAU,EAChB9C,EAAMmJ,OAASlJ,KAGlB6E,QAAQ2V,GAAkB1V,SAAQ,SAAA/E,GAC/BA,EAAM8C,SAAU,KAEnBgC,QAAQ2V,GAAkB5Y,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACzCD,EAAM8C,SAAU,EAChB9C,EAAMwK,SAAWvK,KAEpB6E,QAAQ2V,GAAkBzV,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACxCD,EAAM8C,SAAU,EAChB9C,EAAMmJ,OAASlJ,KAGlB6E,QAAQ4V,GAAkB3V,SAAQ,SAAA/E,GAC/BA,EAAM8C,SAAU,KAEnBgC,QAAQ4V,GAAkB7Y,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACzCD,EAAM8C,SAAU,EAChB9C,EAAMwK,SAAWvK,KAEpB6E,QAAQ4V,GAAkB1V,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACxCD,EAAM8C,SAAU,EAChB9C,EAAMmJ,OAASlJ,QAK3B,QC9DemhB,GAvBK3hB,YAAY,CAC5BkD,KAAO,SACPjD,aAAe,CACXoQ,IAAM,GACNhN,SAAU,EACVC,MAAQ,IAEZjD,SAAW,GACX8E,cAAgB,SAAAC,GACZA,EAAQC,QAASqJ,GAAwBpJ,SAAQ,SAAA/E,GAC7CA,EAAM8C,SAAU,KAEnBgC,QAASqJ,GAAwBtM,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAChDD,EAAM8C,SAAU,EAChB9C,EAAM8P,IAAM7P,KAEf6E,QAAQqJ,GAAwBnJ,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAC9CD,EAAM8C,SAAU,EAChB9C,EAAM+C,MAAQ9C,QAK1B,QCaeohB,GApCO5hB,YAAY,CAC9BkD,KAAO,WACPjD,aAAe,CACX8K,SAAW,GACX1H,SAAU,EACVC,MAAQ,IAEZjD,SAAW,GACX8E,cAAgB,SAAAC,GAEZA,EAAQC,QAAShE,EAAaiE,SAAQ,SAAA/E,GAClCA,EAAM8C,SAAU,KAEnBgC,QAAQhE,EAAae,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACpCD,EAAM8C,SAAU,EAChB9C,EAAMwK,SAAWvK,KAEpB6E,QAAQhE,EAAakE,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACnCD,EAAM8C,SAAU,EAChB9C,EAAM+C,MAAQ9C,KAGjB6E,QAAQtD,EAAYuD,SAAQ,SAAA/E,GACzBA,EAAM8C,SAAU,KAEnBgC,QAAQtD,EAAYK,WAAU,SAAC7B,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QACnCD,EAAM8C,SAAU,EAChB9C,EAAMwK,SAAWvK,KAEpB6E,QAAQtD,EAAYwD,UAAS,SAAChF,EAAD,GAAoB,IAAZC,EAAW,EAAXA,QAClCD,EAAM8C,SAAU,EAChB9C,EAAM+C,MAAQ9C,QAK1B,QC9BeqhB,eAAe,CAC1BC,QAAU,CACNxf,SAAWyf,GACX5W,SAAW6W,GACX5e,KAAO6e,GACPzU,cAAgB0U,EAChBhG,aAAeiG,GACflW,WAAamW,GACb9G,OAAS+G,MCXjBC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACI,cAAC,GAAD,MAEJnC,SAASC,eAAe,W","file":"static/js/main.7172d061.chunk.js","sourcesContent":["const useStyles = {\r\n    ProgressWrap : {\r\n        top : 0,\r\n        left : 0,\r\n        display : \"flex\",\r\n        position: \"fixed\",\r\n        justifyContent : \"center\",\r\n        flexDirection : \"column\",\r\n        alignItems : \"center\",\r\n        zIndex : 100,\r\n        backgroundColor : \"rgba(0, 0, 0, 0.9)\",\r\n        height: \"700px\",\r\n        width : \"100%\",\r\n        transition : \"all 300ms linear\",\r\n        borderRadius : '20px'\r\n    },\r\n    HeaderWrap : {\r\n        height : '60px',\r\n        padding : '20px 0px',\r\n        borderRadius : '10px',\r\n        WebkitAppRegion : 'drag'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { CircularProgress, withStyles } from '@material-ui/core'\r\nimport React,{ useState,useEffect } from 'react'\r\nimport useStyles from './Styles'\r\n\r\nfunction Loader(props) {\r\n\r\n    const { classes } = props;\r\n    const [progress,setProgress] = useState('Loading');\r\n\r\n    return (\r\n        <div className={classes.ProgressWrap}>\r\n            <CircularProgress size={70} />\r\n            <h4\r\n                style={{\r\n                    textAlign : \"center\",\r\n                    color : \"white\",\r\n                    letterSpacing : \"10px\"\r\n                }}\r\n            >{progress}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Loader)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst NotificationSlice = createSlice({\r\n    'name' : 'notifications',\r\n    initialState : {\r\n        open : false,\r\n        message : '',\r\n        severity : ''\r\n    },\r\n    reducers : {\r\n        OpenNotification : (state,{payload})=>{\r\n            state.open = true;\r\n            state.severity = payload.severity;\r\n            state.message = payload.message;\r\n        },\r\n        CloseNotification : (state,{payload})=>{\r\n            state.open = false;\r\n            state.severity = '';\r\n            state.message = '';\r\n        }\r\n    }\r\n});\r\n\r\nexport const { OpenNotification,CloseNotification } = NotificationSlice.actions;\r\n\r\nexport default NotificationSlice.reducer;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst host = \"http://localhost:8082/api\";\r\nconst SettingsServices = axios.create({\r\n    baseURL : host,\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const SetIPAddress = createAsyncThunk(\r\n    'settings/SetIPAddress',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url,data } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"PATCH\",\r\n                data\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return(rejectWithValue(err.response.data));\r\n        }\r\n    }\r\n); \r\n\r\nexport const GetSettings = createAsyncThunk(\r\n    'settings/GetSettings',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { url } = args;\r\n            const res = await SettingsServices({\r\n                url,\r\n                method : \"GET\"\r\n            });\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst CartService = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const CreateTransaction = createAsyncThunk(\r\n    'cart/CreateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n\r\n                const { values } = args;\r\n                const res = await CartService({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    url : '/transactions',\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(1000);\r\n                return res.data;             \r\n            }             \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createSlice,createEntityAdapter,createDraftSafeSelector } from '@reduxjs/toolkit';\r\nimport { CreateTransaction } from './CartServices';\r\n\r\nconst cartAdapter = createEntityAdapter({\r\n    selectId : prod=>prod._id\r\n});\r\n\r\nconst CartSlice = createSlice({\r\n    name : 'cart',\r\n    initialState : cartAdapter.getInitialState({\r\n        cart : [],\r\n        loading : false,\r\n        error : ''\r\n    }),\r\n    reducers : {\r\n        addItem : (state,{payload})=>{\r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === payload._id);\r\n\r\n            const {\r\n                _id,\r\n                item_name,\r\n                discount,\r\n                item_price,\r\n                item_qty,\r\n                inventory_qty,\r\n                item_unit,\r\n                item_srp\r\n            } = payload;\r\n\r\n            const qty = item_qty;\r\n            const calcDiscount = discount / 100;            \r\n\r\n            if( index !== -1 ) {\r\n\r\n                const total_qty_price = (parseInt(state.cart[index].qty) + parseInt(qty)) * item_price;\r\n                const total_qty_srp = (parseInt(state.cart[index].qty) + parseInt(qty)) * item_srp;\r\n    \r\n                const withDiscount_per_unit = state.cart[index].discount !== 0 ? total_qty_price - (total_qty_price * state.cart[index].discount) : total_qty_price;\r\n                const withDiscount_per_unit_srp = state.cart[index].discount !== 0 ? total_qty_srp - ( total_qty_srp * state.cart[index].discount ) : total_qty_srp;\r\n\r\n                state.cart[index].qty = parseInt(state.cart[index].qty) + parseInt(qty);\r\n                state.cart[index].total_per_unit = withDiscount_per_unit;\r\n                state.cart[index].total_per_unit_srp = withDiscount_per_unit_srp;\r\n\r\n                if( qty > inventory_qty ){\r\n                    state.cart[index].error = true;                    \r\n                }\r\n\r\n            }else{\r\n\r\n                const total_qty_price = qty * item_price;\r\n                const total_qty_srp = qty * item_srp;\r\n    \r\n                const withDiscount_per_unit = calcDiscount !== 0 ? total_qty_price - (total_qty_price * calcDiscount) : total_qty_price;\r\n                const withDiscount_per_unit_srp = calcDiscount !== 0 ? total_qty_srp - ( total_qty_srp * calcDiscount ) : total_qty_srp;\r\n\r\n                state.cart.unshift({\r\n                    _id,\r\n                    item_name,\r\n                    item_price,\r\n                    item_srp,\r\n                    inventory_qty,\r\n                    error : false,\r\n                    qty,\r\n                    discount : calcDiscount,\r\n                    total_per_unit : withDiscount_per_unit,\r\n                    total_per_unit_srp : withDiscount_per_unit_srp,\r\n                    item_unit\r\n                });\r\n            }\r\n        },\r\n        updateQty : (state,{payload})=>{\r\n            \r\n            const {\r\n                _id,\r\n                qty,\r\n                item_price,\r\n                inventory_qty,\r\n                item_srp\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n\r\n            let val = qty === NaN ? 0 : parseInt(qty);\r\n            let total_qty_price = val * item_price;\r\n            let total_qty_srp = val * item_srp;\r\n\r\n            if( index !== -1 ){\r\n                state.cart[index].qty = val; \r\n                state.cart[index].total_per_unit = state.cart[index].discount !== 0 ? total_qty_price - ((total_qty_price) * state.cart[index].discount) : total_qty_price;\r\n                state.cart[index].total_per_unit_srp = state.cart[index].discount !== 0 ? total_qty_srp - ((total_qty_srp) * state.cart[index].discount) : total_qty_srp;\r\n\r\n                if( val > inventory_qty ){\r\n                    state.cart[index].error = true;\r\n                }else{\r\n                    state.cart[index].error = false;\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        setDiscount : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                discount,\r\n                item_price,\r\n                item_srp,\r\n                qty\r\n            } = payload;          \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            const calcDiscount = discount / 100;\r\n            const total = item_price * qty;\r\n            const total_srp = item_srp * qty;\r\n\r\n            if(index !== -1){\r\n                state.cart[index].discount = calcDiscount;\r\n                state.cart[index].total_per_unit = discount !== 0 ? total - (total * calcDiscount) : item_price * qty;\r\n                state.cart[index].total_per_unit_srp = discount !== 0 ? total_srp - (total_srp * calcDiscount) : item_srp * qty;\r\n            }\r\n\r\n        },\r\n        removeItem : (state,{payload})=>{\r\n            const index = state.cart.findIndex(prod=>prod._id === payload);\r\n            state.cart.splice(index,1);\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        builder.addCase( CreateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.cart = [];\r\n        })\r\n        .addCase( CreateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nconst selectCart = (state)=>state.cart;\r\nexport const cartItems = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.cart\r\n);\r\nexport const cartLoading = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.loading\r\n);\r\nexport const { addItem,removeItem,updateQty,setDiscount } = CartSlice.actions;\r\nexport default CartSlice.reducer;","import { faBoxes, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { IconButton, TableCell, TableRow, TextField, Tooltip } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { removeItem, updateQty,setDiscount, cartItems } from '../store/CartSlice'\r\nimport NumberFormat from 'react-number-format';\r\nimport { motion } from 'framer-motion'\r\nimport { useHistory } from 'react-router'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction CartItems({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [total,setTotal] = useState(parseInt(item.item_price) * parseInt(item.qty));\r\n    const [totalSrp,setTotalSrp] = useState(parseInt(item.item_srp) * parseInt(item.qty));\r\n    const cart = useSelector(cartItems);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        setTotal(parseInt(item.item_price) * parseInt(item.qty));\r\n        setTotalSrp(parseInt(item.item_srp) * parseInt(item.qty));\r\n    },[item.qty]);\r\n\r\n    useEffect(()=>{\r\n        setTotal(item.total_per_unit);\r\n        setTotalSrp(item.total_per_unit_srp);\r\n    },[item.total_per_unit,item.total_per_unit_srp]);\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                id={item._id}\r\n                hover\r\n                key={item._id}   \r\n                component={motion.tr}     \r\n                title={`Name : ${item.item_name}\\nQuantity : ${item.qty}\\nDiscount : ${item.discount * 100}%`}         \r\n                initial={{\r\n                    y : -100,\r\n                    opacity : 0\r\n                }}\r\n                animate={{\r\n                    y : 0,\r\n                    opacity : 1\r\n                }}\r\n                onDoubleClick={()=>{\r\n                    history.push(`/add-qty?mode=update&discount=${item.discount / 100}`,item);\r\n                }}\r\n                style={{ WebkitAppRegion : \"no-drag\",cursor : \"pointer\" }}\r\n            >\r\n                <TableCell\r\n                    style={{fontSize : '10px'}}\r\n                    colSpan={2}\r\n                ><FontAwesomeIcon color=\"grey\" icon={faBoxes} />&nbsp;&nbsp;{item.item_name.substring(0,30) + '...'}</TableCell>                                \r\n                <TableCell style={{ textAlign : \"center\" }}>{item.qty}</TableCell>\r\n                <TableCell>\r\n                    <NumberFormat\r\n                        thousandSeparator \r\n                        displayType=\"text\"\r\n                        value={totalSrp}\r\n                        style={{ fontSize : '10px', textAlign : \"center\" }}\r\n                        decimalScale={2} \r\n                        decimalSeparator={'.'}\r\n                        fixedDecimalScale={true}                    \r\n                    />\r\n                </TableCell>                \r\n                <TableCell style={{ textAlign : \"center\" }}>\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( removeItem(item._id) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faTrashAlt} /> \r\n                    </IconButton>\r\n                </TableCell> \r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartItems\r\n","import { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    Button, \r\n    Paper, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow \r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartItems } from '../store/CartSlice';\r\nimport CartItems from './CartItems';\r\n\r\nfunction Cart(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector(cartItems);\r\n    const { loading } = useSelector(state=>state.cart);\r\n    const [items,setItems] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(9);\r\n    const history = useHistory();\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setItems(cart);\r\n    },[cart]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <TableContainer \r\n            component={Paper} \r\n            elevation={2} \r\n            style={{\r\n                minHeight : \"550px\",\r\n                position : 'relative'\r\n            }}\r\n        >\r\n            <Table size=\"small\" stickyHeader>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell colSpan={2}>Name</TableCell>    \r\n                        <TableCell style={{ textAlign : \"center\" }}>QTY</TableCell>              \r\n                        <TableCell>Total</TableCell>\r\n                        <TableCell style={{ textAlign : \"center\" }}>Action</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.slice(page*rowsPerPage,page*rowsPerPage + rowsPerPage).map(item=>( \r\n                        <CartItems \r\n                            item={item}\r\n                        />\r\n                    ))}                    \r\n                </TableBody>\r\n                <TableRow style={{\r\n                    position : \"absolute\",\r\n                    bottom : '0',\r\n                    left : '0',\r\n                    WebkitAppRegion : \"no-drag\"\r\n                }}>      \r\n                    <TableCell colSpan={1}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                backgroundColor : \"green\",\r\n                                color : \"#ffffff\",\r\n                                WebkitAppRegion : 'no-drag'\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={faShoppingBag} />}\r\n                            onClick={()=>{\r\n\r\n                                if( items.length == 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Cart is Empty',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n\r\n                                let errors = [];\r\n\r\n                                items.map(item=>{\r\n                                    if( item.error === true ){\r\n                                        errors.push(item.error);\r\n                                    }\r\n                                });\r\n\r\n                                if( errors.length > 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Invalid Quantity',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                };\r\n\r\n                                history.push('/transaction',cart);\r\n                            }}\r\n                        >Checkout</Button>\r\n                    </TableCell>              \r\n                    <TableCell colSpan={4}>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[9]}\r\n                            count={items.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            labelRowsPerPage={false}\r\n                        />\r\n                    </TableCell>          \r\n                </TableRow>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\n\r\nconst ProdServices = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const selectAllProducts = createAsyncThunk(\r\n    'products/selectAllProducts',\r\n    async( args ,{ rejectWithValue,dispatch })=>{        \r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    ...opt,                \r\n                    method : \"GET\"\r\n                });\r\n                await sleep(1000);\r\n                return res.data;\r\n            }\r\n        }catch(err){    \r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const searchProduct = createAsyncThunk(\r\n    'products/searchProduct',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    ...opt,                \r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;\r\n            }\r\n                    \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const selectSingleProduct = createAsyncThunk(\r\n    'products/selectSingleProduct',\r\n    async(id,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET',\r\n                    url : '/products/' + id\r\n                });\r\n                await sleep(1000);\r\n                return res.data;  \r\n            }         \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'products/createTransaction',\r\n    async( values,{rejectWithValue,dispatch} )=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";      \r\n                const port = settings.port !== undefined ? settings.port : 8081;        \r\n                const res = await ProdServices({\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'POST',\r\n                    url : '/products',\r\n                    data : values\r\n                });\r\n                await sleep(1000);\r\n                return res.data; \r\n            }          \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createDraftSafeSelector, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport { searchProduct, selectAllProducts, selectSingleProduct } from './productServices';\r\n\r\nconst productsAdapter = createEntityAdapter({\r\n    selectId : (prod)=>prod._id,\r\n    sortComparer : (prod)=>prod.createdAt\r\n});\r\n\r\nconst productSlice = createSlice({\r\n    name : 'products',\r\n    initialState : productsAdapter.getInitialState({\r\n        loading : false,\r\n        selectedProd : [],\r\n        error : null,\r\n    }),\r\n    reducers : {\r\n        clearProducts : state=>{\r\n            state.entities = [];\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL PRODUCTS\r\n        builder.addCase(selectAllProducts.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectAllProducts.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(selectAllProducts.rejected,(state,{payload})=>{\r\n            state.loading = false;            \r\n            state.error = payload;\r\n        })\r\n        //FIND PRODUCT/S\r\n        .addCase(searchProduct.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(searchProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(searchProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //FETCH SINGLE PRODUCT\r\n        .addCase(selectSingleProduct.pending,(state,{payload})=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectSingleProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.addOne(state,payload);\r\n        })\r\n        .addCase(selectSingleProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        \r\n        \r\n    }\r\n});\r\n\r\nconst selectState = state=>state.products;\r\n\r\nexport const loadingSelector = createDraftSafeSelector(\r\n    selectState,\r\n    state=>state.loading\r\n);\r\n\r\nexport const { clearProducts } = productSlice.actions;\r\nexport const productsSelector = productsAdapter.getSelectors(state=>state.products);\r\nexport default productSlice.reducer;","import { faBox, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconButton, TableCell, TableRow, TextField, Tooltip } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addItem } from '../../cart/store/CartSlice';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useHistory } from 'react-router';\r\n \r\nfunction ProductItem({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                hover\r\n                key={item._id} \r\n                style={{ cursor : \"pointer\",WebkitAppRegion : 'no-drag' }}\r\n                title={`Name : ${item.item_name}\\nType : ${item.item_type}\\nBrand : ${item.item_brand}`}\r\n            >\r\n                <TableCell style={{ fontSize : \"11px\" }}><FontAwesomeIcon color=\"grey\" icon={faBox} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell style={{ fontSize : \"11px\" }}>{item.item_qty}</TableCell>\r\n                <TableCell style={{ fontSize : \"11px\" }}>\r\n                    <NumberFormat \r\n                        displayType=\"text\"\r\n                        thousandSeparator\r\n                        fixedDecimalScale\r\n                        allowNegative={false}\r\n                        decimalScale={2}\r\n                        decimalSeparator=\".\"                        \r\n                        customInput={TextField}                        \r\n                        value={item.item_srp}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            // dispatch( addItem(item) );\r\n                            history.push('/add-qty',item);\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag',\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faPlusCircle} />\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductItem\r\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { selectAllProducts } from '../store/productServices';\r\nimport { clearProducts, loadingSelector, productsSelector } from '../store/productSlice';\r\nimport ProductItem from './ProductItem';\r\n\r\nfunction ProductsList() {\r\n\r\n    const dispatch = useDispatch();\r\n    const products = useSelector(productsSelector.selectAll);\r\n    const { loading : settingsLoading } = useSelector(state=>state.settings);\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const loading = useSelector(loadingSelector);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(11);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setPage(0);\r\n    },[products]);\r\n\r\n    useEffect(()=>{\r\n        \r\n        dispatch( selectAllProducts({\r\n            opt : {\r\n                url : '/products'\r\n            }\r\n        }) );\r\n\r\n    },[]);\r\n\r\n    if( loading || settingsLoading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper} style={{ minHeight : \"550px\", position : 'relative' }}>\r\n                <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell>QTY</TableCell>\r\n                            <TableCell>Price</TableCell>\r\n                            <TableCell>Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {products.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(product=>(                            \r\n                            <ProductItem item={product} />\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableRow\r\n                        style={{\r\n                            position : 'absolute',\r\n                            bottom : '0',\r\n                            left : '0',\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <TableCell colSpan={4}>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[11]}\r\n                                count={products.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n","const useStyles = {\r\n    Dashboard : {\r\n        height : '90%'\r\n    },\r\n    infoBlock : {\r\n        height : '50px',\r\n        borderRadius : '10px',\r\n        background : '#fff'\r\n    },\r\n    ContentBlock : {\r\n        height : '90%',\r\n        borderRadius : '10px',\r\n        padding : '20px'\r\n    }    \r\n}\r\n\r\nexport default useStyles;","import { Grid, withStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Cart from '../../cart/components/Cart';\r\nimport ProductsList from '../../products/components/ProductsList';\r\nimport Styles from './Styles';\r\n\r\n\r\nfunction Dashboard(props) {\r\n\r\n    const { ContentBlock,Dashboard,infoBlock } = props.classes;\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Grid container className={Dashboard} spacing={2}>\r\n            <Grid direction=\"column\" item container lg={6} sm={6}> \r\n                <Cart />\r\n            </Grid>    \r\n            <Grid \r\n                item lg={6} \r\n                sm={6} \r\n                className={ContentBlock}\r\n            >\r\n                <ProductsList />\r\n            </Grid>  \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Dashboard)\r\n","const useStyles = {\r\n    '@global' : {\r\n        body : {\r\n            height : '100%',\r\n            margin : '0px',\r\n            '& #root' : {\r\n                height : '100%',\r\n            },\r\n            overflow : 'hidden',\r\n            position : 'relative',\r\n            borderRadius : \"15px\"\r\n        },\r\n        html : {\r\n            height : '95%',\r\n            margin : '0px',\r\n            padding : '20px',\r\n        }\r\n    },\r\n\r\n    root : {\r\n        height : '100%',\r\n        background : '#EBEBF7',\r\n        padding : \"20px\",\r\n        borderRadius : '20px',\r\n        position : 'relative'\r\n    },\r\n    \r\n    ContainerWrap : {\r\n        height : 'auto',\r\n        padding : '20px 0px 0px 0px !important',\r\n        position : 'relative'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Toast(props) {\r\n\r\n    const { handleCloseToast } = props;\r\n    const { message,severity,open } = useSelector(state=>state.notifications);\r\n\r\n    return (\r\n        <Snackbar\r\n            open={open} \r\n            autoHideDuration={4000} \r\n            onClose={handleCloseToast}\r\n            anchorOrigin={{vertical : 'bottom',horizontal : 'right'}}\r\n            style={{ bottom : \"50px\", right : '50px', WebkitAppRegion : 'no-drag' }}\r\n        >\r\n            <Alert\r\n                elevation={6} \r\n                variant=\"filled\"\r\n                onClose={handleCloseToast}\r\n                severity={severity}\r\n            >\r\n                {message}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default Toast\r\n","const useStyle = {\r\n    TransactionModal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        WebkitAppRegion : 'no-drag'\r\n    },\r\n    ModalContent : {\r\n        borderRadius : '10px',\r\n        padding : '20px',\r\n        width : '400px',\r\n        height : '450px',\r\n        backgroundColor : \"#ffffff\",\r\n        outline : 'none',\r\n        position : 'relative'\r\n    },\r\n    SuccessPageModal : {\r\n        outline : \"none\",\r\n        height : \"650px\",\r\n        padding : \"30px\",\r\n    },\r\n    ModalCartContent : {\r\n        borderRadius : '10px',\r\n        padding : '20px',\r\n        width : \"300px\",\r\n        backgroundColor : \"#ffffff\",\r\n        outline : 'none',\r\n        position : 'relative'\r\n    },\r\n    AddQTYModal : {\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        WebkitAppRegion : 'no-drag'\r\n    },\r\n    AddDiscountModal : {\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        WebkitAppRegion : 'no-drag'\r\n    }\r\n}\r\n\r\nexport default useStyle;","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst ReportServices = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x))\r\n}\r\n\r\nexport const CreateTransactionReport = createAsyncThunk(\r\n    'report/CreateTransactionReport',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { url } = args;\r\n                const res = await ReportServices({\r\n                    baseURL : `http://${host}:${port}/api/v1/gc-print`,\r\n                    url,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return await res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import pdfmake from 'pdfmake/build/pdfmake';\r\nconst formatter = new Intl.NumberFormat('en-PH',{\r\n    style : 'currency',\r\n    currency : 'Php'\r\n});\r\n\r\npdfmake.fonts = {\r\n    Courier : {\r\n        normal: 'cour.ttf',\r\n        bold: 'courbd.ttf',\r\n        italics: 'couri.ttf',\r\n        bolditalics: 'courbi.ttf'\r\n    },\r\n    Times: {\r\n        normal: 'times.ttf',\r\n        bold: 'timesbd.ttf',\r\n        italics: 'timesi.ttf',\r\n        bolditalics: 'timesbi.ttf'\r\n    },\r\n    Arial : {\r\n        normal: 'arial.ttf',\r\n        bold: 'arialbd.ttf',\r\n        italics: 'ariali.ttf',\r\n        bolditalics: 'arialbi.ttf'\r\n    },\r\n    // Roboto: {\r\n    //     normal: 'Roboto-Regular.ttf',\r\n    //     bold: 'Roboto-Medium.ttf',\r\n    //     italics: 'Roboto-Italic.ttf',\r\n    //     bolditalics: 'Roboto-MediumItalic.ttf'\r\n    // },\r\n    Epson: {\r\n        normal: 'Epson1.ttf',\r\n        bold: 'Epson1.ttf',\r\n        italics: 'Epson1.ttf',\r\n        bolditalics: 'Epson1.ttf'\r\n    },\r\n    Charlie_dotted : {\r\n        normal : 'charlie_dotted.ttf',\r\n        bold : 'charlie_dotted.ttf',\r\n        italics : 'charlie_dotted.ttf',\r\n        bolditalics : 'charlie_dotted.ttf'\r\n    },\r\n    DOT_MATRIX : {\r\n        normal : 'DOTMATRI.TTF',\r\n        bold : 'DOTMBold.TTF',\r\n        italics : 'DOTMATRI.TTF',\r\n        bolditalics : 'DOTMATRI.TTF'\r\n    },\r\n    FAKE_RECEIPT : {\r\n        normal : 'fake receipt.ttf',\r\n        bold : 'fake receipt.ttf',\r\n        italics : 'fake receipt.ttf',\r\n        bolditalics : 'fake receipt.ttf'\r\n    }\r\n}\r\n\r\nexport default (docs,logoURL)=>{\r\n    let discountArr = [];\r\n    let customer_name,\r\n        customer_address,\r\n        transaction_date,\r\n        transaction_type,\r\n        total_amount,\r\n        change_amount,\r\n        cash_amount,\r\n        _id\r\n    ;\r\n\r\n    docs.map(doc=>{\r\n        let less = ( doc[4].discount * doc[4].price);\r\n        customer_name = doc[4].customer_name;\r\n        transaction_date = new Date(doc[4].date).toLocaleDateString();\r\n        transaction_type = doc[4].transact_type;\r\n        total_amount = doc[4].total_amount;\r\n        change_amount = doc[4].change_amount;\r\n        cash_amount = doc[4].cash_amount;\r\n        _id = doc[4]._id;\r\n        customer_address = doc[4].customer_address;\r\n        discountArr.push(less);\r\n    });\r\n\r\n    let discount = discountArr.reduce((a,b)=>a+b,0);    \r\n\r\n    return {\r\n        pageSize : {\r\n            width : 97 * 9.5,\r\n            height : 97 * 5.5\r\n        },\r\n        pageMargins: [ 20, 70, 20, 130 ],\r\n        compress : false,\r\n        header : (currentPage)=>{\r\n            if( currentPage === 1 ){\r\n                return {\r\n                    columns : [\r\n                        {\r\n                            image : `data:image/png;base64,${logoURL}`,\r\n                            width : 50,\r\n                            height : 50,\r\n                        },\r\n                        {\r\n                            stack : [\r\n                                {\r\n                                    text : 'Smart/Tnt:0963-644-8252\\nGlobe/tm:0926-775-3578',\r\n                                    //color : \"#808080\"\r\n                                    style : 'subheader'\r\n                                }\r\n                            ],\r\n                            alignment : 'right',   \r\n                        }   \r\n                    ],\r\n                    margin : [20,8],\r\n                    width : '*',\r\n                }\r\n            }\r\n        },\r\n        footer : (currentPage,pageCount)=>{\r\n            if( currentPage === pageCount ){\r\n                return {\r\n                    stack : [\r\n                        {\r\n                            table : {\r\n                                widths : ['*',190,250],\r\n                                headerRows : 1,\r\n                                body : [\r\n                                    [\r\n                                        {\r\n                                            text : \"Prepared by : \",\r\n                                            style : {\r\n                                                fontSize : 15\r\n                                            },\r\n                                            bold : true\r\n                                        },\r\n                                        {\r\n                                            text : `Discount : ${formatter.format(discount)}`,\r\n                                            style : {\r\n                                                fontSize : 15,\r\n                                                font : 'Times'\r\n                                            },\r\n                                            bold : false\r\n                                        },\r\n                                        {\r\n                                            text : `Amount to pay : ${formatter.format(total_amount)}`,\r\n                                            style : {\r\n                                                fontSize : 15,\r\n                                                font : 'Times'\r\n                                            },\r\n                                            bold : false\r\n                                        }\r\n                                    ],\r\n                                    [ \r\n                                        { \r\n                                            text : \"\", \r\n                                            border : [false,false,false,false],\r\n                                        },\r\n                                        {\r\n                                            text : [\r\n                                                `Cash : `,\r\n                                                { \r\n                                                    text : `${cash_amount}`,\r\n                                                    style : { \r\n                                                        alignment : \"center\", \r\n                                                        font : \"Times\",\r\n                                                        fontSize : 15\r\n                                                    } \r\n                                                }\r\n                                            ],\r\n                                            bold : false,\r\n                                            fontSize : 15\r\n                                        }, \r\n                                        { \r\n                                            text : `${change_amount <= -1 ? 'Balance : ' + formatter.format(change_amount * -1) : 'Change : ' + formatter.format(change_amount)}`,\r\n                                            style : {\r\n                                                font : 'Times',\r\n                                                fontSize : 15\r\n                                            },\r\n                                            bold : false\r\n                                        } \r\n                                    ]\r\n                                ]                        \r\n                            }\r\n                        },\r\n                        {\r\n                            text : \"**** Nothing Follows ****\",                            \r\n                            style : {\r\n                                fontSize : 12,        \r\n                                //color : \"#808080\"                     \r\n                            },\r\n                            bold : false,\r\n                            alignment : \"center\",\r\n                            margin : [0,7,0,0]\r\n                        },\r\n                        {\r\n                            text : \"Received goods in order and prestine condition\\n\\nby:__________________________________\",                            \r\n                            style : {\r\n                                fontSize : 12,                         \r\n                            },\r\n                            alignment : \"right\",\r\n                            bold : false,\r\n                            margin : [0,3,0,0]\r\n                        }\r\n                    ],                    \r\n                    margin : [20,0]                 \r\n                }\r\n            }\r\n        },\r\n        content : [\r\n            {\r\n                columns : [\r\n                    { \r\n                        text : \"ORDER SLIP\", \r\n                        bold : true,\r\n                        style : \r\n                        { \r\n                            fontSize : 22,\r\n                            //color : \"#808080\",\r\n                            font : \"Times\"                            \r\n                        } \r\n                    }\r\n                ],\r\n                alignment : \"center\"\r\n            },\r\n            {                \r\n                stack : [\r\n                    {\r\n                        columns : [\r\n                            {\r\n                                text : [\r\n                                    'Customer Name : ',\r\n                                    {\r\n                                        text : `${customer_name}`,\r\n                                        italics : false,\r\n                                        bold : false\r\n                                    }\r\n                                ],       \r\n                                bold : true,                         \r\n                                fontSize : 15,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Transaction Date : ',\r\n                                    {\r\n                                        text : `${transaction_date}`,\r\n                                        italics : false,\r\n                                        bold : false\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 15,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                        ],\r\n                        \r\n                    },\r\n                    {\r\n                        columns : [                            \r\n                            {\r\n                                text : [\r\n                                    `Address : `,\r\n                                    {\r\n                                        text : `${customer_address}`,\r\n                                        bold : false\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 15,\r\n                                margin : [0,5,0,10]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Receipt# : ',\r\n                                    {\r\n                                        text : `${_id}`,\r\n                                        fontSize : 15,\r\n                                        bold : false\r\n                                    }\r\n                                ],                         \r\n                                bold : true,\r\n                                fontSize : 15,\r\n                                margin : [0,5,0,10]\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        table : {\r\n                            dontBreakRows : true,\r\n                            headerRows: 1,\r\n                            widths: [ 60,60,'*', 120,80],\r\n                            body: [\r\n                                [                                     \r\n                                    {\r\n                                        text : 'QTY',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'UNIT',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'ITEM NAME',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'UNIT PRICE',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },\r\n                                    {\r\n                                        text : 'AMOUNT',\r\n                                        style : 'tableHeader',\r\n                                        border : [true,true,true,false]\r\n                                    },                                   \r\n                                ]                                                   \r\n                            ]\r\n                        }\r\n                    },\r\n                    {\r\n                        layout : {\r\n                            hLineWidth : (i,node)=>{\r\n                                return (i === 0 || i === node.table.body.length) ? 1 : 0;\r\n                            },\r\n                            hLineHeight : (i,node)=>{\r\n                                return (i === 1) ? 0 : 1;\r\n                            },\r\n                            paddingBottom: (i, node, colIndex) => {                                \r\n                                const DEFAULT_PADDING = 2;\r\n                                // Calculate padding for the last element of the table.\r\n                                if (i === node.table.body.length - 1 && node.positions[node.positions.length - 1] !== undefined) {\r\n                                    const currentPosition = node.positions[node.positions.length - 1];                                    \r\n                                    const totalPageHeight = currentPosition.pageInnerHeight;\r\n                                    const currentHeight = currentPosition.top;\r\n                                    const paddingBottom = totalPageHeight - currentHeight;                                    \r\n                                    \r\n                                    if( paddingBottom < 0 ){\r\n                                        return DEFAULT_PADDING;\r\n                                    }else{\r\n                                        return paddingBottom;\r\n                                    }                                    \r\n                                } else {\r\n                                    return DEFAULT_PADDING;\r\n                                }\r\n                            }\r\n                        },\r\n                        table : {\r\n                            dontBreakRows : true,\r\n                            headerRows: 1,\r\n                            widths: [ 60,60,'*', 120,80],\r\n                            body: [                                   \r\n                                ...docs                                                      \r\n                            ]\r\n                        }\r\n                    }                    \r\n                ],                \r\n                margin : [0,10,0,0]\r\n            }\r\n        ],\r\n        styles : {\r\n            header : {\r\n                // bold : true,\r\n                //color : \"#808080\"\r\n                fontSize : 12,\r\n                font : \"Times\",\r\n                bold : true\r\n            },\r\n            subheader : {\r\n                fontSize : 12,\r\n                // bold : true,\r\n                font : \"Times\",\r\n                bold : true\r\n            },\r\n            tableHeader : {\r\n                fontSize : 16,\r\n                alignment : 'center',\r\n                margin : [0,3],  \r\n                bold : true,\r\n                border : [true,true,true,true]      \r\n            },\r\n            tableItems : {\r\n                alignment : 'center',\r\n                margin : [0,2],\r\n                fontSize : 13,\r\n                //color : \"#808080\"\r\n            },\r\n            tableItemsAmount : {\r\n                alignment : 'center',\r\n                margin : [0,2],\r\n                fontSize : 13,\r\n                font : \"Times\",\r\n            }\r\n        },\r\n        defaultStyle : {\r\n            font : 'Times',\r\n            columnGap : 5,\r\n            fontSize : 12,\r\n            color : [70,50,30,100]\r\n        }\r\n    }\r\n}","import { faBuilding, faDollarSign, faMoneyBill, faMoneyBillAlt, faPrint, faSave, faUser, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    Backdrop, \r\n    Fade, \r\n    Grid, \r\n    Modal, \r\n    withStyles, \r\n    TextField, \r\n    InputAdornment, \r\n    ButtonGroup, \r\n    Button, \r\n    Typography, \r\n    MenuItem,\r\n    FormControl,\r\n    FormLabel,\r\n    RadioGroup,\r\n    FormControlLabel,\r\n    Radio\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport useStyle from './Styles';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CreateTransaction } from '../store/CartServices';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartLoading } from '../store/CartSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { CreateTransactionReport } from '../../shared/store/ReportServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../docs/TransactionDocDef';\r\nimport { io } from 'socket.io-client';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n \r\nfunction Transaction(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(cartLoading);\r\n    const {state : cart} = useLocation();\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const [autoPrint,setAutoPrint] = useState(false);\r\n    const history = useHistory();\r\n    const {TransactionModal,ModalContent} = props.classes;\r\n    const [total,setTotal] = useState(0);\r\n    const [totalSrp,setTotalSrp] = useState(0);\r\n    const [info,setInfo] = useState({\r\n        customer_name : '',\r\n        customer_address : '',\r\n        transact_payment_type : 'full',\r\n        cash_amount : 0,\r\n        transact_status : true\r\n    });\r\n\r\n    const handleAutoPrint = (e)=>{\r\n        setAutoPrint(!autoPrint);\r\n    }\r\n\r\n    const handleClose = async (id)=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : '/settings'\r\n            }) );\r\n\r\n            if( GetSettings.fulfilled.match(resSettings) ){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const socket = io(`http://${host}:${port}`);\r\n\r\n                if( id.payload !== undefined ){\r\n                    const { transact_id } = id.payload;\r\n                    \r\n                    const resTrans = await dispatch( CreateTransactionReport({\r\n                        url : '/transactions/' + transact_id\r\n                    }) );\r\n            \r\n                    if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                        const { doc,logo } = resTrans.payload;\r\n                        let pdf = JSON.parse(doc);      \r\n        \r\n                        if( pdf.length > 0 ){                    \r\n                            pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                            const docDef = TransactionDocDef(pdf,logo);\r\n                            const docGenerator = pdfMake.createPdf(docDef);\r\n        \r\n                            if( autoPrint ){\r\n                                docGenerator.getBase64(data=>{\r\n                                    socket.emit('printcmd',{\r\n                                        sid : socket.id,\r\n                                        data,\r\n                                        id : transact_id,\r\n                                    });\r\n                                });\r\n                            }\r\n        \r\n                            docGenerator.getBlob(blob=>{\r\n                                let url = window.URL.createObjectURL(blob);                                                \r\n                                history.push('/transaction/success?pdf=' + url);\r\n                            });                    \r\n                        } \r\n                    }\r\n                }else{            \r\n                    history.goBack();\r\n                }  \r\n            }                \r\n            setOpen(false); \r\n        }catch(err){\r\n            dispatch( OpenNotification({\r\n                message : 'Transaction Failed, Pls try again.',\r\n                severity : 'error'\r\n            }) );\r\n        }     \r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        cart.map(item=>{\r\n            let price = item.total_per_unit;\r\n            let price_srp = item.total_per_unit_srp;\r\n            setTotal( prevVal => prevVal + price)\r\n            setTotalSrp( prevVal => prevVal + price_srp );\r\n        })\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    borderRadius : '20px',\r\n                    height : '700px'\r\n                }\r\n            }}\r\n            className={TransactionModal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={ModalContent}>\r\n                    <Grid container spacing={2}>                        \r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Number of Order :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={cart.length}\r\n                                    customInput={TextField}\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Price :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={totalSrp}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    prefix=\"Php \"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Cash Change :&nbsp;                                \r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={info.cash_amount == 0 ? 0.00 : info.cash_amount - totalSrp}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                value={info.customer_name}\r\n                                onChange={(e)=>{\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            customer_name : e.target.value\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                label=\"Customer Name\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"outlined\"\r\n                                value={info.customer_address}\r\n                                onChange={(e)=>{\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            customer_address : e.target.value\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                label=\"Customer Address\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faBuilding} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <NumberFormat \r\n                                error={(info.transact_payment_type == 'full' && info.cash_amount < total ? true : false) || (\r\n                                    info.cash_amount == 0 && info.transact_payment_type == 'partial'\r\n                                )}\r\n                                label=\"Cash Amount\"\r\n                                fullWidth\r\n                                size=\"small \"\r\n                                variant=\"outlined\"\r\n                                customInput={TextField}\r\n                                value={info.cash_amount}\r\n                                decimalScale={2}\r\n                                decimalSeparator=\".\"\r\n                                fixedDecimalScale\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBill} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                                onChange={(e)=>{\r\n                                    let cash = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            cash_amount : cash\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={6} sm={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                size=\"small\"\r\n                                select\r\n                                label=\"Payment Type\"\r\n                                value={info.transaction_payment_type}\r\n                                onChange={(e)=>{\r\n                                    let payment_type = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            transact_payment_type : payment_type \r\n                                        }\r\n                                    });\r\n                                }}\r\n                            >\r\n                                <MenuItem value=\"full\">Full Payment</MenuItem>\r\n                                <MenuItem value=\"partial\">Partial Payment</MenuItem>\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item lg={6} sm={6}>\r\n                            <FormControl \r\n                                size=\"small\" \r\n                                component=\"fieldset\" \r\n                                variant=\"outlined\"                                \r\n                            >\r\n                                <FormLabel component=\"legend\">Auto Print</FormLabel>\r\n                                <RadioGroup \r\n                                    row\r\n                                    onChange={handleAutoPrint}\r\n                                    value={autoPrint}                                                                     \r\n                                >\r\n                                    <FormControlLabel value={true} control={<Radio size=\"small\" />} label=\"On\" />\r\n                                    <FormControlLabel value={false} control={<Radio size=\"small\" />} label=\"Off\" />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid \r\n                            item \r\n                            lg={12} \r\n                            sm={12} \r\n                            style={{ \r\n                                position : 'absolute', \r\n                                bottom : '0',\r\n                                left : '20'\r\n                            }}\r\n                        >\r\n                            <ButtonGroup\r\n                                variant=\"outlined\" \r\n                                color=\"primary\" \r\n                                aria-label=\"contained primary button group\"\r\n                            >\r\n                                <Button \r\n                                    fullWidth \r\n                                    startIcon={<FontAwesomeIcon color=\"green\" icon={faMoneyBillAlt} />}\r\n                                    onClick={ async()=>{                                        \r\n                                        \r\n                                        if( info.customer_name == '' ) return;\r\n                                        if( info.cash_amount === 0 ) return; \r\n                                        if(info.transact_payment_type == 'full' && info.cash_amount < total) return;\r\n\r\n                                        const resTrans = await dispatch( CreateTransaction({\r\n                                            values : cart.map(item=>{\r\n                                                return {\r\n                                                    ...item,                                                    \r\n                                                    customer_name : info.customer_name,\r\n                                                    customer_address : info.customer_address,\r\n                                                    total_amount : total,\r\n                                                    total_amount_srp : totalSrp,\r\n                                                    cash_amount : info.cash_amount,\r\n                                                    change_amount : info.cash_amount - total,\r\n                                                    change_amount_srp : info.cash_amount - totalSrp,\r\n                                                    transact_payment_type : info.transact_payment_type === '' ? (info.cash_amount >= total ? 'full' : 'partial') : info.transact_payment_type,\r\n                                                    transact_status : info.transact_payment_type === 'full' ? true : false\r\n                                                }\r\n                                            })\r\n                                        }) );\r\n\r\n                                        if( CreateTransaction.fulfilled.match(resTrans) ){\r\n                                            handleClose(resTrans);\r\n                                        }else if( CreateTransaction.rejected.match(resTrans) ){\r\n                                            dispatch( OpenNotification({\r\n                                                message : 'Error : ' + resTrans.payload,\r\n                                                severity : 'error'\r\n                                            }) );\r\n                                            handleClose();\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Process Order\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                >Cancel</Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyle)(Transaction)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst ConnectionSlice = createSlice({\r\n    name : 'connection',\r\n    initialState : {\r\n        isConnected : false\r\n    },\r\n    reducers : {\r\n        setConnection : (state,{payload})=>{\r\n            state.isConnected = payload;\r\n        }\r\n    }\r\n});\r\nexport const { setConnection } = ConnectionSlice.actions;\r\nexport default ConnectionSlice.reducer;","import { Box, Button, Divider, Grid, IconButton, InputAdornment, Paper, Popper, TextField, Typography, withStyles } from '@material-ui/core'\r\nimport { Close, Minimize, SettingsRemote } from '@material-ui/icons'\r\nimport React, { useEffect,useState,useRef } from 'react'\r\nimport useStyles from './Styles';\r\nimport { motion } from 'framer-motion';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCog, faList, faSearch, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { io } from 'socket.io-client';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setConnection } from '../store/ConnectionSlice';\r\nimport { searchProduct, selectAllProducts } from '../../products/store/productServices';\r\nimport { useHistory } from 'react-router';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\nimport { OpenNotification } from '../store/NotificationSlice';\r\nimport Loader from './Loader';\r\nimport { clearProducts, productsSelector } from '../../products/store/productSlice';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport escapeStringRegexp from 'escape-string-regexp';\r\n\r\nfunction Header(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const { searchRef } = props;\r\n    const { HeaderWrap } = props.classes;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const products = useSelector(productsSelector.selectAll);\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const history = useHistory();\r\n    const [searchText,setSearchText] = useState('');\r\n    \r\n    const closeWindow = ()=>{\r\n        ipcRenderer.invoke('close');\r\n    }\r\n\r\n    const productsAutoComplete = ()=>{\r\n        return [...new Set(products.map(product=>product.item_name !== undefined && product.item_name))];\r\n    }\r\n\r\n    const PopperCustom = (props)=>{\r\n        return <Popper {...props} style={{ left : 5,WebkitAppRegion : \"no-drag\", left : 0 }} />\r\n    }\r\n\r\n    const handleChange = (e)=>{\r\n        setSearchText(e.target.value);\r\n    }\r\n\r\n    const handleKeyPress = async (e)=>{\r\n        const filteredString = escapeStringRegexp(searchText);\r\n        console.log(filteredString);\r\n        if( e.key === 'Enter' ){\r\n            const res = await dispatch( searchProduct({\r\n                opt : {\r\n                    url : '/search/products?query=' + filteredString\r\n                }\r\n            }) );\r\n\r\n            if( searchProduct.fulfilled.match(res) ){\r\n                setSearchText('');\r\n            }\r\n        }\r\n    }\r\n  \r\n    const minimizeWindow = ()=>{\r\n        ipcRenderer.invoke('min');\r\n    }\r\n\r\n    const defaultSettings = async()=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }));\r\n\r\n            if( GetSettings.fulfilled.match(resSettings) ){\r\n                const { settings } = resSettings.payload;                \r\n\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const socket = io(`http://${host}:${port}`);\r\n\r\n                socket.on('connect',()=>{\r\n                    dispatch( setConnection(socket.connected) );\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));\r\n                });\r\n\r\n                socket.on('disconnect',()=>{                    \r\n                    dispatch( setConnection(socket.connected) );  \r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));                  \r\n                });\r\n\r\n                socket.on('server-printer',(printerName)=>{\r\n                    console.log(printerName);\r\n                });\r\n\r\n                socket.on('created_product',()=>{\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));\r\n                });\r\n\r\n                socket.on('updated_product',()=>{\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));\r\n                });\r\n\r\n                socket.on('deleted_product',()=>{\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }));\r\n                });\r\n\r\n                socket.on(\"print-status\",message=>{\r\n                    console.log(message);\r\n                });\r\n            }\r\n\r\n        }catch(err){\r\n            dispatch( OpenNotification({\r\n                message : \"Settings not loaded.\",\r\n                severity : \"error\"\r\n            }) );\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        defaultSettings();\r\n\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid              \r\n            item   \r\n            container\r\n            lg={12} sm={12}\r\n            className={HeaderWrap}\r\n            component={Paper}\r\n            elevation={2}\r\n            style={{\r\n                display : \"flex !important\",\r\n                flexDirection : 'row',\r\n                justifyContent : \"space-between\",\r\n                WebkitAppRegion : \"no-drag\"\r\n            }}\r\n        >\r\n            <Box\r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"40px\",\r\n                    alignSelf : \"center\",\r\n                    display : 'flex'\r\n                }}\r\n            >\r\n                <Autocomplete                     \r\n                    style={{ width : \"350px\" }}\r\n                    options={productsAutoComplete()}\r\n                    PopperComponent={PopperCustom}\r\n                    inputValue={searchText}\r\n                    onChange={(e,value)=>setSearchText(value)}\r\n                    size=\"small\"                    \r\n                    renderInput={(params)=>(\r\n                        <TextField \r\n                            fullWidth      \r\n                            variant=\"outlined\" \r\n                            label=\"Search Product\"\r\n                            inputRef={searchRef}\r\n                            value={searchText}\r\n                            InputProps={{\r\n                                startAdornment : (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <FontAwesomeIcon icon={faSearch} />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                            onChange={handleChange}\r\n                            onKeyPress={handleKeyPress}\r\n                            {...params}\r\n                        />\r\n                    )}\r\n                />    \r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />                \r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center'\r\n                    }}\r\n                >\r\n                    <IconButton                        \r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( selectAllProducts({\r\n                                opt : {\r\n                                    url : '/products'\r\n                                }\r\n                            }) );\r\n                        }}\r\n                    >                        \r\n                        <FontAwesomeIcon color=\"blue\" icon={faSyncAlt} />    \r\n                    </IconButton>                    \r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<FontAwesomeIcon icon={faList} />}\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            history.push('/translist');\r\n                        }}                        \r\n                    >\r\n                        Transactions\r\n                    </Button>\r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <SettingsRemote fontSize=\"small\" htmlColor={ connection ? \"green\" : \"maroon\" } />\r\n                    <Typography variant=\"caption\">&nbsp;{ connection ? `Connected to Server` : \"Disconnected\" }</Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box  \r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    alignSelf : \"center\"\r\n                }}\r\n            >\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={()=>{\r\n                        history.push('/settings');\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon icon={faCog} />\r\n                </IconButton>\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={minimizeWindow}\r\n                >\r\n                    <Minimize \r\n                        color=\"primary\" \r\n                    />\r\n                </IconButton>\r\n                <IconButton                     \r\n                    size=\"small\"                     \r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={closeWindow}\r\n                >\r\n                    <Close \r\n                        color=\"secondary\" \r\n                    />\r\n                </IconButton>&nbsp;&nbsp;\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Header)\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n\r\nconst TransServices = axios.create({\r\n    timeout : 1000\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const getAllTransaction = createAsyncThunk(\r\n    'transactions/getAllTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getSingleTransaction = createAsyncThunk(\r\n    'transactions/getSingleTransaction',\r\n    async(args, {rejectWithValue,dispatch})=>{\r\n        const { opt } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'transactions/createTransaction',\r\n    async(args,{ rejectWithValue,dispatch })=>{\r\n        const { opt,values } = args;\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'POST',\r\n                    data : values\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const findTransaction = createAsyncThunk(\r\n    'transactions/findTransaction',\r\n    async( args, { rejectWithValue,dispatch } )=>{        \r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getDocDef = createAsyncThunk(\r\n    'transactions/getDocDef',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'GET',\r\n                    responseType : 'blob',  \r\n                    headers: {\r\n                        Accept: 'application/pdf',\r\n                        'Content-Type': 'application/pdf',\r\n                        mode : 'no-cors'\r\n                    }\r\n                });\r\n                const url = window.URL.createObjectURL(res.data);\r\n                return url;\r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const updateTransaction = createAsyncThunk(\r\n    'transactions/updateTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt,value } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'PATCH',\r\n                    data : value\r\n                });\r\n                await sleep(1000);\r\n                return res.data;            \r\n            }            \r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteTransaction = createAsyncThunk(\r\n    'transactions/deleteTransaction',\r\n    async(args,{rejectWithValue,dispatch})=>{\r\n        try{\r\n            \r\n            const resSettings = await dispatch( GetSettings({\r\n                url : \"/settings\"\r\n            }) );\r\n\r\n            if(GetSettings.fulfilled.match(resSettings)){\r\n                const { settings } = resSettings.payload;\r\n                const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                const port = settings.port !== undefined ? settings.port : 8081;\r\n                const { opt } = args;\r\n                const res = await TransServices({\r\n                    ...opt,\r\n                    baseURL : `http://${host}:${port}/api/v1`,\r\n                    method : 'DELETE'\r\n                });\r\n                await sleep(1000);\r\n                return res.data;\r\n            }\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { faBoxes, faCalendar, faEye, faIdCard, faMarker, faMoneyBillWaveAlt, faPrint, faStop, faTrash, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Button, ButtonGroup, Fade, Grid, IconButton, InputAdornment, makeStyles, Modal, TextField } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { updateTransaction } from '../store/TransactionServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../../cart/docs/TransactionDocDef';\r\nimport {CreateTransactionReport} from '../../shared/store/ReportServices';\r\nimport { io } from 'socket.io-client';\r\nimport { GetSettings } from '../../settings/store/SettingsServices';\r\n \r\nconst useStyles = makeStyles((theme)=>({\r\n    Modal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    ModalContent : {\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        borderRadius : \"5px\",\r\n        background : \"#ffffff\",\r\n        outline : 'none',\r\n        padding : \"25px\"   \r\n    }\r\n}));\r\n\r\nconst BtnGroupSingleTrans = (props)=>{\r\n\r\n    const { data,fn } = props;\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.report);\r\n    const [payment,setPayment] = useState({\r\n        partial_payments : 0\r\n    });\r\n    \r\n    const history = useHistory();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Grid item container lg={12} sm={12} spacing={2}>\r\n            {data.payment_type === 'partial' ? (\r\n                <Grid item lg={4} sm={4}>\r\n                    <NumberFormat\r\n                        customInput={TextField}\r\n                        fixedDecimalScale\r\n                        decimalScale={2}\r\n                        thousandSeparator\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Amount\"\r\n                        margin=\"dense\"                                        \r\n                        variant=\"outlined\"\r\n                        onChange={(e)=>{                        \r\n                            setPayment(payment=>{\r\n                                return {\r\n                                    ...payment,\r\n                                    partial_payments : parseInt(e.target.value)\r\n                                }\r\n                            })\r\n                        }}\r\n                        InputProps={{\r\n                            style : {\r\n                                color : data.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                            }, \r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <Grid \r\n                item \r\n                lg={12} \r\n                sm={12}\r\n                style={{\r\n                    display : \"flex\",\r\n                    justifyContent : \"center\",\r\n                    alignItems : \"center\"\r\n                }}\r\n            >\r\n                <ButtonGroup variant=\"contained\">\r\n                    {data.payment_type === 'partial' ? (\r\n                        <Button    \r\n                            size=\"small\"                                                                                    \r\n                            color=\"secondary\"\r\n                            style={{\r\n                                background : \"green\"\r\n                            }}\r\n                            onClick={async()=>{\r\n                                const res = await dispatch( updateTransaction({\r\n                                    opt : {\r\n                                        url : '/transactions/' + data._id\r\n                                    },\r\n                                    value : payment\r\n                                }) );\r\n\r\n                                if( updateTransaction.fulfilled.match(res) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Updated',\r\n                                        severity : 'success'\r\n                                    }) );\r\n                                }else{\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Update Failed',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                        >\r\n                            Pay\r\n                        </Button>\r\n                    ) : (\r\n                        <Button size=\"small\" disabled >Paid</Button>\r\n                    )}\r\n                    <Button\r\n                        size=\"small\"                                                                                       \r\n                        style={{\r\n                            background : \"green\",                            \r\n                            color : \"white\"\r\n                        }}\r\n                        onClick={ async()=>{\r\n                            try{\r\n                                const resSettings = await dispatch( GetSettings({\r\n                                    url : '/settings'\r\n                                }) );\r\n\r\n                                if( GetSettings.fulfilled.match(resSettings) ){\r\n                                    const { settings } = resSettings.payload;\r\n                                    const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                                    const port = settings.port !== undefined ? settings.port : 8081;\r\n                                    const socket = io(`http://${host}:${port}`);\r\n                                    \r\n                                    const resTrans = await dispatch( CreateTransactionReport({\r\n                                        url : '/transactions/' + data._id\r\n                                    }) );\r\n        \r\n                                    if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                                        const { doc,logo } = resTrans.payload;\r\n                                        let pdf = JSON.parse(doc);                                                              \r\n        \r\n                                        if( pdf.length > 0 ){\r\n                                            pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                                            const docDef = TransactionDocDef(pdf,logo);\r\n                                            const docGenerator = pdfMake.createPdf(docDef);\r\n        \r\n                                            docGenerator.getBlob(blob=>{\r\n                                                const url = window.URL.createObjectURL(blob);                        \r\n                                                history.push('/transaction/success?pdf=' + url + \"&page=transaction\");\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                                \r\n                            }catch(err){\r\n                                dispatch( OpenNotification({\r\n                                    message : 'Cannot Print Transaction, please try again.',\r\n                                    severity : 'error'\r\n                                }) );\r\n                            }  \r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={faEye} />}\r\n                    >\r\n                        View\r\n                    </Button>\r\n                    <Button \r\n                        size=\"small\"                                                                                       \r\n                        color=\"primary\"\r\n                        onClick={async ()=>{\r\n                            try{\r\n                                const resSettings = await dispatch( GetSettings({\r\n                                    url : '/settings'\r\n                                }) );\r\n\r\n                                if( GetSettings.fulfilled.match(resSettings) ){\r\n                                    const { settings } = resSettings.payload;\r\n                                    const host = settings.address !== undefined ? settings.address : \"localhost\";\r\n                                    const port = settings.port !== undefined ? settings.port : 8081;\r\n                                    const socket = io(`http://${host}:${port}`);\r\n                                    \r\n                                    const resTrans = await dispatch( CreateTransactionReport({\r\n                                        url : '/transactions/' + data._id\r\n                                    }) );\r\n        \r\n                                    if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                                        const { doc,logo } = resTrans.payload;\r\n                                        let pdf = JSON.parse(doc);                                                              \r\n        \r\n                                        if( pdf.length > 0 ){\r\n                                            pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                                            const docDef = TransactionDocDef(pdf,logo);\r\n                                            const docGenerator = pdfMake.createPdf(docDef);\r\n        \r\n                                            docGenerator.getBase64(data64=>{\r\n                                                socket.emit('printcmd',{\r\n                                                    sid : socket.id,\r\n                                                    data : data64,\r\n                                                    id : data._id,\r\n                                                });\r\n                                            });\r\n        \r\n                                            docGenerator.getBlob(blob=>{\r\n                                                const url = window.URL.createObjectURL(blob);                        \r\n                                                history.push('/transaction/success?pdf=' + url + \"&page=transaction\");\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                }\r\n                                \r\n                            }catch(err){\r\n                                dispatch( OpenNotification({\r\n                                    message : 'Cannot Print Transaction, please try again.',\r\n                                    severity : 'error'\r\n                                }) );\r\n                            }                            \r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={faPrint} />}\r\n                    >\r\n                        Print\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        color=\"secondary\"\r\n                        onClick={()=>{\r\n                            history.push(\"/transaction/delete/\" + data._id);\r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        style={{\r\n                            background : \"orange\",\r\n                            color : \"white\"\r\n                        }}\r\n                        onClick={fn}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction TransactionSingle(props) {\r\n\r\n    const { inOpen,onClose,data : transaction } = props;\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const classes = useStyles();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={inOpen}\r\n            onClose={onClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"700px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={inOpen}\r\n            >\r\n                <div className={classes.ModalContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Receipt No\"\r\n                                value={transaction._id}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faIdCard} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Customer\"\r\n                                value={transaction.customer_name}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label=\"Item in cart\"\r\n                                value={transaction.cart_count}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faBoxes} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                fullWidth\r\n                                label=\"Transaction Date\"\r\n                                value={new Date(transaction.transaction_date).toISOString().split('T')[0]}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faCalendar} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={5} sm={5}>\r\n                            <TextField \r\n                                size=\"small\"                                \r\n                                fullWidth\r\n                                label=\"Payment Type\"\r\n                                value={transaction.payment_type}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={7} sm={7}>\r\n                            <NumberFormat\r\n                                customInput={TextField}\r\n                                fixedDecimalScale\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                decimalScale={2}\r\n                                thousandSeparator\r\n                                allowNegative={false}\r\n                                prefix=\"Php \" \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label={transaction.payment_type == 'partial' ? \"Remaining Balance\" : \"Change Amount\"}\r\n                                value={transaction.change_amount_srp}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <BtnGroupSingleTrans fn={onClose} data={transaction} />\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TransactionSingle\r\n","import { TableCell, TableRow } from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport React, { useState } from 'react'\r\nimport TransactionSingle from './TransactionSingle';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction TransactionItems({transaction}) {\r\n\r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleOpen = ()=>{\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n    \r\n    return (\r\n        <TableRow\r\n            key={transaction._id}\r\n            hover\r\n            onDoubleClick={handleOpen}\r\n            style={{ \r\n                background : transaction.payment_type == 'partial' ? '#fafafa' : '',\r\n                cursor : 'pointer',\r\n                userSelect : 'none'\r\n            }}\r\n        >\r\n            <TableCell>{transaction.customer_name}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.cart_count}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.transaction_date.split('T')[0]}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.payment_type}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.cash_amount}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.total_price_srp}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.change_amount_srp}\r\n                    thousandSeparator\r\n                    allowNegative={false}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TransactionSingle data={transaction} inOpen={open} onClose={handleClose} />\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default TransactionItems\r\n","import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    AppBar, \r\n    Dialog, \r\n    Grid, \r\n    IconButton, \r\n    InputAdornment, \r\n    makeStyles, \r\n    Paper, \r\n    Slide, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow, \r\n    TextField, \r\n    Toolbar \r\n} from '@material-ui/core';\r\nimport { KeyboardDatePicker,MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { forwardRef, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { findTransaction, getAllTransaction } from '../store/TransactionServices';\r\nimport TransactionItems from './TransactionItems';\r\nimport Loader from '../../shared/components/Loader';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    appBar : {\r\n        position : 'relative',\r\n        background : \"#ffffff\"\r\n    }\r\n}));\r\n\r\nconst TransitionDialog = forwardRef((props,ref)=>{\r\n    return(\r\n        <Slide \r\n            direction=\"up\"\r\n            ref={ref}\r\n            {...props}            \r\n        />\r\n    )\r\n});\r\n\r\nfunction TransactionList(props) {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { entities : transactions } = useSelector(state=>state.transactions);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    \r\n    const [open,setOpen] = useState(false);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const [search,setSearch] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleClose = ()=>{\r\n        setOpen(false);\r\n        history.goBack();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        dispatch( getAllTransaction({\r\n            opt : {\r\n                url : '/transactions'\r\n            }\r\n        }) );\r\n    },[]);\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date(Date.now()).toLocaleDateString());\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(new Date(date));\r\n        let selDate = new Date(date);\r\n        dispatch( findTransaction({\r\n            opt : {\r\n                url : `/search/transactions?date=${selDate}`\r\n            }\r\n        }) )\r\n    };\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Dialog\r\n            fullScreen\r\n            open={open}\r\n            onClose={handleClose}\r\n            TransitionComponent={TransitionDialog}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"700px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            style={{\r\n                WebkitAppRegion : \"no-drag\",\r\n                padding : \"20px\",\r\n                height : \"660px\",\r\n                borderRadius : \"10px\"\r\n            }}\r\n        >   \r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar \r\n                    style={{\r\n                        justifyContent : 'space-between'\r\n                    }}\r\n                >\r\n                    <TextField \r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        label=\"Search\"\r\n                        InputProps={{\r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        style={{\r\n                            flexBasis : \"220px\",\r\n                            flex : 2,\r\n                            marginRight : \"10px\"\r\n                        }}\r\n                        onKeyDown={(e)=>{\r\n                            setSearch(e.target.value);\r\n                        }}\r\n                        onKeyPress={(e)=>{\r\n                            if( e.key === 'Enter' ){\r\n                                dispatch( findTransaction({\r\n                                    opt : {\r\n                                        url : `/search/transactions?s=${search}`\r\n                                    }\r\n                                }) )\r\n                            }\r\n                        }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"yyyy-dd-MM\"\r\n                        size=\"small\"\r\n                        margin=\"dense\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Filter Date\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          'aria-label': 'change date',\r\n                        }}\r\n                        style={{\r\n                            alignSelf : \"flex-start\",\r\n                            flex : 1\r\n                        }}\r\n                    />\r\n                    <IconButton focusRipple={false} style={{ margin : \"0px 8px\" }} size=\"small\" onClick={handleClose}>\r\n                        <Close color=\"secondary\" />\r\n                    </IconButton>                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container>\r\n                <Grid item lg={12} sm={12} style={{ padding : \"30px\" }}>\r\n                    <TableContainer\r\n                        component={Paper}\r\n                        elevation={2}\r\n                        style={{\r\n                            minHeight : \"500px\",\r\n                            position : \"relative\"\r\n                        }}\r\n                    >\r\n                        <Table \r\n                            stickyHeader \r\n                            size=\"medium\"\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{ fontWeight : 600 }}>Customer Name</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>In cart</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Transaction date</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Payment Type</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Cash Amount</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Total</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Change</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {transactions.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(entry=>(\r\n                                    <TransactionItems transaction={entry} />\r\n                                ))}\r\n                                <TableRow style={{ position : \"absolute\", bottom : 0, right : 0 }} >\r\n                                    <TablePagination \r\n                                        rowsPerPageOptions={[8, 16, 800]}\r\n                                        count={transactions.length}\r\n                                        rowsPerPage={rowsPerPage}\r\n                                        page={page}\r\n                                        onChangePage={handleChangePage}\r\n                                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                        labelRowsPerPage={false}\r\n                                    />\r\n                                </TableRow>\r\n                            </TableBody>                            \r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>            \r\n        </Dialog>\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nexport default TransactionList\r\n","import React,{ useEffect,useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { Modal,Backdrop,Fade, Fab } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport Styles from './Styles';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { Close } from '@material-ui/icons';\r\n\r\nexport const useQuery = ()=>{\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction SuccessPage(props) {\r\n\r\n    const history = useHistory();\r\n    const [open,setOpen] = useState(false);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const { loading : rptLoad } = useSelector(state=>state.report);\r\n    const query = useQuery();\r\n    const pdf = query.get('pdf');\r\n    const page = query.get('page');\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        \r\n        if( page === 'transaction' ){\r\n            history.goBack();\r\n        }else{\r\n            history.push('/');\r\n        }\r\n\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{        \r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading || rptLoad ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    height : \"700px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={classes.SuccessPageModal}>\r\n                    <Fab\r\n                        size=\"small\"\r\n                        variant=\"circular\"\r\n                        onClick={handleClose}\r\n                        style={{\r\n                            position : \"absolute\",\r\n                            left : 15,\r\n                            top : 8,          \r\n                            WebkitAppRegion : \"no-drag\"          \r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </Fab>\r\n                    <iframe                         \r\n                        style={{\r\n                            border : \"none\",    \r\n                            WebkitAppRegion : 'no-drag'                        \r\n                        }} \r\n                        onClick={handleClose}                         \r\n                        src={pdf+'#toolbar=1'} \r\n                        width=\"100%\" \r\n                        height=\"100%\"\r\n                    ></iframe>\r\n                </div>                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(SuccessPage)\r\n","const useStyles = {\r\n    SettingsModal : {\r\n        WebkitAppRegion : \"no-drag\",\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        outline : \"none\",\r\n        borderRadius : \"15px\"\r\n    },\r\n    SettingsContent : {\r\n        backgroundColor : \"#ffffff\",\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        outline : \"none\",\r\n        padding : \"20px\"\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { faCog, faNetworkWired } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal,Backdrop,withStyles, Fade, Grid, TextField, InputAdornment, Button } from '@material-ui/core';\r\nimport { Dns, UsbRounded } from '@material-ui/icons';\r\nimport React,{useEffect,useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { SetIPAddress } from '../store/SettingsServices';\r\nimport Styles from './Styles';\r\n\r\nfunction Settings(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const [open,setOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.settings);\r\n    const { settings } = useSelector(state=>state.settings.entities);\r\n    const [ipAdd,setIpAdd] = useState(settings.address);\r\n    const [port,setPort] = useState(settings.port);\r\n    const history = useHistory();\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleRestart = ()=>{\r\n        ipcRenderer.invoke('restart');\r\n    }\r\n\r\n    const handlePortChange = (e)=>{\r\n        setPort(e.target.value);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"700px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.SettingsModal}\r\n        >\r\n            <Fade\r\n                in={open}                        \r\n            >\r\n                <div className={classes.SettingsContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField\r\n                                value={ipAdd}\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Host Address\"\r\n                                placeholder=\"0.0.0.0\"\r\n                                onChange={(e)=>{\r\n                                    setIpAdd(e.target.value)\r\n                                }}\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <Dns />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"dense\"\r\n                                fullWidth\r\n                                label=\"Port\"       \r\n                                value={port}\r\n                                onChange={handlePortChange}       \r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <UsbRounded />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={6} sm={6}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                size=\"medium\"\r\n                                startIcon={<FontAwesomeIcon icon={faCog} />}\r\n                                onClick={ async(e)=>{\r\n                                    \r\n                                    const resSettings = await dispatch(SetIPAddress({\r\n                                        url : \"/settings\",\r\n                                        data : {\r\n                                            address : ipAdd,\r\n                                            port : parseInt(port)\r\n                                        }\r\n                                    }));\r\n                                    \r\n                                    if( SetIPAddress.fulfilled.match(resSettings) ){\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Settings has been saved.\",\r\n                                            severity : \"success\"\r\n                                        }) );\r\n                                        history.push('/');\r\n                                        handleRestart();\r\n                                    }else{\r\n                                        dispatch( OpenNotification({\r\n                                            message : \"Please run application as `Administrator`\\nSettings not save.\",\r\n                                            severity : \"error\"\r\n                                        }) );\r\n                                    }\r\n\r\n                                }}\r\n                            >Save</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Settings)\r\n","const useStyles = {\r\n    Modal : {\r\n        display : \"flex\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        outline : \"none\"\r\n    },\r\n    ModalContent : {\r\n        background : \"#ffffff\",\r\n        height : \"auto\",\r\n        width : \"350px\",\r\n        outline : \"none\",\r\n        padding : \"30px\"\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Modal,Fade,Backdrop, Grid,withStyles, Button } from '@material-ui/core';\r\nimport React,{ useEffect,useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { loadingSelector } from '../../products/store/productSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { deleteTransaction } from '../store/TransactionServices';\r\nimport Styles from './Styles';\r\n\r\nfunction TransactionDeleteModal(props) {\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const { classes } = props;\r\n    const dispatch = useDispatch();\r\n    const {loading} = useSelector(state=>state.transactions);\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal            \r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"700px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <Grid container className={classes.ModalContent} spacing={2}>\r\n                    <Grid item lg={12} sm={12}>\r\n                        <h4\r\n                            style={{\r\n                                textAlign : \"center\"\r\n                            }}\r\n                        >Delete transaction entry?</h4>                        \r\n                    </Grid>\r\n                    <Grid item lg={6} sm={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            startIcon={<FontAwesomeIcon icon={faTrash} />}\r\n                            onClick={ async()=>{\r\n                                const resTrans = await dispatch( deleteTransaction({\r\n                                    opt : {\r\n                                        url : \"/transactions/\" + id\r\n                                    }\r\n                                }) );\r\n\r\n                                if( deleteTransaction.fulfilled.match(resTrans) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : \"Transaction has been deleted.\",\r\n                                        severity : \"success\"\r\n                                    }) );\r\n                                    handleClose();\r\n                                }else{\r\n                                    dispatch(OpenNotification({\r\n                                        message : \"Error deleting transaction.\",\r\n                                        severity : \"error\"\r\n                                    }));\r\n                                }\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item lg={6} sm={6}>\r\n                        <Button\r\n                            fullWidth\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleClose}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(TransactionDeleteModal)\r\n","import { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Fade, Grid, Modal,withStyles,TextField, Button, ButtonGroup } from '@material-ui/core';\r\nimport React,{useEffect,useState, useCallback} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { addItem, cartItems, setDiscount, updateQty } from '../store/CartSlice';\r\nimport Styles from './Styles';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nconst useQuery = ()=>{\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction AddQty(props) {\r\n\r\n    const [qty,setQTY] = useState(1);\r\n    const [open,setOpen] = useState(false);\r\n    const [itemDiscount,setItemDiscount] = useState(0);\r\n    const [err,setErr] = useState(false);\r\n\r\n    const cart = useSelector(cartItems);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const mode = useQuery().get('mode');\r\n    const dispatch = useDispatch();\r\n    const { AddQTYModal,ModalCartContent } = props.classes;\r\n    \r\n\r\n    const { state : item } = location;\r\n\r\n    const cartQuantity = ()=>{\r\n        const arrCurrentCart = cart.filter(itm=>itm.item_name===item.item_name);\r\n        return arrCurrentCart[0] !== undefined ? parseInt(arrCurrentCart[0].qty) : [];\r\n    }\r\n\r\n    const errMessage = cartQuantity() >= item.item_qty || mode === \"update\" && parseInt(qty) > parseInt(item.inventory_qty) ? \"Inventory is empty\" : \"Current quantity in inventory is : \" + (mode === \"update\" ? item.inventory_qty : item.item_qty);\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleDiscount = (e)=>{\r\n        e.target.value === \"\" ? setItemDiscount(0) : setItemDiscount(e.target.value);        \r\n    }\r\n\r\n    const handleChange = (e)=>{\r\n        e.target.value === \"\" ? setQTY(1) : setQTY(e.target.value);\r\n    }\r\n\r\n    const handleSave = ()=>{        \r\n\r\n        let val = qty === \"\" ? 0 : parseInt(qty);           \r\n        if(err) return;\r\n        if( val > item.item_qty ) return;\r\n        if( mode === \"update\" && val > parseInt(item.inventory_qty) ) return;        \r\n        if( cartQuantity() >= item.item_qty ) return;\r\n\r\n        if( mode === null ){\r\n\r\n            dispatch(addItem({\r\n                ...item,\r\n                inventory_qty : item.item_qty,\r\n                item_qty : val,\r\n                discount : parseInt(itemDiscount)\r\n            }));\r\n\r\n        }else{\r\n            if( item.discount !== parseInt(itemDiscount) ){\r\n                dispatch( setDiscount({\r\n                    ...item,\r\n                    discount : parseInt(itemDiscount)\r\n                }) );\r\n            };\r\n\r\n            if( item.qty !== qty ){\r\n                dispatch( updateQty({\r\n                    ...item,\r\n                    qty : val\r\n                }) );\r\n            }\r\n        }\r\n\r\n        handleClose();\r\n    }\r\n\r\n    const handleSaveEvent = useCallback(e=>{\r\n        let saveBtn = document.getElementById(\"saveBtn\");\r\n        if( e.key == \"Enter\" || e.code == \"Enter\" ){\r\n            saveBtn.click();\r\n        }\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        document.addEventListener('keypress',handleSaveEvent);\r\n\r\n        return ()=>{\r\n            document.removeEventListener('keypress',handleSaveEvent);\r\n        }\r\n    },[handleSaveEvent]);\r\n\r\n    useEffect(()=>{\r\n        if( (item.item_qty - (cartQuantity() + parseInt(qty))) < 0 ){\r\n            setErr(true);\r\n        }else{\r\n            setErr(false);\r\n        }\r\n    },[item.item_qty,qty]);\r\n\r\n    useEffect(()=>{\r\n        \r\n        if( mode === \"update\" ){\r\n           setQTY(item.qty);\r\n           setItemDiscount(item.discount * 100);\r\n        }\r\n\r\n        setOpen(true);\r\n      \r\n    },[]);\r\n\r\n    return (\r\n        <Modal            \r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500\r\n            }}\r\n            closeAfterTransition\r\n            className={AddQTYModal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <Grid                     \r\n                    container \r\n                    className={ModalCartContent} \r\n                    spacing={2}      \r\n                    id=\"qty-modal\"              \r\n                >\r\n                    <Grid item lg={12} sm={12}>\r\n                    <NumberFormat\r\n                        customInput={TextField} \r\n                        fullWidth\r\n                        disabled={item.error}\r\n                        variant=\"outlined\"\r\n                        label=\"Discount\"              \r\n                        size=\"small\" \r\n                        margin=\"none\"\r\n                        value={parseInt(itemDiscount)}      \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : \"center\"\r\n                            }\r\n                        }}    \r\n                        onChange={handleDiscount}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                    </Grid>\r\n                    <Grid item lg={12} sm={12}>\r\n                        <NumberFormat\r\n                            customInput={TextField} \r\n                            autoFocus\r\n                            error={ err || cartQuantity() >= item.item_qty || mode === \"update\" && qty > parseInt(item.inventory_qty) ? true : false}\r\n                            helperText={errMessage}\r\n                            fullWidth                            \r\n                            label=\"Quantity\"\r\n                            value={parseInt(qty)}\r\n                            onChange={handleChange}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            inputProps={{\r\n                                style : {\r\n                                    textAlign : \"center\"\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item lg={12} sm={12}>\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                id=\"saveBtn\"\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                startIcon={<FontAwesomeIcon icon={faSave} />}\r\n                                color=\"primary\"\r\n                                onClick={(e)=>{\r\n                                    e.preventDefault();\r\n                                    handleSave(e);\r\n                                }}\r\n                            >\r\n                                {mode === \"update\" ? \"Update\" : \"Save\"}\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                color=\"secondary\"\r\n                                onClick={()=>{\r\n                                    \r\n                                    handleClose();\r\n                                }}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(AddQty)\r\n","import React,{useEffect,useRef} from 'react';\nimport { BrowserRouter as Router,Switch, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Index';\nimport ProductsList from './products/components/ProductsList';\nimport { Grid, withStyles } from '@material-ui/core';\nimport useStyles from './Styles';\nimport Toast from './shared/components/Toast';\nimport { useDispatch } from 'react-redux';\nimport { CloseNotification } from './shared/store/NotificationSlice';\nimport Transaction from './cart/components/Transaction';\nimport Header from './shared/components/Header';\nimport TransactionList from './transactions/components/TransactionList';\nimport SuccessPage from './cart/components/SuccessPage';\nimport Settings from './settings/components/settings';\nimport TransactionDeleteModal from './transactions/components/TransactionDeleteModal';\nimport AddQty from './cart/components/AddQty';\n\nfunction App(props) {\n\n  const dispatch = useDispatch();\n  const { root,ContainerWrap } = props.classes;\n  const searchRef = useRef(null);\n  const focusSearch = ()=>{\n      searchRef.current.focus();\n  }\n\n  useEffect(()=>{\n\n      document.addEventListener('keydown',(e)=>{\n          if( e.ctrlKey && e.key == 'f' ){\n              focusSearch();\n          }\n      });\n\n      return ()=>{\n        document.removeEventListener('keydown',(e)=>{          \n            if( e.ctrlKey && e.key == 'f' ){\n                focusSearch();\n            }\n        });\n      }      \n\n  },[]);\n\n  const handleClose = ()=>{\n      dispatch( CloseNotification() );\n  }\n\n  return (\n    <Router>\n    <Grid style={{ WebkitAppRegion : 'drag' }} container dicrection=\"column\" className={root} spacing={3}>\n        <Header searchRef={searchRef} />\n        <Grid item lg={12} sm={12} className={ContainerWrap}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Dashboard />\n                </Route>\n                <Route exact path=\"/products\" >\n                    <ProductsList />\n                </Route>\n                <Route exact path=\"/add-qty\" >\n                    <AddQty />\n                </Route>\n                <Route exact path=\"/transaction\">\n                    <Transaction />\n                </Route>\n                <Route exact path=\"/transaction/success\">\n                    <SuccessPage />\n                </Route>\n                <Route exact path=\"/translist\">\n                    <TransactionList />\n                </Route>\n                <Route exact path=\"/transaction/delete/:id\">\n                    <TransactionDeleteModal />\n                </Route>\n                <Route exact path=\"/settings\" >\n                    <Settings />\n                </Route>\n            </Switch>\n            <Toast\n                handleCloseToast={handleClose}\n            />\n        </Grid>\n    </Grid>\n    </Router>\n  );\n}\n\nexport default withStyles(useStyles)(App);","import { createSlice } from '@reduxjs/toolkit';\r\nimport { createTransaction, deleteTransaction, findTransaction, getAllTransaction,getDocDef,updateTransaction } from './TransactionServices';\r\n\r\nconst transactionSlice = createSlice({\r\n    name : 'transactions',\r\n    initialState : {\r\n        entities : [],\r\n        pdf : [],\r\n        loading : false,\r\n        errors : null\r\n    },\r\n    reducers : {},\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL TRANSACTIONS\r\n        builder.addCase(getAllTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getAllTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(getAllTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //FIND TRANSACTION\r\n        .addCase(findTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(findTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(findTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //GET DOCUMENT DEFINITION FOR PRINT\r\n        .addCase(getDocDef.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getDocDef.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.pdf = payload;\r\n        })\r\n        .addCase(getDocDef.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        .addCase(createTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(createTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities[payload._id] = payload;\r\n        })\r\n        .addCase(createTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //UPDATE TRANSACTION\r\n        .addCase(updateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(updateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(updateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //DELETE TRANSACTION\r\n        .addCase(deleteTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(deleteTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(deleteTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default transactionSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { CreateTransactionReport } from './ReportServices';\r\n\r\nconst ReportSlice = createSlice({\r\n    name : 'report',\r\n    initialState : {\r\n        doc : '',\r\n        loading : false,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder =>{\r\n        builder.addCase( CreateTransactionReport.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransactionReport.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.doc = payload;\r\n        })\r\n        .addCase(CreateTransactionReport.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default ReportSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { GetSettings, SetIPAddress } from './SettingsServices';\r\n\r\nconst SettingsSlice = createSlice({\r\n    name : 'settings',\r\n    initialState : {\r\n        entities : [],\r\n        loading : true,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder=>{\r\n        //SET HOST IP ADDRESS\r\n        builder.addCase( SetIPAddress.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(SetIPAddress.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(SetIPAddress.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //GET SETTINGS\r\n        .addCase(GetSettings.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(GetSettings.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(GetSettings.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default SettingsSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport ProductReducers from '../../products/store/productSlice';\r\nimport CartReducer from '../../cart/store/CartSlice';\r\nimport NotificationReducer from './NotificationSlice';\r\nimport TransactionReducer from '../../transactions/store/TransactionSlice';\r\nimport ConnectionReducer from './ConnectionSlice';\r\nimport ReportReducer from './ReportSlice';\r\nimport SettingsReducer from '../../settings/store/SettingsSlice';\r\n\r\nexport default configureStore({\r\n    reducer : {\r\n        settings : SettingsReducer,\r\n        products : ProductReducers,\r\n        cart : CartReducer,\r\n        notifications : NotificationReducer,\r\n        transactions : TransactionReducer,\r\n        connection : ConnectionReducer,   \r\n        report : ReportReducer     \r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './shared/store/MainStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}