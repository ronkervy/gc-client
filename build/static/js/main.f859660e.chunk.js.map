{"version":3,"sources":["shared/components/Styles.js","shared/components/Loader.js","cart/store/CartServices.js","shared/store/NotificationSlice.js","cart/store/CartSlice.js","cart/components/CartItems.js","cart/components/Cart.js","products/store/productServices.js","products/store/productSlice.js","products/components/ProductItem.js","products/components/ProductsList.js","components/Dashboard/Styles.js","components/Dashboard/Index.js","Styles.js","shared/components/Toast.js","cart/components/PrintTransaction.js","shared/store/ReportServices.js","cart/components/Styles.js","cart/docs/TransactionDocDef.js","cart/components/Transaction.js","shared/store/ConnectionSlice.js","shared/components/Header.js","transactions/store/TransactionServices.js","transactions/components/TransactionSingle.js","transactions/components/TransactionItems.js","transactions/components/TransactionList.js","cart/components/SuccessPage.js","App.js","transactions/store/TransactionSlice.js","shared/store/ReportSlice.js","shared/store/MainStore.js","index.js"],"names":["useStyles","ProgressWrap","top","left","display","position","justifyContent","alignItems","zIndex","backgroundColor","height","width","transition","borderRadius","HeaderWrap","padding","WebkitAppRegion","withStyles","CartService","props","classes","className","CircularProgress","size","NotificationSlice","createSlice","initialState","open","message","severity","reducers","OpenNotification","state","payload","CloseNotification","actions","window","require","ipcRenderer","on","e","args","host","address","axios","create","baseURL","timeout","sleep","x","Promise","resolve","setTimeout","CreateTransaction","createAsyncThunk","a","rejectWithValue","values","url","method","data","res","response","cartAdapter","createEntityAdapter","selectId","prod","_id","CartSlice","name","getInitialState","cart","loading","error","addItem","index","findIndex","item_name","item_price","item_qty","qty","parseInt","total_per_unit","unshift","inventory_qty","discount","updateQty","val","NaN","setDiscount","calcDiscount","total","removeItem","splice","extraReducers","builder","addCase","pending","fulfilled","rejected","selectCart","cartItems","createDraftSafeSelector","cartLoading","CartItems","item","dispatch","useDispatch","useState","setTotal","useEffect","TableRow","component","motion","tr","initial","y","opacity","animate","TableCell","style","fontSize","color","icon","faBoxes","TextField","variant","value","onChange","target","inputProps","textAlign","thousandSeparator","displayType","decimalScale","decimalSeparator","fixedDecimalScale","disabled","IconButton","onClick","faTrashAlt","Cart","ProdServices","useSelector","items","setItems","page","setPage","rowsPerPage","setRowsPerPage","history","useHistory","TableContainer","Paper","elevation","minHeight","Table","stickyHeader","TableHead","TableBody","slice","map","bottom","colSpan","Button","startIcon","faShoppingBag","length","errors","push","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","labelRowsPerPage","selectAllProducts","opt","searchProduct","selectSingleProduct","id","productsAdapter","sortComparer","createdAt","productSlice","selectedProd","setAll","addOne","loadingSelector","products","productsSelector","getSelectors","ProductItem","hover","cursor","faBox","faPlusCircle","ProductsList","selectAll","io","aria-label","product","Dashboard","infoBlock","background","ContentBlock","Styles","Grid","container","spacing","direction","lg","sm","body","margin","overflow","html","root","ContainerWrap","Toast","handleCloseToast","notifications","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","right","Alert","Transition","forwardRef","ref","Slide","PrintTransaction","ReportServices","setOpen","handleClose","goBack","Dialog","TransitionComponent","fullScreen","AppBar","Toolbar","edge","Close","Container","maxWidth","useStyle","TransactionModal","ModalContent","outline","SuccessPageModal","flexDirection","CreateTransactionReport","docs","logoURL","console","log","transaction_type","pageSize","pageMargins","header","currentPage","columns","image","stack","text","alignment","footer","pageCount","parseFloat","toFixed","content","italics","bold","layout","hLineWidth","i","node","table","hLineHeight","paddingBottom","colIndex","currentPosition","positions","pageInnerHeight","dontBreakRows","headerRows","widths","styles","subheader","tableHeader","fillColor","border","tableItems","defaultStyle","font","columnGap","useLocation","customer_name","transact_payment_type","cash_amount","transact_status","info","setInfo","undefined","transact_id","resTrans","match","doc","logo","pdf","JSON","parse","pdfMake","vfs","pdfFonts","docDef","TransactionDocDef","createPdf","getBlob","blob","URL","createObjectURL","price","prevVal","Modal","BackdropComponent","Backdrop","BackdropProps","Fade","in","Typography","customInput","fullWidth","label","InputProps","startAdornment","InputAdornment","faDollarSign","prefix","faUserTie","faMoneyBill","cash","select","transaction_payment_type","payment_type","MenuItem","ButtonGroup","faMoneyBillAlt","total_amount","change_amount","ConnectionSlice","isConnected","setConnection","TransServices","searchRef","connection","socket","connected","Box","alignSelf","inputRef","faSearch","onKeyPress","key","Divider","orientation","flexItem","faSyncAlt","justifySelf","faList","faCircle","div","whileHover","scale","invoke","Minimize","getAllTransaction","createTransaction","findTransaction","getDocDef","responseType","headers","Accept","mode","updateTransaction","deleteTransaction","makeStyles","theme","BtnGroupSingleTrans","fn","report","partial_payments","payment","setPayment","faMoneyBillWaveAlt","faPrint","TransactionSingle","inOpen","transaction","transactions","faIdCard","cart_count","Date","transaction_date","toISOString","split","faCalendar","allowNegative","TransactionItems","onDoubleClick","userSelect","total_price","appBar","TransitionDialog","TransactionList","entities","search","setSearch","now","toLocaleDateString","selectedDate","setSelectedDate","utils","DateFnsUtils","flexBasis","flex","marginRight","onKeyDown","disableToolbar","format","date","selDate","KeyboardButtonProps","focusRipple","fontWeight","entry","rptLoad","query","URLSearchParams","get","Fab","src","useRef","focusSearch","current","focus","emit","document","addEventListener","ctrlKey","removeEventListener","dicrection","exact","path","transactionSlice","ReportSlice","configureStore","reducer","ProductReducers","CartReducer","NotificationReducer","TransactionReducer","ConnectionReducer","ReportReducer","ReactDOM","render","store","getElementById"],"mappings":"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","file":"static/js/main.f859660e.chunk.js","sourcesContent":["const useStyles = {\r\n    ProgressWrap : {\r\n        top : 0,\r\n        left : 0,\r\n        display : \"flex\",\r\n        position: \"fixed\",\r\n        justifyContent : \"center\",\r\n        alignItems : \"center\",\r\n        zIndex : 100,\r\n        backgroundColor : \"rgba(0, 0, 0, 0.9)\",\r\n        height: \"730px\",\r\n        width : \"100%\",\r\n        transition : \"all 300ms linear\",\r\n        borderRadius : '20px'\r\n    },\r\n    HeaderWrap : {\r\n        height : '60px',\r\n        padding : '20px 0px',\r\n        borderRadius : '10px',\r\n        WebkitAppRegion : 'drag'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { CircularProgress, withStyles } from '@material-ui/core'\r\nimport React from 'react'\r\nimport useStyles from './Styles'\r\n\r\nfunction Loader(props) {\r\n\r\n    const { classes } = props;\r\n\r\n    return (\r\n        <div className={classes.ProgressWrap}>\r\n            <CircularProgress size={70} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Loader)\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst { ipcRenderer } = window.require('electron');\r\n\r\nlet CartService;\r\n\r\nipcRenderer.on('get-ip',(e,args)=>{\r\n    const host = args.address ? args.address : 'localhost';\r\n    CartService = axios.create({\r\n        baseURL : `http://${host}:8081/api/v1`,\r\n        timeout : 1000\r\n    });\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const CreateTransaction = createAsyncThunk(\r\n    'cart/CreateTransaction',\r\n    async(args,{rejectWithValue})=>{        \r\n        try{\r\n            const { values } = args;\r\n            const res = await CartService({\r\n                url : '/transactions',\r\n                method : 'POST',\r\n                data : values\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst NotificationSlice = createSlice({\r\n    'name' : 'notifications',\r\n    initialState : {\r\n        open : false,\r\n        message : '',\r\n        severity : ''\r\n    },\r\n    reducers : {\r\n        OpenNotification : (state,{payload})=>{\r\n            state.open = true;\r\n            state.severity = payload.severity;\r\n            state.message = payload.message;\r\n        },\r\n        CloseNotification : (state,{payload})=>{\r\n            state.open = false;\r\n            state.severity = '';\r\n            state.message = '';\r\n        }\r\n    }\r\n});\r\n\r\nexport const { OpenNotification,CloseNotification } = NotificationSlice.actions;\r\n\r\nexport default NotificationSlice.reducer;","import { createSlice,createEntityAdapter,createDraftSafeSelector } from '@reduxjs/toolkit';\r\nimport { CreateTransaction } from './CartServices';\r\n\r\nconst cartAdapter = createEntityAdapter({\r\n    selectId : prod=>prod._id\r\n});\r\n\r\nconst CartSlice = createSlice({\r\n    name : 'cart',\r\n    initialState : cartAdapter.getInitialState({\r\n        cart : [],\r\n        loading : false,\r\n        error : ''\r\n    }),\r\n    reducers : {\r\n        addItem : (state,{payload})=>{\r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === payload._id);\r\n\r\n            const {\r\n                _id,\r\n                item_name,\r\n                item_price,\r\n                item_qty\r\n            } = payload;\r\n\r\n            const qty = 1;\r\n            const discount = 0;\r\n\r\n            if( index !== -1 ) {\r\n                state.cart[index].qty = parseInt(state.cart[index].qty) + 1;\r\n                state.cart[index].total_per_unit = parseInt(state.cart[index].qty) * item_price;\r\n            }else{\r\n                state.cart.unshift({\r\n                    _id,\r\n                    item_name,\r\n                    item_price,\r\n                    inventory_qty : item_qty,\r\n                    error : false,\r\n                    qty,\r\n                    discount,\r\n                    total_per_unit : qty * item_price\r\n                });\r\n            }\r\n        },\r\n        updateQty : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                qty,\r\n                item_price,\r\n                inventory_qty\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            let val = qty === NaN ? 0 : parseInt(qty);\r\n\r\n            if( index !== -1 ){\r\n                state.cart[index].qty = val;\r\n                state.cart[index].total_per_unit = val * item_price\r\n\r\n                if( val > inventory_qty ){\r\n                    state.cart[index].error = true;\r\n                }else{\r\n                    state.cart[index].error = false;\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        setDiscount : (state,{payload})=>{\r\n            const {\r\n                _id,\r\n                discount,\r\n                item_price,\r\n                qty\r\n            } = payload;            \r\n\r\n            const index = state.cart.findIndex(prod=>prod._id === _id);\r\n            const calcDiscount = discount / 100;\r\n            const total = item_price * qty;\r\n\r\n            if(index !== -1){\r\n                state.cart[index].discount = calcDiscount;\r\n                state.cart[index].total_per_unit = discount !== 0 ? total - (total * calcDiscount) : item_price * qty;\r\n            }\r\n\r\n        },\r\n        removeItem : (state,{payload})=>{\r\n            const index = state.cart.findIndex(prod=>prod._id === payload);\r\n            state.cart.splice(index,1);\r\n        }\r\n    },\r\n    extraReducers : (builder)=>{\r\n        builder.addCase( CreateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.cart = [];\r\n        })\r\n        .addCase( CreateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nconst selectCart = (state)=>state.cart;\r\nexport const cartItems = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.cart\r\n);\r\nexport const cartLoading = createDraftSafeSelector(\r\n    selectCart,\r\n    state=>state.loading\r\n);\r\nexport const { addItem,removeItem,updateQty,setDiscount } = CartSlice.actions;\r\nexport default CartSlice.reducer;","import { faBoxes, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { IconButton, TableCell, TableRow, TextField, Tooltip } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { removeItem, updateQty,setDiscount } from '../store/CartSlice'\r\nimport NumberFormat from 'react-number-format';\r\nimport { motion } from 'framer-motion'\r\n\r\nfunction CartItems({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [total,setTotal] = useState(parseInt(item.item_price) * parseInt(item.qty));\r\n\r\n    useEffect(()=>{\r\n        setTotal(parseInt(item.item_price) * parseInt(item.qty));\r\n    },[item.qty]);\r\n\r\n    useEffect(()=>{\r\n        setTotal(item.total_per_unit);\r\n    },[item.total_per_unit]);\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                key={item._id}   \r\n                component={motion.tr}              \r\n                initial={{\r\n                    y : -100,\r\n                    opacity : 0\r\n                }}\r\n                animate={{\r\n                    y : 0,\r\n                    opacity : 1\r\n                }}\r\n            >\r\n                <TableCell\r\n                    style={{fontSize : '10px'}}\r\n                ><FontAwesomeIcon color=\"grey\" icon={faBoxes} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        error={ item.error }\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={item.qty}\r\n                        onChange={(e)=>{\r\n                            let val = e.target.value == '' ? 0 : parseInt(e.target.value);                            \r\n                            dispatch( updateQty({\r\n                                ...item,\r\n                                qty : val\r\n                            }));\r\n                        }}    \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px'\r\n                            }\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <NumberFormat\r\n                        thousandSeparator \r\n                        displayType=\"text\"\r\n                        value={total}\r\n                        style={{ fontSize : '10px' }}\r\n                        decimalScale={2} \r\n                        decimalSeparator={'.'}\r\n                        fixedDecimalScale={true}                    \r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <TextField \r\n                        disabled={item.error}\r\n                        variant=\"outlined\"\r\n                        size=\"small\" \r\n                        value={item.discount * 100}      \r\n                        inputProps={{\r\n                            style : {\r\n                                textAlign : 'center',\r\n                                fontSize : '10px',\r\n                                width : '50px'\r\n                            }\r\n                        }}    \r\n                        onChange={(e)=>{                               \r\n                            dispatch( setDiscount({\r\n                                ...item,\r\n                                discount : e.target.value === '' ? 0 : parseInt(e.target.value)\r\n                            }));\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"secondary\"\r\n                        onClick={()=>{\r\n                            dispatch( removeItem(item._id) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faTrashAlt} /> \r\n                    </IconButton>\r\n                </TableCell> \r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartItems\r\n","import { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    Button, \r\n    Paper, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow \r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartItems } from '../store/CartSlice';\r\nimport CartItems from './CartItems';\r\n\r\nfunction Cart(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector(cartItems);\r\n    const { loading } = useSelector(state=>state.cart);\r\n    const [items,setItems] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const history = useHistory();\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setItems(cart);\r\n    },[cart]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <TableContainer \r\n            component={Paper} \r\n            elevation={2} \r\n            style={{\r\n                minHeight : \"600px\",\r\n                position : 'relative'\r\n            }}\r\n        >\r\n            <Table size=\"small\" stickyHeader>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell style={{ textAlign : 'center' }}>QTY</TableCell>\r\n                        <TableCell>Total</TableCell>\r\n                        <TableCell>Discount</TableCell>\r\n                        <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {items.slice(page*rowsPerPage,page*rowsPerPage + rowsPerPage).map(item=>( \r\n                        <CartItems \r\n                            item={item}\r\n                        />\r\n                    ))}                    \r\n                </TableBody>\r\n                <TableRow style={{\r\n                    position : \"absolute\",\r\n                    bottom : '0',\r\n                    left : '0'\r\n                }}>      \r\n                    <TableCell colSpan={1}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                backgroundColor : \"green\",\r\n                                color : \"#ffffff\",\r\n                                WebkitAppRegion : 'no-drag'\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={faShoppingBag} />}\r\n                            onClick={()=>{\r\n\r\n                                if( items.length == 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Cart is Empty',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n\r\n                                let errors = [];\r\n\r\n                                items.map(item=>{\r\n                                    if( item.error === true ){\r\n                                        errors.push(item.error);\r\n                                    }\r\n                                });\r\n\r\n                                if( errors.length > 0 ){\r\n                                    return dispatch( OpenNotification({\r\n                                        message : 'Invalid Quantity',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                };\r\n\r\n                                history.push('/transaction',cart);\r\n                            }}\r\n                        >Checkout</Button>\r\n                    </TableCell>              \r\n                    <TableCell colSpan={4}>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[8, 16, 800]}\r\n                            count={items.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            labelRowsPerPage={false}\r\n                        />\r\n                    </TableCell>          \r\n                </TableRow>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst { ipcRenderer } = window.require('electron');\r\nlet ProdServices;\r\n\r\nipcRenderer.on('get-ip',(e,args)=>{\r\n    const host = args.address ? args.address : 'localhost';\r\n    \r\n    ProdServices = axios.create({\r\n        baseURL : `http://${host}:8081/api/v1`,\r\n        timeout : 1000\r\n    });\r\n\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const selectAllProducts = createAsyncThunk(\r\n    'products/selectAllProducts',\r\n    async( args ,{ rejectWithValue })=>{\r\n        const { opt } = args;\r\n        try{\r\n            const res = await ProdServices({\r\n                ...opt,\r\n                method : \"GET\"\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){    \r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const searchProduct = createAsyncThunk(\r\n    'products/searchProduct',\r\n    async(args,{rejectWithValue})=>{\r\n        try{\r\n            const { opt,value } = args;\r\n            const res = await ProdServices({\r\n                ...opt,\r\n                method : 'GET'\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const selectSingleProduct = createAsyncThunk(\r\n    'products/selectSingleProduct',\r\n    async(id,{rejectWithValue})=>{\r\n        try{\r\n            const res = await ProdServices({\r\n                method : 'GET',\r\n                url : '/products/' + id\r\n            });\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'products/createTransaction',\r\n    async( values,{rejectWithValue} )=>{\r\n        try{\r\n            const res = await ProdServices({\r\n                method : 'POST',\r\n                url : '/products',\r\n                data : values\r\n            });\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { createDraftSafeSelector, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport { searchProduct, selectAllProducts, selectSingleProduct } from './productServices';\r\n\r\nconst productsAdapter = createEntityAdapter({\r\n    selectId : (prod)=>prod._id,\r\n    sortComparer : (prod)=>prod.createdAt\r\n});\r\n\r\nconst productSlice = createSlice({\r\n    name : 'products',\r\n    initialState : productsAdapter.getInitialState({\r\n        loading : true,\r\n        selectedProd : [],\r\n        error : null,\r\n    }),\r\n    reducers : {},\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL PRODUCTS\r\n        builder.addCase(selectAllProducts.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectAllProducts.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(selectAllProducts.rejected,(state,{payload})=>{\r\n            state.loading = false;                \r\n            state.error = payload;\r\n        })\r\n        //FIND PRODUCT/S\r\n        .addCase(searchProduct.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(searchProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.setAll(state,payload);\r\n        })\r\n        .addCase(searchProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //FETCH SINGLE PRODUCT\r\n        .addCase(selectSingleProduct.pending,(state,{payload})=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(selectSingleProduct.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            productsAdapter.addOne(state,payload);\r\n        })\r\n        .addCase(selectSingleProduct.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        \r\n        \r\n    }\r\n});\r\n\r\nconst selectState = state=>state.products;\r\n\r\nexport const loadingSelector = createDraftSafeSelector(\r\n    selectState,\r\n    state=>state.loading\r\n);\r\n\r\nexport const productsSelector = productsAdapter.getSelectors(state=>state.products);\r\nexport default productSlice.reducer;","import { faBox, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconButton, TableCell, TableRow, Tooltip } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addItem } from '../../cart/store/CartSlice';\r\n\r\nfunction ProductItem({item}) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <>\r\n            <TableRow \r\n                hover key={item._id} \r\n                style={{ cursor : \"pointer\" }}\r\n            >\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}><FontAwesomeIcon color=\"grey\" icon={faBox} />&nbsp;&nbsp;{item.item_name}</TableCell>\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}>{item.item_qty}</TableCell>\r\n                <TableCell style={{\r\n                    fontSize : \"10px\"\r\n                }}>{item.item_price}</TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        color=\"primary\"\r\n                        onClick={()=>{\r\n                            dispatch( addItem(item) );\r\n                        }}\r\n                        style={{\r\n                            WebkitAppRegion : 'no-drag'\r\n                        }}\r\n                    >\r\n                        <FontAwesomeIcon icon={faPlusCircle} />\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProductItem\r\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { selectAllProducts } from '../store/productServices';\r\nimport { loadingSelector, productsSelector } from '../store/productSlice';\r\nimport ProductItem from './ProductItem';\r\nimport { io } from 'socket.io-client';\r\n\r\n\r\nfunction ProductsList() {\r\n\r\n    const dispatch = useDispatch();\r\n    const products = useSelector(productsSelector.selectAll);\r\n    const loading = useSelector(loadingSelector);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const socketCon = ()=>{\r\n        ipcRenderer.on('get-ip',(e,args)=>{\r\n            const host = args.address ? args.address : 'localhost';\r\n            const socket = io(`http://${host}:8081`);\r\n\r\n            socket.on(\"connect\",()=>{\r\n                if( products.length == 0 ){\r\n                    dispatch( selectAllProducts({\r\n                        opt : {\r\n                            url : '/products'\r\n                        }\r\n                    }) );\r\n                }     \r\n            });\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        socketCon();\r\n\r\n        dispatch( selectAllProducts({\r\n            opt : {\r\n                url : '/products'\r\n            }\r\n        }) );\r\n\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper} style={{ minHeight : \"600px\", position : 'relative' }}>\r\n                <Table size=\"small\" stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell>QTY</TableCell>\r\n                            <TableCell>Price</TableCell>\r\n                            <TableCell>Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {products.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(product=>(\r\n                            <ProductItem item={product} />\r\n                        ))}\r\n                    </TableBody>\r\n                    <TableRow\r\n                        style={{\r\n                            position : 'absolute',\r\n                            bottom : '0',\r\n                            left : '0'\r\n                        }}\r\n                    >\r\n                        <TableCell colSpan={4}>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[8, 16, 800]}\r\n                                count={products.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsList\r\n","const useStyles = {\r\n    Dashboard : {\r\n        height : '90%'\r\n    },\r\n    infoBlock : {\r\n        height : '50px',\r\n        borderRadius : '10px',\r\n        background : '#fff'\r\n    },\r\n    ContentBlock : {\r\n        height : '90%',\r\n        borderRadius : '10px',\r\n        padding : '20px'\r\n    }    \r\n}\r\n\r\nexport default useStyles;","import { Grid, Paper, Typography, withStyles } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport Cart from '../../cart/components/Cart';\r\nimport ProductsList from '../../products/components/ProductsList';\r\nimport Styles from './Styles';\r\n\r\n\r\nfunction Dashboard(props) {\r\n\r\n    const { ContentBlock,Dashboard,infoBlock } = props.classes;\r\n\r\n    return (\r\n        <Grid container className={Dashboard} spacing={2}>\r\n            <Grid direction=\"column\" item container lg={6} sm={6}> \r\n                <Cart />\r\n            </Grid>    \r\n            <Grid \r\n                item lg={6} \r\n                sm={6} \r\n                className={ContentBlock}\r\n            >\r\n                <ProductsList />\r\n            </Grid>  \r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(Dashboard)\r\n","const useStyles = {\r\n    '@global' : {\r\n        body : {\r\n            height : '100%',\r\n            margin : '0px',\r\n            '& #root' : {\r\n                height : '100%',\r\n            },\r\n            overflow : 'hidden',\r\n            position : 'relative',\r\n            borderRadius : \"15px\"\r\n        },\r\n        html : {\r\n            height : '95%',\r\n            margin : '0px',\r\n            padding : '20px',\r\n        }\r\n    },\r\n\r\n    root : {\r\n        height : '100%',\r\n        background : '#EBEBF7',\r\n        padding : \"20px\",\r\n        borderRadius : '20px',\r\n        position : 'relative'\r\n    },\r\n    \r\n    ContainerWrap : {\r\n        height : 'auto',\r\n        padding : '20px 0px 0px 0px !important',\r\n        position : 'relative'\r\n    }\r\n}\r\n\r\nexport default useStyles;","import { Snackbar } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Toast(props) {\r\n\r\n    const { handleCloseToast } = props;\r\n    const { message,severity,open } = useSelector(state=>state.notifications);\r\n\r\n    return (\r\n        <Snackbar\r\n            open={open} \r\n            autoHideDuration={4000} \r\n            onClose={handleCloseToast}\r\n            anchorOrigin={{vertical : 'bottom',horizontal : 'right'}}\r\n            style={{ bottom : \"50px\", right : '50px', WebkitAppRegion : 'no-drag' }}\r\n        >\r\n            <Alert\r\n                elevation={6} \r\n                variant=\"filled\"\r\n                onClose={handleCloseToast}\r\n                severity={severity}\r\n            >\r\n                {message}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default Toast\r\n","import { AppBar, Container, Dialog, Grid, IconButton, Paper, Slide, Toolbar } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { useEffect, useState,forwardRef } from 'react'\r\nimport { useHistory } from 'react-router';\r\n\r\nconst Transition = forwardRef((props,ref)=>{\r\n    return(\r\n        <Slide \r\n            direction=\"up\"\r\n            ref={ref}\r\n            {...props}\r\n        />\r\n    )\r\n});\r\n\r\nfunction PrintTransaction(props) {\r\n\r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    const handleClose = ()=>{\r\n        history.goBack();\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleClose}\r\n            TransitionComponent={Transition}\r\n            fullScreen\r\n        >\r\n            <AppBar\r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    backgroundColor : \"white\"\r\n                }}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton \r\n                        edge=\"start\" \r\n                        color=\"secondary\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        <Close />\r\n                    </IconButton>\r\n                </Toolbar>                \r\n            </AppBar>\r\n            <Container maxWidth=\"lg sm\">\r\n                <Grid container>\r\n                    TEST\r\n                </Grid>\r\n            </Container>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default PrintTransaction\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst { ipcRenderer } = window.require('electron');\r\nlet ReportServices;\r\n\r\nipcRenderer.on('get-ip',(e,args)=>{\r\n    const host = args.address ? args.address : 'localhost';\r\n    ReportServices = axios.create({\r\n        baseURL : `http://${host}:8081/api/v1/gc-print`,\r\n        timeout : 62 * 2 * 1000\r\n    });\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise((resolve)=>setTimeout(resolve,x))\r\n}\r\n\r\nexport const CreateTransactionReport = createAsyncThunk(\r\n    'report/CreateTransactionReport',\r\n    async(args,{rejectWithValue})=>{\r\n        try{\r\n            const { url } = args;\r\n            const res = await ReportServices({\r\n                url,\r\n                method : 'GET'\r\n            });\r\n            await sleep(2000);\r\n            return await res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","const useStyle = {\r\n    TransactionModal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        WebkitAppRegion : 'no-drag'\r\n    },\r\n    ModalContent : {\r\n        borderRadius : '10px',\r\n        padding : '20px',\r\n        width : '400px',\r\n        height : '400px',\r\n        backgroundColor : \"#ffffff\",\r\n        outline : 'none',\r\n        position : 'relative'\r\n    },\r\n    SuccessPageModal : {\r\n        position : \"relative\",\r\n        display : \"flex\",\r\n        flexDirection : \"column\",\r\n        height : \"100%\",\r\n        alignItems : \"center\",\r\n        justifyContent : \"center\",\r\n        outline : \"none\",\r\n        WebkitAppRegion : 'no-drag'\r\n    }\r\n}\r\n\r\nexport default useStyle;","export default (docs,logoURL)=>{\r\n\r\n    console.log(docs);\r\n\r\n    const customer_name = 'TEST';\r\n    const transaction_date = 'TEST DATE';\r\n    const transaction_type = 'TEST DATE';\r\n    const total_amount = 'TOTAL';\r\n\r\n    return {\r\n        pageSize : {\r\n            width : 684,\r\n            height : 396\r\n        },\r\n        pageMargins: [ 40, 50, 40, 60 ],\r\n        header : (currentPage)=>{\r\n            if( currentPage === 1 ){\r\n                return {\r\n                    columns : [\r\n                        {\r\n                            image : `data:image/png;base64,${logoURL}`,\r\n                            width : 40,\r\n                            height : 40,\r\n                            margin : [20,3,0,0]\r\n                        },\r\n                        {\r\n                            stack : [\r\n                                {\r\n                                    text : 'Glorious Cocolumber \\n',\r\n                                    style : 'header'\r\n                                },\r\n                                {\r\n                                    text : 'and Construction Supply',\r\n                                    style : 'subheader'\r\n                                }\r\n                            ],\r\n                            margin : [20,12]\r\n                        },\r\n                        {\r\n                            text : '4024 Old National Highway\\nBrgy. San Antonio Biñan, Laguna\\nCalabarzon, Philippines',                            \r\n                            alignment : 'right',\r\n                            margin : [0,12,20,12],\r\n                            fontSize : 8             \r\n                        }    \r\n                    ],\r\n                    margin : [20,8],\r\n                    width : '*',\r\n                }\r\n            }\r\n        },\r\n        footer : (currentPage,pageCount)=>{\r\n            if( currentPage === pageCount ){\r\n                return {\r\n                    columns : [\r\n                        {\r\n                            text : \"\\n_________________________ \\n \\n Prepared By\",                            \r\n                            alignment : 'left',\r\n                            fontSize : 9\r\n                        }, \r\n                        {\r\n                            text : \"\\n_________________________ \\n \\n Signiture over printed name\",                            \r\n                            fontSize : 9,\r\n                        },\r\n                        {\r\n                            text : [\r\n                                { text : `Php. ${parseFloat(total_amount).toFixed(2)}\\n`,alignment : 'center' },\r\n                                `_________________________ \\n \\n`,\r\n                                { text : 'Total Amount Purchased', alignment : 'center' }\r\n                            ],\r\n                            alignment : 'center',\r\n                            fontSize : 9\r\n                        }\r\n                    ],\r\n                    margin : [40,10,40,0],\r\n                    width : '*'\r\n                }\r\n            }\r\n        },\r\n        content : [\r\n            {                \r\n                stack : [\r\n                    {\r\n                        columns : [\r\n                            {\r\n                                text : [\r\n                                    'Customer Name : ',\r\n                                    {\r\n                                        text : `${customer_name}`,\r\n                                        color : 'maroon',\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 11,\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                            {\r\n                                text : [\r\n                                    'Transaction Date : ',\r\n                                    {\r\n                                        text : `${transaction_date}`,\r\n                                        color : 'maroon',\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 11,\r\n                                alignment : 'right',\r\n                                margin : [0,5,0,0]\r\n                            },\r\n                        ],\r\n                        \r\n                    },\r\n                    {\r\n                        columns : [\r\n                            {\r\n                                text : [\r\n                                    'Payment Type : ',\r\n                                    {\r\n                                        text : `${transaction_type}`,\r\n                                        color : transaction_type == 'full' ? 'green' : 'maroon',\r\n                                        italics : true\r\n                                    }\r\n                                ],\r\n                                bold : true,\r\n                                fontSize : 11,\r\n                                margin : [0,5,0,10]\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        layout : {\r\n                            hLineWidth : (i,node)=>{\r\n                                return (i === 0 || i === node.table.body.length) ? 1 : 0;\r\n                            },\r\n                            hLineHeight : (i,node)=>{\r\n                                return (i === 1) ? 0 : 1;\r\n                            },\r\n                            paddingBottom: (i, node, colIndex) => {\r\n                                const DEFAULT_PADDING = 2;\r\n                                // Calculate padding for the last element of the table.\r\n                                if (i === node.table.body.length - 1) {\r\n                                    const currentPosition = node.positions[node.positions.length - 1];\r\n                                    const totalPageHeight = currentPosition.pageInnerHeight;\r\n                                    const currentHeight = currentPosition.top;\r\n                                    const paddingBottom = totalPageHeight - currentHeight;\r\n                                    \r\n                                    if( paddingBottom < 0 ){\r\n                                        return DEFAULT_PADDING;\r\n                                    }else{\r\n                                        return paddingBottom;\r\n                                    }                                    \r\n                                } else {\r\n                                    return DEFAULT_PADDING;\r\n                                }\r\n                            }\r\n                        },\r\n                        table : {\r\n                            dontBreakRows : false,\r\n                            headerRows: 1,\r\n                            widths: [ '*','*', 40, 50,'*', '*'],\r\n                            body: [\r\n                                [\r\n                                    {\r\n                                        text : 'Item Name',\r\n                                        style : 'tableHeader'\r\n                                    }, \r\n                                    {\r\n                                        text : 'Supplier',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Quantity',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Price',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Total Qty Price',\r\n                                        style : 'tableHeader'\r\n                                    },\r\n                                    {\r\n                                        text : 'Discount',\r\n                                        style : 'tableHeader'\r\n                                    },                                    \r\n                                ],    \r\n                                ...docs                                                      \r\n                            ]\r\n                        }\r\n                    }                    \r\n                ],                \r\n                margin : [0,20,0,0]\r\n            }\r\n        ],\r\n        styles : {\r\n            header : {\r\n                bold : true,\r\n            },\r\n            subheader : {\r\n                fontSize : 9\r\n            },\r\n            tableHeader : {\r\n                fontSize : 10,\r\n                color : 'white',\r\n                fillColor : 'grey',\r\n                alignment : 'center',\r\n                margin : [0,6],\r\n                border : [true,false,true,false]\r\n            },\r\n            tableItems : {\r\n                alignment : 'center',\r\n                margin : [0,6],\r\n                fontSize : 9\r\n            }\r\n        },\r\n        defaultStyle : {\r\n            font : 'Roboto',\r\n            columnGap : 5\r\n        }\r\n    }\r\n}","import { faDollarSign, faMoneyBill, faMoneyBillAlt, faPrint, faSave, faUser, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Fade, Grid, Modal, withStyles, TextField, InputAdornment, ButtonGroup, Button, Typography, MenuItem } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport useStyle from './Styles';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CreateTransaction } from '../store/CartServices';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { cartLoading } from '../store/CartSlice';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { CreateTransactionReport } from '../../shared/store/ReportServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../docs/TransactionDocDef';\r\n\r\nfunction Transaction(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(cartLoading);\r\n    const {state : cart} = useLocation();\r\n    \r\n    const [open,setOpen] = useState(false);\r\n    const history = useHistory();\r\n    const {TransactionModal,ModalContent} = props.classes;\r\n    const [total,setTotal] = useState(0);\r\n    const [info,setInfo] = useState({\r\n        customer_name : '',\r\n        transact_payment_type : 'full',\r\n        cash_amount : 0,\r\n        transact_status : true\r\n    });\r\n\r\n    const handleClose = async (id)=>{\r\n        if( id.payload !== undefined ){\r\n            const { transact_id } = id.payload;\r\n            \r\n            const resTrans = await dispatch( CreateTransactionReport({\r\n                url : '/transactions/' + transact_id\r\n            }) );\r\n    \r\n            if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                const { doc,logo } = resTrans.payload;\r\n                let pdf = JSON.parse(doc);      \r\n\r\n                if( pdf.length > 0 ){                    \r\n                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                    const docDef = TransactionDocDef(pdf,logo);\r\n                    const docGenerator = pdfMake.createPdf(docDef);\r\n\r\n                    docGenerator.getBlob(blob=>{\r\n                        let url = window.URL.createObjectURL(blob);                                                \r\n                        history.push('/transaction/success?pdf=' + url +  \"&page=transaction\");\r\n                    });                    \r\n                }else{\r\n                    dispatch( OpenNotification({\r\n                        message : 'No Transaction has been made.',\r\n                        severity : 'error'\r\n                    }) );\r\n                }   \r\n            }else{\r\n                dispatch( OpenNotification({\r\n                    message : 'Transaction Failed, Pls try again.',\r\n                    severity : 'error'\r\n                }) );\r\n            }\r\n        }else{\r\n            history.goBack();\r\n        }    \r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        cart.map(item=>{\r\n            let price = item.total_per_unit;\r\n            setTotal( prevVal => prevVal + price)\r\n        })\r\n    },[]);\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500,\r\n                style : {\r\n                    borderRadius : '20px',\r\n                    height : '730px'\r\n                }\r\n            }}\r\n            className={TransactionModal}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={ModalContent}>\r\n                    <Grid container spacing={2}>                        \r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Number of Order :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={cart.length}\r\n                                    customInput={TextField}\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Total Price :&nbsp;\r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={total}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    prefix=\"Php \"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Cash Change :&nbsp;                                \r\n                                <NumberFormat\r\n                                    displayType=\"text\" \r\n                                    value={info.cash_amount == 0 ? 0.00 : info.cash_amount - total}\r\n                                    customInput={TextField}\r\n                                    fixedDecimalScale\r\n                                    decimalScale={2}\r\n                                    thousandSeparator\r\n                                    decimalSeparator=\".\"\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Total\"\r\n                                    InputProps={{\r\n                                        startAdornment : (\r\n                                            <InputAdornment position=\"start\">\r\n                                                <FontAwesomeIcon icon={faDollarSign} />\r\n                                            </InputAdornment>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                value={info.customer_name}\r\n                                onChange={(e)=>{\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            customer_name : e.target.value\r\n                                        }\r\n                                    });\r\n                                }}\r\n                                label=\"Customer Name\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <NumberFormat \r\n                                error={(info.transact_payment_type == 'full' && info.cash_amount < total ? true : false) || (\r\n                                    info.cash_amount == 0 && info.transact_payment_type == 'partial'\r\n                                )}\r\n                                label=\"Cash Amount\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                customInput={TextField}\r\n                                value={info.cash_amount}\r\n                                decimalScale={2}\r\n                                decimalSeparator=\".\"\r\n                                fixedDecimalScale\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBill} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                                onChange={(e)=>{\r\n                                    let cash = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            cash_amount : cash\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                select\r\n                                label=\"Payment Type\"\r\n                                value={info.transaction_payment_type}\r\n                                onChange={(e)=>{\r\n                                    let payment_type = e.target.value;\r\n                                    setInfo(info=>{\r\n                                        return {\r\n                                            ...info,\r\n                                            transact_payment_type : payment_type \r\n                                        }\r\n                                    });\r\n                                }}\r\n                            >\r\n                                <MenuItem value=\"full\">Full Payment</MenuItem>\r\n                                <MenuItem value=\"partial\">Partial Payment</MenuItem>\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid \r\n                            item \r\n                            lg={12} \r\n                            sm={12} \r\n                            style={{ \r\n                                position : 'absolute', \r\n                                bottom : '0',\r\n                                left : '0'\r\n                            }}\r\n                        >\r\n                            <ButtonGroup\r\n                                variant=\"outlined\" \r\n                                color=\"primary\" \r\n                                aria-label=\"contained primary button group\"\r\n                            >\r\n                                <Button \r\n                                    fullWidth \r\n                                    startIcon={<FontAwesomeIcon color=\"green\" icon={faMoneyBillAlt} />}\r\n                                    onClick={ async()=>{                                        \r\n                                        \r\n                                        if( info.customer_name == '' ) return;\r\n                                        if( info.cash_amount === 0 ) return; \r\n                                        if(info.transact_payment_type == 'full' && info.cash_amount < total) return;\r\n\r\n                                        const resTrans = await dispatch( CreateTransaction({\r\n                                            values : cart.map(item=>{\r\n                                                return {\r\n                                                    ...item,                                                    \r\n                                                    customer_name : info.customer_name,\r\n                                                    total_amount : total,\r\n                                                    cash_amount : info.cash_amount,\r\n                                                    change_amount : info.cash_amount - total,\r\n                                                    transact_payment_type : info.transact_payment_type,\r\n                                                    transact_status : info.transact_payment_type === 'full' ? true : false\r\n                                                }\r\n                                            })\r\n                                        }) );\r\n\r\n                                        if( CreateTransaction.fulfilled.match(resTrans) ){\r\n                                            handleClose(resTrans);\r\n                                        }else if( CreateTransaction.rejected.match(resTrans) ){\r\n                                            dispatch( OpenNotification({\r\n                                                message : 'Error : ' + resTrans.payload,\r\n                                                severity : 'error'\r\n                                            }) );\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    Process Order\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                >Cancel</Button>\r\n                            </ButtonGroup>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyle)(Transaction)\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst ConnectionSlice = createSlice({\r\n    name : 'connection',\r\n    initialState : {\r\n        isConnected : false\r\n    },\r\n    reducers : {\r\n        setConnection : (state,{payload})=>{\r\n            state.isConnected = payload;\r\n        }\r\n    }\r\n});\r\nexport const { setConnection } = ConnectionSlice.actions;\r\nexport default ConnectionSlice.reducer;","import { Box, Button, Divider, Grid, IconButton, InputAdornment, Paper, TextField, Typography, withStyles } from '@material-ui/core'\r\nimport { Close, Minimize } from '@material-ui/icons'\r\nimport React, { useEffect,useState } from 'react'\r\nimport useStyles from './Styles';\r\nimport { motion } from 'framer-motion';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircle, faList, faSearch, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { io } from 'socket.io-client';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setConnection } from '../store/ConnectionSlice';\r\nimport { searchProduct, selectAllProducts } from '../../products/store/productServices';\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction Header(props) {\r\n\r\n    const { ipcRenderer } = window.require('electron');\r\n    const { searchRef } = props;\r\n    const { HeaderWrap } = props.classes;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const { isConnected : connection } = useSelector(state=>state.connection);\r\n    const history = useHistory();\r\n    \r\n    const closeWindow = ()=>{\r\n        ipcRenderer.invoke('close');\r\n    }\r\n  \r\n    const minimizeWindow = ()=>{\r\n        ipcRenderer.invoke('min');\r\n    }\r\n\r\n    const socketCon = ()=>{\r\n        ipcRenderer.on('get-ip',(e,args)=>{\r\n\r\n            console.log(args);\r\n\r\n            const host = args.address ? args.address : 'localhost';\r\n            const socket = io(`http://${host}:8081`);\r\n    \r\n            socket.on('connect',()=>{\r\n                dispatch( setConnection(socket.connected) );\r\n            });\r\n    \r\n            socket.on('disconnect',()=>{\r\n                dispatch( setConnection(socket.connected) );\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n\r\n        socketCon();\r\n\r\n    },[]);\r\n\r\n    return (\r\n        <Grid              \r\n            item   \r\n            container\r\n            lg={12} sm={12}\r\n            className={HeaderWrap}\r\n            component={Paper}\r\n            elevation={2}\r\n            style={{\r\n                display : \"flex !important\",\r\n                flexDirection : 'row',\r\n                justifyContent : \"space-between\"\r\n            }}\r\n        >\r\n            <Box\r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    height : \"40px\",\r\n                    alignSelf : \"center\",\r\n                    display : 'flex'\r\n                }}\r\n            >\r\n                <TextField \r\n                    size=\"small\"\r\n                    margin=\"none\"                    \r\n                    variant=\"outlined\" \r\n                    label=\"Search Product\"\r\n                    inputRef={searchRef}\r\n                    InputProps={{\r\n                        startAdornment : (\r\n                            <InputAdornment position=\"start\">\r\n                                <FontAwesomeIcon icon={faSearch} />\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                    onKeyPress={(e)=>{\r\n                        if( e.key === 'Enter' ){\r\n                            dispatch( searchProduct({\r\n                                opt : {\r\n                                    url : '/products/search/' + e.target.value\r\n                                }\r\n                            }) );\r\n                        }\r\n                    }}\r\n                />    \r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />                \r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center'\r\n                    }}\r\n                >\r\n                    <IconButton                        \r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            dispatch( selectAllProducts({\r\n                                opt : {\r\n                                    url : '/products'\r\n                                }\r\n                            }) );\r\n                        }}\r\n                    >                        \r\n                        <FontAwesomeIcon color=\"blue\" icon={faSyncAlt} />    \r\n                    </IconButton>                    \r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        startIcon={<FontAwesomeIcon color=\"green\" icon={faList} />}\r\n                        size=\"small\"\r\n                        onClick={()=>{\r\n                            history.push('/translist');\r\n                        }}                        \r\n                    >\r\n                        Transactions\r\n                    </Button>\r\n                </Box>\r\n                <Divider style={{ margin : \"0px 10px\"}} variant=\"fullWidth\" orientation=\"vertical\" flexItem />\r\n                <Box\r\n                    style={{\r\n                        WebkitAppRegion : \"no-drag\",\r\n                        height : \"40px\",\r\n                        display : 'flex',\r\n                        alignItems : 'center',\r\n                        justifySelf : 'flex-end'\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon icon={faCircle} color={\r\n                        connection ? \"green\" : \"red\"\r\n                    } />\r\n                    <Typography variant=\"caption\">&nbsp;{ connection ? \"Connected to Server\" : \"Disconnected\" }</Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box  \r\n                style={{\r\n                    WebkitAppRegion : \"no-drag\",\r\n                    alignSelf : \"center\"\r\n                }}\r\n            >\r\n                <IconButton\r\n                    size=\"small\"\r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={minimizeWindow}\r\n                >\r\n                    <Minimize \r\n                        color=\"primary\" \r\n                    />\r\n                </IconButton>\r\n                <IconButton                     \r\n                    size=\"small\"                     \r\n                    component={motion.div}\r\n                    whileHover={{scale : 1.1}}\r\n                    onClick={closeWindow}\r\n                >\r\n                    <Close \r\n                        color=\"secondary\" \r\n                    />\r\n                </IconButton>&nbsp;&nbsp;\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(Header)\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst { ipcRenderer } = window.require('electron');\r\nlet TransServices;\r\n\r\nipcRenderer.on('get-ip',(e,args)=>{\r\n    const host = args.address ? args.address : 'localhost';\r\n    TransServices = axios.create({\r\n        baseURL : `http://${host}:8081/api/v1`,\r\n        timeout : 60 * 2 * 1000\r\n    });\r\n});\r\n\r\nconst sleep = (x)=>{\r\n    return new Promise(resolve=>setTimeout(resolve,x));\r\n}\r\n\r\nexport const getAllTransaction = createAsyncThunk(\r\n    'transactions/getAllTransaction',\r\n    async(args,{ rejectWithValue })=>{\r\n        const { opt } = args;\r\n        try{\r\n            const res = await TransServices({\r\n                ...opt,\r\n                method : 'GET'\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getSingleTransaction = createAsyncThunk(\r\n    'transactions/getSingleTransaction',\r\n    async(args, {rejectWithValue})=>{\r\n        const { opt } = args;\r\n        try{\r\n            const res = await TransServices({\r\n                ...opt,\r\n                method : 'GET'\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const createTransaction = createAsyncThunk(\r\n    'transactions/createTransaction',\r\n    async(args,{ rejectWithValue })=>{\r\n        const { opt,values } = args;\r\n        try{\r\n            const res = await TransServices({\r\n                ...opt,\r\n                method : 'POST',\r\n                data : values\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err);\r\n        }\r\n    }\r\n);\r\n\r\nexport const findTransaction = createAsyncThunk(\r\n    'transactions/findTransaction',\r\n    async( args, { rejectWithValue } )=>{        \r\n        try{\r\n            const { opt } = args;\r\n            const res = await TransServices({\r\n                ...opt,\r\n                method : 'GET'\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const getDocDef = createAsyncThunk(\r\n    'transactions/getDocDef',\r\n    async(args,{rejectWithValue})=>{\r\n        try{\r\n            const { opt } = args;\r\n            const res = await TransServices({\r\n                ...opt,\r\n                method : 'GET',\r\n                responseType : 'blob',  \r\n                headers: {\r\n                    Accept: 'application/pdf',\r\n                    'Content-Type': 'application/pdf',\r\n                    mode : 'no-cors'\r\n                }\r\n            });\r\n            const url = window.URL.createObjectURL(res.data);\r\n            return url;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const updateTransaction = createAsyncThunk(\r\n    'transactions/updateTransaction',\r\n    async(args,{rejectWithValue})=>{\r\n        try{\r\n            const { opt,value } = args;\r\n            const res = await TransServices({\r\n                ...opt,\r\n                method : 'PATCH',\r\n                data : value\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\nexport const deleteTransaction = createAsyncThunk(\r\n    'transactions/deleteTransaction',\r\n    async(args,{rejectWithValue})=>{\r\n        try{\r\n            const { opt } = args;\r\n            const res = await TransServices({\r\n                ...opt,\r\n                method : 'DELETE'\r\n            });\r\n            await sleep(2000);\r\n            return res.data;\r\n        }catch(err){\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);","import { faBoxes, faCalendar, faIdCard, faMarker, faMoneyBillWaveAlt, faPrint, faStop, faTrash, faUserTie } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Backdrop, Button, ButtonGroup, Fade, Grid, IconButton, InputAdornment, makeStyles, Modal, TextField } from '@material-ui/core'\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { useState,useEffect } from 'react';\r\nimport NumberFormat from 'react-number-format';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Loader from '../../shared/components/Loader';\r\nimport { OpenNotification } from '../../shared/store/NotificationSlice';\r\nimport { deleteTransaction, getDocDef, updateTransaction } from '../store/TransactionServices';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\r\nimport TransactionDocDef from '../../cart/docs/TransactionDocDef';\r\nimport {CreateTransactionReport} from '../../shared/store/ReportServices';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    Modal : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    ModalContent : {\r\n        width : \"450px\",\r\n        height : \"auto\",\r\n        borderRadius : \"5px\",\r\n        background : \"#ffffff\",\r\n        outline : 'none',\r\n        padding : \"25px\"   \r\n    }\r\n}));\r\n\r\nconst BtnGroupSingleTrans = (props)=>{\r\n\r\n    const { data,fn } = props;\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector(state=>state.report);\r\n    const [payment,setPayment] = useState({\r\n        partial_payments : 0\r\n    });\r\n    const history = useHistory();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Grid item container lg={12} sm={12} spacing={2}>\r\n            {data.payment_type === 'partial' ? (\r\n                <Grid item lg={6} sm={6}>\r\n                    <NumberFormat\r\n                        customInput={TextField}\r\n                        fixedDecimalScale\r\n                        decimalScale={2}\r\n                        thousandSeparator\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        label=\"Amount\"\r\n                        margin=\"dense\"                                        \r\n                        variant=\"outlined\"\r\n                        onChange={(e)=>{                        \r\n                            setPayment(payment=>{\r\n                                return {\r\n                                    ...payment,\r\n                                    partial_payments : parseInt(e.target.value)\r\n                                }\r\n                            })\r\n                        }}\r\n                        InputProps={{\r\n                            style : {\r\n                                color : data.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                            }, \r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            ) : (\r\n                <div></div>\r\n            )}\r\n            <Grid \r\n                item \r\n                lg={6} \r\n                sm={6}\r\n                style={{\r\n                    display : \"flex\",\r\n                    justifyContent : \"center\",\r\n                    alignItems : \"center\"\r\n                }}\r\n            >\r\n                <ButtonGroup variant=\"contained\">\r\n                    {data.payment_type === 'partial' ? (\r\n                        <Button    \r\n                            size=\"small\"                                                                                    \r\n                            color=\"secondary\"\r\n                            style={{\r\n                                background : \"green\"\r\n                            }}\r\n                            onClick={async()=>{\r\n                                const res = await dispatch( updateTransaction({\r\n                                    opt : {\r\n                                        url : '/transactions/' + data._id\r\n                                    },\r\n                                    value : payment\r\n                                }) );\r\n\r\n                                if( updateTransaction.fulfilled.match(res) ){\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Updated',\r\n                                        severity : 'success'\r\n                                    }) );\r\n                                }else{\r\n                                    dispatch( OpenNotification({\r\n                                        message : 'Transaction Update Failed',\r\n                                        severity : 'error'\r\n                                    }) );\r\n                                }\r\n                            }}\r\n                            startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                        >\r\n                            Pay\r\n                        </Button>\r\n                    ) : (\r\n                        <Button size=\"small\" disabled >Paid</Button>\r\n                    )}\r\n                    <Button \r\n                        size=\"small\"                                                                                       \r\n                        color=\"primary\"\r\n                        onClick={async ()=>{\r\n                            \r\n                            const resTrans = await dispatch( CreateTransactionReport({\r\n                                url : '/transactions/' + data._id\r\n                            }) );\r\n\r\n                            if( CreateTransactionReport.fulfilled.match(resTrans) ){\r\n                                const { doc,logo } = resTrans.payload;\r\n                                let pdf = JSON.parse(doc);      \r\n                                \r\n                                console.log(\"PDF : \",pdf);\r\n\r\n                                if( pdf.length > 0 ){\r\n                                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n                                    const docDef = TransactionDocDef(pdf,logo);\r\n                                    const docGenerator = pdfMake.createPdf(docDef);\r\n\r\n                                    docGenerator.getBlob(blob=>{\r\n                                        console.log(blob);\r\n                                        const url = window.URL.createObjectURL(blob);                        \r\n                                        history.push('/transaction/success?pdf=' + url);\r\n                                    });\r\n                                }\r\n                            }else{\r\n                                dispatch( OpenNotification({\r\n                                    message : 'Cannot Print Transaction, please try again.',\r\n                                    severity : 'error'\r\n                                }) );\r\n                            }\r\n                        }}\r\n                        startIcon={<FontAwesomeIcon icon={faPrint} />}\r\n                    >\r\n                        Print\r\n                    </Button>\r\n                    <Button   \r\n                        size=\"small\"                                                                                     \r\n                        color=\"secondary\"\r\n                        onClick={fn}\r\n                        startIcon={<FontAwesomeIcon icon={<Close />} />}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction TransactionSingle(props) {\r\n\r\n    const { inOpen,onClose,data : transaction } = props;\r\n    \r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const classes = useStyles();\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={inOpen}\r\n            onClose={onClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500\r\n            }}\r\n            className={classes.Modal}\r\n        >\r\n            <Fade\r\n                in={inOpen}\r\n            >\r\n                <div className={classes.ModalContent}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Transaction ID\"\r\n                                value={transaction._id}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faIdCard} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={12} sm={12}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                disabled\r\n                                label=\"Customer\"\r\n                                value={transaction.customer_name}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faUserTie} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={4} sm={4}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label=\"Item in cart\"\r\n                                value={transaction.cart_count}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faBoxes} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={8} sm={8}>\r\n                            <TextField \r\n                                size=\"small\"\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                fullWidth\r\n                                label=\"Transaction Date\"\r\n                                value={new Date(transaction.transaction_date).toISOString().split('T')[0]}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faCalendar} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={5} sm={5}>\r\n                            <TextField \r\n                                size=\"small\"                                \r\n                                fullWidth\r\n                                label=\"Payment Type\"\r\n                                value={transaction.payment_type}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={7} sm={7}>\r\n                            <NumberFormat\r\n                                customInput={TextField}\r\n                                fixedDecimalScale\r\n                                disabled={ transaction.payment_type === 'full' ? true : false }\r\n                                decimalScale={2}\r\n                                thousandSeparator\r\n                                allowNegative={false}\r\n                                prefix=\"Php \" \r\n                                size=\"small\"\r\n                                fullWidth\r\n                                label={transaction.payment_type == 'partial' ? \"Remaining Balance\" : \"Change Amount\"}\r\n                                value={transaction.change_amount}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    style : {\r\n                                        color : transaction.payment_type == 'partial' ? \"maroon\" : \"green\"\r\n                                    }, \r\n                                    startAdornment : (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <FontAwesomeIcon icon={faMoneyBillWaveAlt} />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <BtnGroupSingleTrans fn={onClose} data={transaction} />\r\n                    </Grid>\r\n                </div>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TransactionSingle\r\n","import { TableCell, TableRow } from '@material-ui/core';\r\nimport NumberFormat from 'react-number-format';\r\nimport React, { useState } from 'react'\r\nimport TransactionSingle from './TransactionSingle';\r\n\r\nfunction TransactionItems({transaction}) {\r\n\r\n    const [open,setOpen] = useState(false);\r\n\r\n    const handleOpen = ()=>{\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = ()=>{\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <TableRow\r\n            key={transaction._id}\r\n            hover\r\n            onDoubleClick={handleOpen}\r\n            style={{ \r\n                background : transaction.payment_type == 'partial' ? '#fafafa' : '',\r\n                cursor : 'pointer',\r\n                userSelect : 'none'\r\n            }}\r\n        >\r\n            <TableCell>{transaction.customer_name}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.cart_count}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.transaction_date.split('T')[0]}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >{transaction.payment_type}</TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.cash_amount}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.total_price}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TableCell\r\n                style={{\r\n                    textAlign : \"center\"\r\n                }}\r\n            >\r\n                <NumberFormat \r\n                    displayType=\"text\"\r\n                    value={transaction.change_amount}\r\n                    allowNegative={false}\r\n                    fixedDecimalScale\r\n                    decimalScale={2}\r\n                    thousandSeparator\r\n                    prefix=\"Php \"\r\n                />\r\n            </TableCell>\r\n            <TransactionSingle data={transaction} inOpen={open} onClose={handleClose} />\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nexport default TransactionItems\r\n","import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    AppBar, \r\n    Dialog, \r\n    Grid, \r\n    IconButton, \r\n    InputAdornment, \r\n    makeStyles, \r\n    Paper, \r\n    Slide, \r\n    Table, \r\n    TableBody, \r\n    TableCell, \r\n    TableContainer, \r\n    TableHead, \r\n    TablePagination, \r\n    TableRow, \r\n    TextField, \r\n    Toolbar \r\n} from '@material-ui/core';\r\nimport { KeyboardDatePicker,MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { Close } from '@material-ui/icons';\r\nimport React, { forwardRef, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { findTransaction, getAllTransaction } from '../store/TransactionServices';\r\nimport TransactionItems from './TransactionItems';\r\nimport Loader from '../../shared/components/Loader';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    appBar : {\r\n        position : 'relative',\r\n        background : \"#ffffff\"\r\n    }\r\n}));\r\n\r\nconst TransitionDialog = forwardRef((props,ref)=>{\r\n    return(\r\n        <Slide \r\n            direction=\"up\"\r\n            ref={ref}\r\n            {...props}            \r\n        />\r\n    )\r\n});\r\n\r\nfunction TransactionList(props) {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { entities : transactions } = useSelector(state=>state.transactions);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    \r\n    const [open,setOpen] = useState(false);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(8);\r\n    const [search,setSearch] = useState('');\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleClose = ()=>{\r\n        setOpen(false);\r\n        history.goBack();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n        dispatch( getAllTransaction({\r\n            opt : {\r\n                url : '/transactions'\r\n            }\r\n        }) );\r\n    },[]);\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date(Date.now()).toLocaleDateString());\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(new Date(date));\r\n        let selDate = new Date(date);\r\n        dispatch( findTransaction({\r\n            opt : {\r\n                url : `/search/transactions?date=${selDate}`\r\n            }\r\n        }) )\r\n    };\r\n\r\n    if( loading ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Dialog\r\n            fullScreen\r\n            open={open}\r\n            onClose={handleClose}\r\n            TransitionComponent={TransitionDialog}\r\n            BackdropProps={{\r\n                style : {\r\n                    height : \"730px\",\r\n                    borderRadius : \"15px\"\r\n                }\r\n            }}\r\n            style={{\r\n                WebkitAppRegion : \"no-drag\",\r\n                padding : \"20px\",\r\n                height : \"690px\",\r\n                borderRadius : \"10px\"\r\n            }}\r\n        >   \r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar \r\n                    style={{\r\n                        justifyContent : 'space-between'\r\n                    }}\r\n                >\r\n                    <TextField \r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        label=\"Search\"\r\n                        InputProps={{\r\n                            startAdornment : (\r\n                                <InputAdornment position=\"start\">\r\n                                    <FontAwesomeIcon icon={faSearch} />\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                        style={{\r\n                            flexBasis : \"220px\",\r\n                            flex : 2,\r\n                            marginRight : \"10px\"\r\n                        }}\r\n                        onKeyDown={(e)=>{\r\n                            setSearch(e.target.value);\r\n                        }}\r\n                        onKeyPress={(e)=>{\r\n                            if( e.key === 'Enter' ){\r\n                                dispatch( findTransaction({\r\n                                    opt : {\r\n                                        url : `/search/transactions?s=${search}`\r\n                                    }\r\n                                }) )\r\n                            }\r\n                        }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"yyyy-dd-MM\"\r\n                        size=\"small\"\r\n                        margin=\"dense\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Filter Date\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          'aria-label': 'change date',\r\n                        }}\r\n                        style={{\r\n                            alignSelf : \"flex-start\",\r\n                            flex : 1\r\n                        }}\r\n                    />\r\n                    <IconButton focusRipple={false} style={{ margin : \"0px 8px\" }} size=\"small\" onClick={handleClose}>\r\n                        <Close color=\"secondary\" />\r\n                    </IconButton>                    \r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid container>\r\n                <Grid item lg={12} sm={12} style={{ padding : \"30px\" }}>\r\n                    <TableContainer\r\n                        component={Paper}\r\n                        elevation={2}\r\n                    >\r\n                        <Table \r\n                            stickyHeader \r\n                            size=\"medium\"\r\n                        >\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell style={{ fontWeight : 600 }}>Customer Name</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>In cart</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Transaction date</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Payment Type</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Cash Amount</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Total</TableCell>\r\n                                    <TableCell style={{ fontWeight : 600, textAlign : 'center' }}>Change</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {transactions.slice(page * rowsPerPage,page * rowsPerPage + rowsPerPage).map(entry=>(\r\n                                    <TransactionItems transaction={entry} />\r\n                                ))}\r\n                            </TableBody>\r\n                            <TablePagination \r\n                                rowsPerPageOptions={[8, 16, 800]}\r\n                                count={transactions.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                labelRowsPerPage={false}\r\n                            />\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>            \r\n        </Dialog>\r\n        </MuiPickersUtilsProvider>\r\n    )\r\n}\r\n\r\nexport default TransactionList\r\n","import React,{ useEffect,useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { Modal,Backdrop,Fade, Fab } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport Loader from '../../shared/components/Loader';\r\nimport Styles from './Styles';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { Close } from '@material-ui/icons';\r\n\r\nexport const useQuery = ()=>{\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction SuccessPage(props) {\r\n\r\n    const history = useHistory();\r\n    const [open,setOpen] = useState(false);\r\n    const { loading } = useSelector(state=>state.transactions);\r\n    const { loading : rptLoad } = useSelector(state=>state.report);\r\n    const query = useQuery();\r\n    const pdf = query.get('pdf');\r\n    const page = query.get('page');\r\n    const { classes } = props;\r\n\r\n    const handleClose = ()=>{\r\n        \r\n        if( page === 'transaction' ){\r\n            history.goBack();\r\n        }else{\r\n            history.push('/');\r\n        }\r\n\r\n        setOpen(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    if( loading || rptLoad ){\r\n        return(\r\n            <Loader />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout : 500\r\n            }}\r\n        >\r\n            <Fade\r\n                in={open}\r\n            >\r\n                <div className={classes.SuccessPageModal}>\r\n                    <Fab\r\n                        size=\"small\"\r\n                        variant=\"round\"\r\n                        onClick={handleClose}\r\n                        style={{\r\n                            position : \"absolute\",\r\n                            left : 15,\r\n                            top : 8,          \r\n                            WebkitAppRegion : \"no-drag\"          \r\n                        }}\r\n                    >\r\n                        <Close />\r\n                    </Fab>\r\n                    <iframe                         \r\n                        style={{\r\n                            border : \"none\",    \r\n                            WebkitAppRegion : 'no-drag'                        \r\n                        }} \r\n                        onClick={handleClose}                         \r\n                        src={pdf+'#toolbar=1'} \r\n                        width=\"100%\" \r\n                        height=\"100%\"\r\n                    ></iframe>\r\n                </div>                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default withStyles(Styles)(SuccessPage)\r\n","import React,{useEffect,useRef} from 'react';\nimport { BrowserRouter as Router,Switch, Route } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Index';\nimport ProductsList from './products/components/ProductsList';\nimport { io } from 'socket.io-client';\nimport { Grid, withStyles } from '@material-ui/core';\nimport useStyles from './Styles';\nimport Toast from './shared/components/Toast';\nimport { useDispatch } from 'react-redux';\nimport { CloseNotification } from './shared/store/NotificationSlice';\nimport PrintTransaction from './cart/components/PrintTransaction';\nimport Transaction from './cart/components/Transaction';\nimport Header from './shared/components/Header';\nimport TransactionList from './transactions/components/TransactionList';\nimport SuccessPage from './cart/components/SuccessPage';\n\nfunction App(props) {\n\n  const dispatch = useDispatch();\n  const { root,ContainerWrap } = props.classes;\n  const { ipcRenderer } = window.require('electron');\n  const searchRef = useRef(null);\n\n  const focusSearch = ()=>{\n      searchRef.current.focus();\n  }\n\n  const socketCon = ()=>{\n    ipcRenderer.on('get-ip',(e,args)=>{\n        const host = args.address ? args.address : 'localhost';\n        const socket = io(`http://${host}:8081`);\n\n        socket.emit('client',{\n            name : \"client\"\n        });\n  });\n\n  }\n\n  useEffect(()=>{\n\n      socketCon();  \n\n      document.addEventListener('keydown',(e)=>{\n          if( e.ctrlKey && e.key == 'f' ){\n              focusSearch();\n          }\n      });\n\n      return ()=>{\n        document.removeEventListener('keydown',(e)=>{          \n            if( e.ctrlKey && e.key == 'f' ){\n                focusSearch();\n            }\n        });\n      }\n\n  },[]);\n\n  const handleClose = ()=>{\n      dispatch( CloseNotification() );\n  }\n\n  return (\n    <Router>\n    <Grid style={{ WebkitAppRegion : 'drag' }} container dicrection=\"column\" className={root} spacing={3}>\n        <Header searchRef={searchRef} />\n        <Grid item lg={12} sm={12} className={ContainerWrap}>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Dashboard />\n                </Route>\n                <Route exact path=\"/products\" >\n                    <ProductsList />\n                </Route>\n                <Route exact path=\"/print\" >\n                    <PrintTransaction />\n                </Route>\n                <Route exact path=\"/transaction\">\n                    <Transaction />\n                </Route>\n                <Route exact path=\"/transaction/success\">\n                    <SuccessPage />\n                </Route>\n                <Route exact path=\"/translist\">\n                    <TransactionList />\n                </Route>\n            </Switch>\n            <Toast\n                handleCloseToast={handleClose}\n            />\n        </Grid>\n    </Grid>\n    </Router>\n  );\n}\n\nexport default withStyles(useStyles)(App);","import { createSlice } from '@reduxjs/toolkit';\r\nimport { createTransaction, deleteTransaction, findTransaction, getAllTransaction,getDocDef,updateTransaction } from './TransactionServices';\r\n\r\nconst transactionSlice = createSlice({\r\n    name : 'transactions',\r\n    initialState : {\r\n        entities : [],\r\n        pdf : [],\r\n        loading : false,\r\n        errors : null\r\n    },\r\n    reducers : {},\r\n    extraReducers : (builder)=>{\r\n        //FETCH ALL TRANSACTIONS\r\n        builder.addCase(getAllTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getAllTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(getAllTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //FIND TRANSACTION\r\n        .addCase(findTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(findTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(findTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //GET DOCUMENT DEFINITION FOR PRINT\r\n        .addCase(getDocDef.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(getDocDef.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.pdf = payload;\r\n        })\r\n        .addCase(getDocDef.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //CREATE TRANSACTION\r\n        .addCase(createTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(createTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities[payload._id] = payload;\r\n        })\r\n        .addCase(createTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //UPDATE TRANSACTION\r\n        .addCase(updateTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(updateTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(updateTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n        //DELETE TRANSACTION\r\n        .addCase(deleteTransaction.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase(deleteTransaction.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.entities = payload;\r\n        })\r\n        .addCase(deleteTransaction.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.errors = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default transactionSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\nimport { CreateTransactionReport } from './ReportServices';\r\n\r\nconst ReportSlice = createSlice({\r\n    name : 'report',\r\n    initialState : {\r\n        doc : '',\r\n        loading : false,\r\n        error : ''\r\n    },\r\n    reducers : {},\r\n    extraReducers : builder =>{\r\n        builder.addCase( CreateTransactionReport.pending,state=>{\r\n            state.loading = true;\r\n        })\r\n        .addCase( CreateTransactionReport.fulfilled,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.doc = payload;\r\n        })\r\n        .addCase(CreateTransactionReport.rejected,(state,{payload})=>{\r\n            state.loading = false;\r\n            state.error = payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport default ReportSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport ProductReducers from '../../products/store/productSlice';\r\nimport CartReducer from '../../cart/store/CartSlice';\r\nimport NotificationReducer from './NotificationSlice';\r\nimport TransactionReducer from '../../transactions/store/TransactionSlice';\r\nimport ConnectionReducer from './ConnectionSlice';\r\nimport ReportReducer from './ReportSlice';\r\n\r\nexport default configureStore({\r\n    reducer : {\r\n        products : ProductReducers,\r\n        cart : CartReducer,\r\n        notifications : NotificationReducer,\r\n        transactions : TransactionReducer,\r\n        connection : ConnectionReducer,   \r\n        report : ReportReducer     \r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './shared/store/MainStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}